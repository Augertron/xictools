#! /bin/sh

# Script: update
# Usage: update [-f] [-t] [-y] <progname>
# Adjunct for updating the distribution repository.
#
# Options:
# -f:  force update of same version number.
# -t:  dry run, no actual operations but print commands
# -y:  skip prompts (y to all).
#
# This calls fetchnew to perform the file transfers.


force=no
dryrun=no
nopr=no

wrcad_home=/home/webadmin/wrcad.com/html

get_namelist()
{
    prog=$1

    if [ ! -f exported ]; then
        echo $(./exported.new oses)
    else
        vn=$(./exported.new version $prog)
        vo=$(./exported version $prog)
        if [ $force = yes -o "$vo" != $vn ]; then
            echo $(./exported.new oses)
        fi
        # If any new directories, output these.
        nms=
        oses=$(./exported.new oses)
        for os in $oses; do
            host=$(./exported host $os)
            if [ -z "$host" ]; then
                if [ -z "$nms" ]; then
                    nms=$os
                else
                    nms="$nms $os"
                fi
            fi
        done
        echo $nms
    fi
}

clear_old()
{
    prog=$1
    if [ -f exported ]; then
        vers=$(./exported version $prog)
        # oses is already set, from the new list.
        for os in $oses; do
            if [ -z "$(./exported host $os)" ]; then
                continue
            fi
            tifs=$IFS
            IFS="."
            set -- $os
            IFS=$tifs
            bn=$1
            fn=$wrcad_home/xictools/$os/xictools_$prog-$bn-$vers*
            for a in $fn; do
                if [ -f $a ]; then
                    if [ $nopr = yes ]; then
                        echo "rm -f $a"
                        if [ $dryrun = no ]; then
                            rm -f $a
                        fi
                    else
                        echo -n "delete $a ? "
                        read yn
                        if [ x"$yn" = xy ]; then
                            if [ $dryrun = no ]; then
                                rm -f $a
                            else
                                echo "dry run, file not deleted"
                            fi
                        fi
                    fi
                fi
            done
        done
    fi
}

if [ ! -f exported.new ]; then
    echo "Error: no \'exported.new\' script."
    exit 1
fi

while true; do
    if [ -z $1 ]; then
        break;
    fi
    if [ $1 = -f ]; then
        force=yes;
    elif [ $1 = -t ]; then
        dryrun=yes;
    elif [ $1 = -y ]; then
        nopr=yes
    else
        which=$1
    fi
    shift
done

if [ -z $which ]; then
    echo Usage: update progname
    exit
fi
oses=`get_namelist $which`
if [ -z "$oses" ]; then
    echo Nothing found to update.
    exit
fi
echo "Updating: $oses"
clear_old $which
if [ $nopr = yes ]; then
    if [ $dryrun = no ]; then
        ./fetchnew $which "$oses"
    else
        ./fetchnew -t $which "$oses"
    fi
else
    echo -n  "execute ./fetchnew $which \"$oses\" ? "
    read yn
    if [ x"$yn" = xy ]; then
        if [ $dryrun = no ]; then
            ./fetchnew $which "$oses"
        else
            ./fetchnew -t $which "$oses"
        fi
    fi
fi

