#! /bin/sh
#
# wr_install - script to install XicTools packages with Safe Install.
# For XicTools-4.3 (open source) branch ONLY.

# Usage: wr_install [-t] distrib_file ...
#
# The arguments are XicTools package files as obtained (for example)
# from the Whiteley Research web site.  DO NOT CHANGE THE NAMES OF
# THESE FILES!  If "-t" is given, files that follow won't be
# installed, but the commands that would be executed are printed.

# This script is also called by Xic and WRspice when doing updates
# through the programs, using "wr_install -upd distrib_file prefix".

# Unlike earlier releases, this script does NOT implement Safe
# Install, which is now implemented in the pre/post install scripts
# built into the distribution files and called during installation. 
# This script is now just a simple wrapper around the native
# installation tools.

# In XicTools-4.3, Safe Install applies to all supported operating
# systems, including Microsoft Windows.  This applies to Xic and
# WRspice only.  In Safe Install, during an update the previous
# release is saved in its entirety, and can be reveerted to if there
# is a problem with the new release.  The user can remove the old
# release by manually deleting its directory tree at any time.

# Safe Install is implemented within the distribution installation
# logic itself, and does not require external scripts (like this one)
# for support.

# The installation scripts in the distribution files now link all
# executable programs from the Xic and WRspice distributions into
# /usr/local/xictools/bin.  Only this directory is needed in your
# shell search path.  The directories /usr/local/xictools/xic/bin and
# /usr/local/xictools/wrspice/bin, which were previously needed in the
# path should be removed if present.

# Here's the safe install logic, for example for xic.  The present
# release is installed under xic.current, and the previous release
# saved under xic-version (where version is the release number, e.g.
# 4.2.15), both under /usr/local/xictools (by default).  The
# xic.current directory is symbolically linked as "xic" in the same
# directory.

# When updating, the distribution pre-install script will remove the
# link to xic, then move xic.current to xic-version.  The basic update
# is then done, which will install a new xic.current.  Finally the
# symbolic link from xic.current as xic is created.  Further, links
# are created to each of the executable programs under the xic link in
# the /usr/local/xictools/bin directory, so that all programs can be
# found in this directory, which should be in the user's shell search
# path.

# If there is a problem with the new release, the maintainer can
# delete the link from xic.current to xic, and recreate the link, but
# point it to xic-version.  Then you're back to running the previous
# release, completely as it was.

# Note that the previous installed releases will all be saved as
# xic-version, and can be reverted to if needed.  The user can delete
# these old releases when they are no longer of potential value.  The
# release in xic.current is registered with the system package
# database and should only be uninstalled using your package manager
# program, or the wr_uninstall script available from Whiteley
# Research.  In Windows, one can use the Windows Add/Remove software
# window to remove packages, or use the wr_uninstall.bat script from a
# command window, or use the wr_uninstall script from a Cygwin window.

#=======================================================================

PATH=$PATH:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin

usage()
{
    echo
    echo Usage:  wr_install [-t] distrib_file ...
    echo
    echo The arguments are XicTools-4.3 package files,
    echo
    echo DO NOT CHANGE THE NAMES OF THESE FILES!
    echo
    echo If -t is given, files that follow won\'t be installed, but
    echo the commands that would be executed are printed.
    echo
    echo "This is the SAFE INSTALL version for XicTools-4.3 (open"
    echo "source), see comments in the script for info."
    echo
}

# Return the (filled in as needed) full path for $1.
#
fullpath()
{
    echo $(cd $(dirname "$1") && pwd -P)/$(basename "$1")
}

# Do the installation, removing old installation(s) first when possible.
# arguments: distfile prefix
#
do_update()
{
    distfile=$1
    prefix=$2
    nodo=$3

    if [ -z "$distfile" ]; then
        echo "Error: (do_update) no file name given!"
        return 127
    fi
    if [ ! -f $distfile ]; then
        echo File: $distfile
        echo "Error: (do_update) file not found."
        return 127
    fi
    if [ -z "$prefix" ]; then
        echo "Error: (do_update) no prefix given!"
        return 127
    fi
    if [ -z "$nodo" ]; then
        nodo=no
    fi

    dfb=`basename $distfile`
    tmpifs="$IFS"
    IFS="-"
    set -- $dfb
    progname=$1
    osname=$2
    vers=$3
    IFS="."
    set -- $vers
    release_lev=$1
    release_maj=$2
    fullprogname=$progname
    IFS="_"
    set -- $progname
    xt=$1
    progname=$2
    IFS=$tmpifs

    if [ -z "$osname" ]; then
        echo "Error: (do_update) OSNAME not found in distfile name!"
        return 127
    fi
    if [ -z "$vers" ]; then
        echo "Error: (do_update) VERSION not found in distfile name!"
        return 127
    fi

    # All 4.3 distribution files have a program name field in the form
    # xictools_progname.  This was split at the underscore, xt is the
    # first token, progname the second.

    if [ x$xt != xxictools ]; then
        echo File: $distfile
        echo \
  "Warning: file is not an XicToole-4.3 distribution, install anyway? [n] "
        read resp
        if [ x"$resp" != xy -a x"$resp" != xyes ]; then
            return 0
        fi
        progname=$fullprogname
    fi

    case $osname in
    Darwin*)
        if [ $prefix != /usr/local ]; then \
            echo "Xictools packages for OS X are not relocatable."
            return 127
        fi
        ppkg=`fullpath $distfile`
        echo sudo installer -pkg "$ppkg" -target /
        if [ x$nodo != xyes ]; then
            sudo installer -pkg "$ppkg" -target /
        fi
        ;;

    Win32)
	if [ ! -x $distfile ]; then
            echo File: $distfile
            echo Error: file not executable.
            return 127
        fi
        echo ./$distfile
        if [ x$nodo != xyes ]; then
            ./$distfile
        fi
        ;;

    Linux*)
        # Check for alien/dpkg, as for Ubuntu/Debian.  If found, see
        # if the user wants to use alien for install.  Debian packages
        # are no longer being distributed in Gen 4.

        has_alien=no
        command -v alien >/dev/null 2>&1
        if [ $? = 0 ]; then
            has_alien=yes
        fi
        has_dpkg=no
        command -v dpkg >/dev/null 2>&1
        if [ $? = 0 ]; then
            has_dpkg=yes
        fi
        use_alien=no;
        if [ $has_alien = yes -a $has_dpkg = yes ]; then
            while [ 1 = 1 ]; do
                echo -n "Install using \"alien -ick $distfile\" [y/n]? "
                read resp
                if [ x$resp = xy -o x$resp = xyes ]; then
                    use_alien=yes;
                    break;
                elif [ x$resp = xn -o x$resp = xno ]; then
                    break;
                else
                    echo Next time answer y or n.
                fi
            done;
        fi

        if [ $use_alien = yes ]; then
            if [ $prefix != /usr/local ]; then
                echo Debian packages are not relocatable, can install under
                echo /usr/local only.
                return 127
            fi
            echo alien -ick $distfile
            if [ x$nodo != xyes ]; then
                sudo alien -ick $distfile
            fi
        elif [ $prefix = /usr/local ]; then
            echo rpm -U --replacepkgs --replacefiles --nodeps $distfile
            if [ x$nodo != xyes ]; then
                sudo rpm -U --replacepkgs --replacefiles --nodeps $distfile
            fi
        else
            echo rpm -U --replacepkgs --replacefiles --nodeps --relocate /usr/local=$prefix $distfile
            if [ x$nodo != xyes ]; then
                sudo rpm -U --replacepkgs --replacefiles --nodeps --relocate /usr/local=$prefix $distfile
            fi
        fi
        ;;
    *)
        echo "do_update: unknown token $osname"
        return 1
        ;;
    esac

    ret=0
    if [ x$nodo != xyes ]; then
        ret=$?
        if [ $ret = 0 ]; then
            echo Installation of $progname-$osname-$vers done, no errors returned.
        else
            echo Installation of $progname-$osname-$vers FAILED.
        fi
    fi
    return $ret
}


if [ x$1 = x-upd ]; then
    # Called from Xic or WRspice when updating.
    # wr_install -upd distfile prefix

    distfile=$2
    prefix=$3

    if [ x$prefix = x ]; then
        echo "Too few arguments given."
        echo
        echo "Press Enter to continue."
        read aa
        exit 127
    fi

    do_update $distfile $prefix no
    ret=$?

    echo
    echo "Press Enter to continue."
    read aa
    exit $ret
fi

if [ $# = 0 ]; then
    usage
    exit 1
fi

windows=no
args=$*
for fname in $args; do
    if [ -n $(echo $fname | grep 'exe$') ]; then
        windows=yes
        break
    fi
done

nodo=no
if [ $windows != yes ]; then
    ret=0
    for fname in $args; do
        if [ $fname = "-t" ]; then
            nodo=yes
            continue
        fi
        do_update $fname /usr/local $nodo
        r=$?
        if [ r != 0 ]; then
            ret=1
        fi
    done
    exit $ret
fi

if [ `uname` = "Darwin" ]; then
    # Apple packages aren't relocatable
    prefix=/usr/local
else
    prefix=$XT_PREFIX
    if [ x"$prefix" = x ]; then
        prefix=/usr/local
    fi
    while [ 1 = 1 ]; do
        printf "Distributions will be installed under\n  $prefix\nIs this \
OK [y/n]? "
        read resp
        if [ x"$resp" = xn -o x"$resp" = xno ]; then 
            printf "Enter prefix to use instead of\n  $prefix\n> "
            read prefix
            continue
        elif [ x"$resp" = xy -o x"$resp" = xyes ]; then
            break
        else
            echo Next time answer y or n.
        fi
    done
fi

if [ `whoami` != root -a $1 != "-t" ]; then
    echo "You're not root, validating using sudo."
    sudo -v
    if [ $? != 0 ]; then
        echo Validation failed.
        exit 1
    fi
fi

ret=0
for fname in $args; do
    if [ $fname = "-t" ]; then
        nodo=yes
        continue
    fi
    do_update $fname $prefix $nodo
    r=$?
    if [ r != 0 ]; then
        ret=1
    fi
done
exit $ret

