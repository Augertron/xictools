$Id: README.adms,v 1.5 2016/05/11 17:45:49 stevew Exp $

ADMS and Verilog-a notes
------------------------

The ADMS package translates the Verilog-a model description into a set
of c++ files, which are then compiled into a loadable module.

There may be some documentation of ADMS on the internet.  Last I looked,
there was very little.

One should also google-up a copy of the Verilog-a manual, as this
describes the official syntax.

This file is going to be a catch-all for information about the WRspice
ADMS implementation, with regard to syntax and features.

-------------------------------------------------------------------------------
1. The "insideADMS" define.

The symbol insideADMS is defined (as if with `define insideADMS), and
can be used to test for ADMS in the Verilog-a code.

-------------------------------------------------------------------------------
2. The ADMS "attributes".

This is a syntax extension to Verilog-a supported by ADMS.  It allows
additional information in parameter and variable declarations to be
passed to the simulator.

Examples:
parameter real c10 = 2e-30 from [0:1] (* info="GICCR constant" unit="A^2s" *);
real outTheta   (* info="Theta" *);

The attributes are delimited by (* ... *) just ahead of the
line-terminating semicolon.  The content consists of keyword=value
terms, separated by white space.  The value is taken as a literal
string, and should be double-quoted if it contains white space.  The
keyword can be any token, but only certain keywords are recognized by
WRspice.

info="string describing the parameter or variable"

The string will be used in the WRspice show command and perhaps
elsewhere.

units="units_token"

This gives the units of the parameter or variable.
(Not sure that this is actually used)

(more?)

Models may use the following code to hide this construct from non-ADMS
parsers.

`ifdef insideADMS
  `define ATTR(txt) (*txt*)
`else
  `define ATTR(txt)
`endif
...
parameter real c10 = 2e-30 from [0:1] `ATTR(info="GICCR constant" unit="A^2s");
---
real outTheta   `ATTR( info="Theta" );

-------------------------------------------------------------------------------
3. A variable with attributes given is a "read-only" parameter.

The presence of any attribute on a normal variable magically
transforms that variable into a parameter which is read-only.  This
means that it can be used to pass data out of the model during
simulation.

Such variables are initialized to the starting value at the beginning
of the simulation only.  Regular variables are initialized on every pass
through the equation set, which occurrs on every Newton iteration.
The read-only parameters can therefor retain history from the last
iteration.

In WRspice, data from these (and all) parameters can be obtained from
the @device[parmname] special vector construct.

-------------------------------------------------------------------------------
4. Initialization blocks and global events

ADMS will handle the two standard global events, but only in the
forms containing no arguments.

@(initial_step) begin ... end

  The block is executed while computing the initial analysis point, in
  accord with the Verilog-ams standard.  The block will be called for
  the operating popint analysis (if any), all iterations.  Thus, it
  will be called multiple times, which makes it unattractive for use
  as an initializer.

@(final_step) begin ... end

  The block is executed while computing the final analysis point, in
  accord with the Verilog-ams standard.  The block will be called for all
  iterations.  It will be called after initial_step if both are called.

Here's the Verilog-ams truth table for the various forms, the forms
containing arguments are not available in ADMS.  The $analysis function
can be used in the block to provide analysis-specific code.

                      DCOP  Sweep     TRAN        AC          NOISE
                      OP    d1 d2 dN  OP  p2  pN  OP  p2  pN  OP  p2  pN
initial_step()        1     1  0  0   1   0   0   1   0   0   1   0   0
initial_step("ac")    0     0  0  0   0   0   0   1   0   0   0   0   0
initial_step("noise") 0     0  0  0   0   0   0   0   0   0   1   0   0
initial_step("tran")  0     0  0  0   1   0   0   0   0   0   0   0   0
initial_step("dc")    1     1  0  0   0   0   0   0   0   0   0   0   0
initial_step(unknown) 0     0  0  0   0   0   0   0   0   0   0   0   0
final_step()          1     0  0  1   0   0   1   0   0   1   0   0   1
final_step("ac")      0     0  0  0   0   0   0   0   0   1   0   0   0
final_step("noise")   0     0  0  0   0   0   0   0   0   0   0   0   1
final_step("tran")    0     0  0  0   0   0   1   0   0   0   0   0   0
final_step("dc")      1     0  0  1   0   0   0   0   0   0   0   0   0
final_step(unknown)   0     0  0  0   0   0   0   0   0   0   0   0   0

These SHOULD NOT be used in compact model code.  Instead, use the following:

@(initial_model) begin ... end

  This block is run once-only before any analysis.  It can be used to
  initialize per-model parameters, such as temperature dependence.

@(initial_instance) begin ... end

  This block is run once-only before any analysis.  It can be used to
  initialize per-instance parameters, such as geometrical dependence.

However, these are not in the Verilog-ams standard and may be
particular to ADMS.

In ADMS, the "global events" are equivalent to named blocks, for
example:

begin : initial_model                      @(initial_model) begin
...                                        ...
end                                        end

Either form can be used for initial_step, final_step, initial_model,
and initial_instance.

-------------------------------------------------------------------------------
System tasks

1. Input/Output
                
$display(format, variable list)
$strobe(format, variable list)
$monitor(format, variable list)
$write(format, variable list)

  These commands have the same syntax, and display text on the screen
  during simulation.  $display and $strobe display once every time
  they are executed, whereas $monitor displays every time one of its
  parameters changes.  The difference between $display and $strobe is
  that $strobe displays the parameters at the very end of the current
  simulation time unit rather than exactly when it is executed.  The
  format string is like that in C/C++, and may contain format
  characters.  Format characters include %d (decimal), %h
  (hexadecimal), %b (binary), %c (character), %s (string) and %t
  (time), %m (hierarchy level).  %5d, %5b etc.  would give exactly 5
  spaces for the number instead of the space needed.

  $display and $write are the same except $display appends a newline
  if the string does not have a trailing newline character, $write
  does not do this.

$error(format, ...)
$warning(format, ...)

  Print a message starting with "Fatal:" or "Warning:".

$fopen("filenam1")
$fclose(handle)
$fdisplay(handle, format, variable list)
$fstrobe(handle, format, variable list)
$fmonitor(handle, format, variable list)
$fwrite(handle, format, variable list)

  These commands write more selectively to files.
                
  $fopen opens an output file and gives the open file an integer
  handle for use by the other commands.

  $fclose closes the file and lets other programs access it.

  In WRspice, there are two special handles that are automatically
  open and can't be closed.

  0             Print to the pop-up error window.
  1 or < 0      Print to the standard output (terminal window).

  $fdisplay and $fwrite write formatted data to a file whenever they
  are executed.  They are the same except $fdisplay appends a newline
  if the string does not have a trailing newline character, $fwrite
  does not do this.

  $fstrobe also writes to a file when executed, but it waits until all
  other operations in the time step are complete before writing.  Thus
  initial #1 a=1; b=0; $fstrobe(hand1, a,b); b=1; will write write 1 1
  for a and b.

  $monitor writes to a file whenever any of its arguments changes.


2. Simulation Control

$bound_step(max_delta)

  Limit the next time point to be max_delta or less from the present
  time point in transient analysis.

$finish[(n)[, type_string]]

  Halt the analysis.  If n is given, it can be one of these values,
  which determine what if anything is printed.

  0  Prints nothing (the default if no argument)
  1  Prints simulation time and location
  2  Prints simulation time, location, and statistics about the memory
     and CPU time used in simulation

  From the spec, this is not currently supported.
  Verilog AMS HDL allows an additional option string argument to be
  specified to $finish to indicate the type of the finish. 
  type_string can take one of three values:  “accepted”, “immediate”
  or “current_analysis”.  “accepted” is the default setting.

  If the type_string is set to “accepted” and $finish is called during
  an accepted iteration, then the simulator will exit after the
  current solution is complete.

  If the type_string is set to “current_analysis” and $finish is
  called during an accepted iteration, then the simulator terminate
  the current analysis and start the next analysis if one requested. 
  If not, the simulate will exit.

  If the type_string is set to “immediate” and $finish is called
  during an iteration, then the simulation will exit immediately
  without the current solution being completed.  This is not
  recommended as it may leave the output files generated by the
  simulator in an undefined state.

$stop[(n)]

  A call to $stop during an accepted iteration causes simulation to be
  suspended at a converged timepoint. This task takes an optional expression
  argument (0, 1, or 2), which determines what type of diagnostic message
  is printed. The amount of diagnostic messages output increases with
  the value of n, as shown for $finish.


3.  Random Numbers

$random[(seed)]

  $random generates a random integer every time it is called.  If the
  sequence is to be repeatable, the first time one invokes random
  giving it a numerical argument (a seed).  Otherwise the seed is
  derived from the computer clock.

rdist_uniform(seed, start, end[, dt])
rdist_normal(seed, mean, stddev[, dt])
rdist_exponential(seed, mean[, dt])
rdist_poisson(seed, mean[, dt])
rdist_chi_square(seed, dof[, dt])
rdist_t(seed, dof[, dt])
rdist_erlang(seed, k, mean[, dt])

  In WRspice, the following functions are implemented in such a way
  that they are compatible with Newton iterations and convergence
  testing.  Logically, a separate random value is obtained at each
  point of a grid in time that covers the simulation interval.  The
  actual random number used is interpolated from this grid at the
  present simulation time.  Thus, the "random" function becomes
  deterministic, and simulations that include output from the random
  generator will converge and iterate normally.  This can be used to
  model Johnson noise in the time domain, for example.

  Each has an additional optional "dt" argument which if given is
  taken as the time period of the random number grid.  If not given,
  the TStep from the running transient analysis is assumed.  This
  value has significance only in transient analysis.  During other
  types of analysis, calls to these functions will return a single
  random value, generated on the first call.

  Note that during transient analysis, the seed value should not
  change, or non-convergence can result.

  Notes from the specification:

  The following rules apply to these functions.
  -  All arguments to the system functions are real values, except for
     seed (which is defined by $random).  For the $rdist_exponential,
     $rdist_poisson, $rdist_chi_square, $rdist_t, and $rdist_erlang
     functions, the arguments mean, dof, and k shall be greater than
     zero (0).

  -  Each of these functions returns a pseudo-random number whose
     characteristics are described by the function name, e.g.,
     $rdist_uniform returns random numbers uniformly distributed in
     the interval specified by its arguments.

  WRspice doesn't handle this.
  -  For each system function, the seed argument shall be an integer. 
     If it is an integer variable, then it is an inout argument; that
     is, a value is passed to the function and a different value is
     returned.  The variable is initialized by the user and only
     updated by the system function.  This ensures the desired
     distribution is achieved upon successive calls to the system
     function.  If the seed argument is a parameter or constant, then
     the system function does not update the value.  This makes the
     system function useable for parameter initialization.

  -  The system functions shall always return the same value given the
     same seed.  This facilitates debugging by making the operation of
     the system repeatable.  In order to get different random values
     when the seed argument is a parameter, the user can override the
     parameter.
  I presume this means value sequence.

  The two paragraphs above are difficult to follow.  In WRspice, if
  the same seed value is used for all calls, the sequence of values is
  repeatable.  A call with a different seed will reset the internal
  random number generator and a different sequence would be returned. 
  The system functions never reset the seed.  There is only one seed in
  WRspice, so if any function call changes the seed, all subsequent
  random number calls are affected.

  - All functions return a real value.

  -  In $rdist_uniform, the start and end arguments are real inputs
     which bound the values returned. The start value shall be smaller
     than the end value.

  -  The mean argument used by $rdist_normal, $rdist_exponential,
     $rdist_poisson, and $rdist_erlang is an real input which causes
     the average value returned by the function to approach the value
     specified. 

  -  The standard_deviation argument used by $rdist_normal is a real
     input, which helps determine the shape of the density function. 
     Using larger numbers for standard_deviation spreads the returned
     values over a wider range.  Using a mean of zero (0) and a
     standard_deviation of one (1), $rdist_normal generates Gaussian
     distribution.

  -  The dof (degree_of_freedom) argument used by $rdist_chi_square and
     $rdist_t is a real input, which helps determine the shape of the
     density function.  Using larger numbers for dof spreads the
     returned values over a wider range. 


3.  Other System Functions Recognized in ADMS/WRspice

absdelay(arg1, arg2), delay(arg1, arg2)

  Recognized but not implemented.

$abstime, $realtime

  Return the simulation time, the names are equivalent.

TODO add $delta

analysis(string)

  Return nonzero if the analysis type represented by the keyword given
  in the argument is being performed.

  "ac"
    True when running ac analysis.

  "dc"
    True when running dc sweep or operating point analysis.

  "noise"
    True when running noise analysis.

  "tran"
    True when running transient analysis.

  "ic"
    True in the initial-condition analysis that preceeds a transient
    analysis.

  "static"
    Any equilibrium point calculation, including a DC analysis as well
    as those that precede another analysis, such as the DC analysis
    that precedes an AC or noise analysis, or the IC analysis that
    precedes a transient analysis.

  "nodeset"
    The phase during an equilibrium point calculation where nodesets
    are forced.

ceil(x)

  Return the integer value greater than or equal to the argument.

ddt(expression[, ignored])

  Return time derivative, any second argument is ignored.

ddx(variable, probe)

  Return the partial derivative of the variable with respect to the
  probe.

flicker_noise(a, b[, c])

floor(x)

  Return the integer value less than or equal to the argument.

$given(model_or_instance_parameter)

  Return nonzero if the parameter was given, same as $param_given.

idt(expression, icval, reset[, ignored)

  Return time integral of expression using the initial value
  icval.  If reset is nonzero, instead zero the internal
  integration history.

$mfactor

  The device M scale factor if the model was built for this support,
  otherwise 1.0.

$model

  Expands to the name of the current device model.

$nominal_temperature

  Return the nominal temperature in Kelvin.

$instance

  Expands to the name of the currenly -scoped instance, or "???".

$param_given(model_or_instance_parameter)

  Return nonzero if the parameter was given, same as $given.

$port_connected(port_name)

  Return nonzero if the named port is connected externally.

$realtime, $abstime

  Return the simulation time, the names are equivalent.

$scale

  Return 1.0, no scaling in WRspice.

$simparam(string[, expression])

  This queries the simulator for a simulation parameter named string. 
  If string is known, its value is returned.  If string is not known,
  and the optional expression is not supplied, then an error is
  generated.  If the optional expression is supplied, its value is
  returned if string is not known and no error is generated. 

  $simparam() shall always return a real value; simulation parameters
  that have integer values shall be coerced to real.  There is no
  fixed list of simulation parameters.  However, simulators shall
  accept the strings below to access commonly-known simulation
  parameters, if they support the parameter.  Simulators can also
  accept other strings to access the same parameters.

    dev     1/Ohms              gmin
      Additional conductance to be added to nonlinear branches for
      conductance homotopy convergence algorithm.

    gmin    1/Ohms              gmin
      Minimum conductance placed in parallel with nonlinear branches.

    imax    Amps                1.0
      Branch current threshold above which the constitutive relation
      of a nonlinear branch should be linearized.

    imelt   Amps                1.0
      Branch current threshold indicating device failure.

    iteration                   iteration count
      Iteration number of the analog solver.

    scale                       1.0
      Scale factor for device instance geometry parameters.

    shrink                      1.0
      Optical linear shrink factor.

    simulatorSubversion         e.g., 12 for WRspice-4.1.12
      The simulator sub-version.

    simulatorVersion            e.g., 4.1 for WRspice-4.1.12
      The simulator version.

    sourceScaleFactor           value from WRspice source stepping
      Multiplicative factor for independent sources for source
      stepping homotopy convergence algorithm.

    tnom    degrees Celsius     $nominal_temperature
      Default value of temperature at which model parameters were
      extracted.

    ---- Spec. end
    checkjcap                   1.0
    maxmosl                     1.0
    maxmosw                     1.0
    minmosl                     1.0e-12
    minmosw                     1.0e-12
      ?

    WRspice only
    tstep
      The transient analysis output time increment.

    tstart
      The start time for transient analysis output.

    tstop
      The final time point in transient analysis.

    delta
      The current internal time step in transient analysis.

    delmin
      The minimum allowable transient analysis time step.

    delmax
      The maximum allowable transient analysis time step.

    abstol
      The absolute tolerance parameter.

    reltol
      The relative tolerance parameter.

    chgtol
      The charge tolerance parameter.

    volttol
      The voltage tolerance parameter.

    predictor
      Nonzero when in the first iteration of a time point.

    TODO: add set variables including .options

$temperature

  Return circuit ambient temperature in Kelvin.

$vt[(temperature_expression)]

  Return the thermal voltage KT/q using the argument for temerature,
  or the ambient temperature if no argument is given.

white_noise(a[, b])

5. Special Hackery: cfunc

  The cfunc pseudo-function allows arbitrary C/C++ function calls to
  be made from the model code.  The syntax in the Verilog code is

  cfunc("funcname", arg1, ..., argN)

  The return value can be used in an assignment.  In the C++ files,
  the construct maps to funcname(arg1, ..., argN).

  This can be used to, for example, make available special math
  functions callable from Verilog.  Be advised that this can be unsafe
  to use in model code, as the derivative is not included in the
  Jacobian, which can lead to convergence problems.  However, if such
  functions are used only for initialization, use is safe.

  To use this facility, the HEADER variable in the Makefile should be
  redefined to yes, and the user should create an include file that
  contains (perhaps through another include) prototypes of the
  functions called using cfunc.  This file must be named
  (MODULE)extra.h, where (MODULE) is the short name also provided from
  the Makefile.

  The header file must also be modified to link the library containing
  the function implementations to the loadable module.  The user is
  expected to know how to do this.

6. Not Presently Supported

$discontinuity(n)
$limit(...)

