#######################################################################
# bsim6/Makefile.in
#######################################################################
# $Id: Makefile.in,v 1.17 2016/09/28 23:12:55 stevew Exp $
#######################################################################

# This must match the SyntaxLevel defined in device.xml.  If it is
# smaller, you need to update this Makefile to match devkit/Makefile.
SyntaxLevel = 13

#######################################################################
#  MANDATORY User Configuration

# Set this to the path to the Verilog input file.
#
SOURCE = bsim6.va

# Set this to the directory containing the xml conversion source files,
# if different from the default setting given.
#
ADMST = ../../admst

# Set this to a unique name for the SPICE model for this device.  This
# name can appear in the .model line:  .model myname modelname ... 
# If such a .model line is found, then devices that reference myname
# will see this model, and the level number (below) will be ignored.
#
# Note that this device will also be available using the standard
# SPICE model names and the level given below.  For example, for a
# MOSFET the standard model names are nmos and pmos.
#
MODELNAME = bsim6

# Set this to a short name word which will be used as the base name of
# the loadable module file.  It is obviously desirable that the name
# be unique among the user's modules.
#
MODULE = bsim6

# Set this to a single, lower-case alphabetic character which is the
# SPICE key for this device type, e.g., m for MOS, q for BJT.  See the
# device.xml file for a listing.  Use the "real" device key and not
# 'x'.
#
KEY = m

# Set this to the model level number (a positive number) which will
# associate to this device, when the model name is the standard name
# for the device (e.g., npn or pnp for BJT, nmos or pmos for MOSFET). 
# This should be uniqe among the internal and other loaded devices of
# the same type key letter.  Giving this number in a "level" model
# parameter in WRspice input will signal use of this device.
#
LEVEL = 80

# If this is set to "yes", then if the device does not have an
# instance parameter named "m", a real-valued parameter of this name
# will be added.  The default value is 1.0, and the parameter will
# multiply the contributions from the device model, effectively
# scaling the device count.  For example, giving 'm=2' as a device
# instance parameter is equivalent to specifying two identical,
# parallel devices.
#
ADD_M = yes

# When set to yes, a limiting algorithm is used on every device pin
# during transient analysis.  This is probably required for
# convergence of semiconductor device models that contain p/n or
# Schottky junctions.  One can turn this off for non-semiconductor
# devices.
#
LIMITING = yes

# You probably don't need any flags, but these can be set when needed. 
# The string consists of words from the list below, separated by '|'
# symbols.  It should be quoted if there are any '|' characters included.
#
# The possible flags are:
# These are all optional, but prevent unsupported analysis cleanly.
# DV_NOAC       Device does not support AC analysis.
# DV_NODCO      Device does not support DCOP analysis.
# DV_NODCT      Device does not support DCT analysis.
# DV_NOTRAN     Device does not support TRAN analysis.
#
# This is obscure.
# DV_JJSTEP     Device has timestep limiting based on the device
#               voltage and Josephson equation, as in the bound_step
#               call in the Josephson junction example.
#
# Example (from JJ example)
# FLAGS = "DV_NOAC | DV_NODCT | DV_JJSTEP"
#
FLAGS = 

#  Windows Only!
#
# The plug-in must link against the wrspice.dll file, which is found
# in the bin directory of the distribution area.  Modify this if
# necessary, it is the full path to the directory containing
# wrspice.dll.
#
DLL_LOC = ../../../../wrspice/bin

# These should automatically configure the rest of the Makefile to
# your environment.  You may need to tweak these if wrspice is not in
# your search path (see below for example values).
#
DEVLIB_VERSION = $(shell wrspice --v | sed -e "s/ .*//")
OSNAME = $(shell wrspice --v | sed -e "s/^.* //")

#  End of (intended) User Configuration.
#  You may still have to mess around below if your build environment
#  isn't like mine, likely for non-Linux.
#######################################################################


# This Makefile originated from this distribution:
#DEVLIB_VERSION = @DEVLIB_VERSION@
#OSNAME = @OSNAME@
#CXX = @CXX@
#CC = @CC@
#LINKCC = @LINKCC@
#CFLAGS = @CFLAGS_S@ @UFLAGS@
#LSHFLAG = @LSHFLAG@
#DEPEND_PROG = @DEPEND_PROG@ @CFLAGS_S@
#FILTER = @FILTER@
#PIC_OPT = @PIC_OPT@
#SOEXT = @SOEXT@

DATE = @DATE@

# Advanced users can edit the blocks below if necessary.

ifeq ($(OSNAME),Win32)

# Windows, compiler and libraries from win-builds.org.
CXX = /usr/local/win-builds/bin/g++
CC = /usr/local/win-builds/bin/gcc
LINKCC = $(CXX) -static-libgcc -static-libstdc++
CFLAGS = -O3 -Wall -W -Wshadow -Wwrite-strings -pthread 
LSHFLAG = -shared -Wl,--enable-auto-import,--export-all-symbols
DEPEND_PROG = $(CC) -MM -O3 -Wall -W -Wshadow -Wwrite-strings -pthread
FILTER = |sed -e s/C:// -e s///
PIC_OPT = 
SOEXT = dll
DEVWINDLL = -L$(DLL_LOC) -lwrspice

else ifeq ($(OSNAME),Darwin64)

# Apple OS X Xcode 7 (supports 10.11 El Capitan, 10.10 Yosemite)
CXX = g++
CC = gcc
LINKCC = $(CXX)
CFLAGS = -O3 -Wall -W -Wshadow -Wwrite-strings -pthread -mmacosx-version-min=10.10 -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
LSHFLAG = -dynamiclib -undefined dynamic_lookup
DEPEND_PROG = $(CC) -MM -O3 -Wall -W -Wshadow -Wwrite-strings -pthread
FILTER = 
PIC_OPT = 
SOEXT = dylib

else ifeq ($(OSNAME),LinuxRHEL5)

# Red Hat 5 i686 and similar
CXX = g++ -m32 -march=i686
CC = gcc -m32 -march=i686
LINKCC = $(CXX)
CFLAGS = -O3 -Wall -W -Wshadow -Wwrite-strings -pthread
LSHFLAG = -shared
DEPEND_PROG = $(CC) -MM -O3 -Wall -W -Wshadow -Wwrite-strings -pthread
FILTER =
PIC_OPT = -fPIC
SOEXT = so

else

# Generic Linux, covers all 64-bit builds.
CXX = g++
CC = gcc
LINKCC = $(CXX)
CFLAGS = -O3 -Wall -W -Wshadow -Wwrite-strings -pthread 
LSHFLAG = -shared
DEPEND_PROG = $(CC) -MM -O3 -Wall -W -Wshadow -Wwrite-strings -pthread
FILTER = 
PIC_OPT = -fPIC
SOEXT = so

endif

TARGET = $(MODULE).$(SOEXT)
HFILES = $(MODULE)defs.h
CFILES =
CCFILES = \
  $(MODULE).cc \
  $(MODULE)acld.cc \
  $(MODULE)aski.cc \
  $(MODULE)askm.cc \
  $(MODULE)load.cc \
  $(MODULE)nois.cc \
  $(MODULE)pzld.cc \
  $(MODULE)set.cc \
  $(MODULE)seti.cc \
  $(MODULE)setm.cc \
  $(MODULE)temp.cc \
  $(MODULE)topo.cc \
  $(MODULE)trun.cc

COBJS = $(CCFILES:.cc=.o) $(CFILES:.c=.o)
INCLUDE = -I. -I$(ADMST:admst=include)
DEFS = -D__WRMODULE__=$(MODULE) -D__WRVERSION__=$(DEVLIB_VERSION)

dummy:
	@echo
	@echo "====> Building for $(OSNAME) $(DEVLIB_VERSION)"
	@echo
	$(MAKE) $(TARGET)

$(TARGET): device.xml $(HFILES) $(COBJS)
	$(LINKCC) -o $(TARGET) $(LSHFLAG) $(COBJS) $(DEVWINDLL)

$(MODULE).o: $(MODULE).cc
	$(CXX) $(CFLAGS) $(PIC_OPT) $(INCLUDE) $(DEFS) -c $*.cc

.cc.o:
	$(CXX) $(CFLAGS) $(PIC_OPT) $(INCLUDE) -c $*.cc

.c.o:
	$(CC) $(CFLAGS) $(PIC_OPT) $(INCLUDE) -c $*.c

device.xml: Makefile
	@vers=$(DEVLIB_VERSION); IFS=.; set -- $$vers; \
	sed -e s/@MODULE@/$(MODULE)/ -e s/@MODELNAME@/$(MODELNAME)/ \
  -e s/@LEVEL@/$(LEVEL)/ -e s/@KEY@/$(KEY)/ -e s/@VERSION@/$(DEVLIB_VERSION)/ \
  -e s/@MAJOR@/$$1.$$2/ -e s/@MINOR@/$$3/ -e s/@ADD_M@/$(ADD_M)/ \
  -e s/@LIMITING@/$(LIMITING)/ -e s/@FLAGS@/$(FLAGS)/ \
  $(ADMST)/device.xml > device.xml
	@s=`grep SyntaxLevel device.xml`; set $$s; \
	if [ x$$2 != x$(SyntaxLevel) ]; then \
	    echo ;\
	    echo "  ERROR: Syntax Level mismatch: Makefile $(SyntaxLevel) \
scripts $$2, update Makefile.";\
	    echo ;\
            exit 1; \
	fi

depend:
	@echo depending in $(MODULE)
	@if [ x$(DEPEND_DONE) = x ]; then \
	    echo DEPEND_DONE = 1 >> Makefile; \
	    if [ "z$(CCFILES)" != "z" ]; then \
	        for a in $(CCFILES); do \
	            $(DEPEND_PROG) $(INCLUDE) $$a $(FILTER)>> Makefile; \
	        done \
	    fi; \
	    if [ "z$(CFILES)" != "z" ]; then \
	        for a in $(CFILES); do \
	            $(DEPEND_PROG) $(INCLUDE) $$a $(FILTER)>> Makefile; \
	        done \
	    fi; \
	fi

clean:
	-rm -f $(COBJS) *.$(SOEXT)

realclean:
	@$(MAKE) clean
	-@rm -f device.xml $(HFILES) $(CCFILES) constant* discipline* \
  .adms.implicit.xml .interface.xml .*.adms

$(MODULE).cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULE.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULE.cc.xml

$(MODULE)acld.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEacld.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEacld.cc.xml

$(MODULE)aski.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEaski.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEaski.cc.xml

$(MODULE)askm.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEaskm.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEaskm.cc.xml

$(MODULE)load.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEload.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEload.cc.xml

$(MODULE)nois.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEnois.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEnois.cc.xml

$(MODULE)pzld.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEpzld.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEpzld.cc.xml

$(MODULE)set.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEset.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEset.cc.xml

$(MODULE)seti.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEseti.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEseti.cc.xml

$(MODULE)setm.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEsetm.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEsetm.cc.xml

$(MODULE)temp.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEtemp.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEtemp.cc.xml

$(MODULE)topo.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEtopo.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEtopo.cc.xml

$(MODULE)trun.cc: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEtrun.cc.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEtrun.cc.xml
	
$(MODULE)defs.h: $(SOURCE) device.xml $(ADMST)/wrspiceVersion.xml \
  $(ADMST)/wrspiceMODULEdefs.h.xml $(ADMST)/adms.implicit.xml
	admsXml $(SOURCE) -x -e $(ADMST)/adms.implicit.xml -e device.xml \
  -e $(ADMST)/wrspiceVersion.xml -e $(ADMST)/wrspiceMODULEdefs.h.xml

#######################################################################

