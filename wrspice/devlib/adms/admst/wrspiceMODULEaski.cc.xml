<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  $Id: wrspiceMODULEaski.cc.xml,v 1.16 2015/07/30 17:27:10 stevew Exp $

  Modified for use with WRspice, Whiteley Research Inc. (wrcad.com).
  See the original header below for terms and conditions of use.
-->

<!--
  Written by Laurent Lemaitre - r29173@users.sourceforge.net
  Documentation:
    http://sourceforge.net/docman/display_doc.php?docid=18993&group_id=84289
  Target Interface: ngspice
  Supported by adms-1.x.x
  This file is used by adms - http://sourceforge.net/projects/mot-adms.
  adms is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  adms is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with adms; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<!DOCTYPE admst SYSTEM "admst.dtd">
<admst version="2.3.0" xmlns:admst="http://mot-adms.sourceforge.net/xml-files/admst">

<!-- ---------------------------------------------------------------------- -->
<admst:template match="module_aski_cc">

  <admst:text format="\n#include &quot;$(modlc)defs.h&quot;\n"/>

  <admst:text format="\n\nint\n"/>
  <admst:text format="$(moduc)dev::askInst(const sCKT*, const sGENinstance *geninst, int which, IFdata *data)\n"/>
  <admst:text format="{\n"/>
  <admst:text format="$(indent)const s$(moduc)instance *inst = (const s$(moduc)instance*)geninst;\n"/>

  <admst:variable name="qual" string="_INST_"/>
  <admst:if test="[$unified='yes']">
    <admst:variable name="qual" string="_"/>
  </admst:if>

  <admst:text format="\n$(indent)switch (which) {\n"/>
  <!--
    Parameters have input='yes' if they are given in parameter
    declarations.  We also accept any variable that has attributes
    given, taken as output variables.
  -->
  <admst:for-each select="variable[parametertype='instance' and
      (input='yes' or not(nilled(attribute)))]">
    <admst:value-of select="name"/>
    <admst:text format="$(indent)case $(moduc)$(qual)%s:\n"/>
    <admst:apply-templates select="." match="push_indent"/>
    <admst:choose>
      <admst:when test="[type='real']">
        <admst:value-of select="name"/>
        <admst:text format="$(indent)data->v.rValue = inst->%s;\n"/>
        <admst:text format="$(indent)data->type = IF_REAL;\n"/>
      </admst:when>
      <admst:when test="[type='integer']">
        <admst:value-of select="name"/>
        <admst:text format="$(indent)data->v.iValue = inst->%s;\n"/>
        <admst:text format="$(indent)data->type = IF_INTEGER;\n"/>
      </admst:when>
      <admst:when test="[type='string']">
        <admst:value-of select="name"/>
        <admst:text format="$(indent)data->v.sValue = inst->%s;\n"/>
        <admst:text format="$(indent)data->type = IF_STRING;\n"/>
      </admst:when>
      <admst:otherwise>
        <admst:fatal
          format="module_aski_cc: unsupported parameter type 'string'.\n"/>
      </admst:otherwise>
    </admst:choose>
    <admst:text format="$(indent)break;\n"/>
    <admst:apply-templates select="." match="pop_indent"/>
  </admst:for-each>
  <!-- add the nodes -->
  <admst:for-each select="node[grounded='no']">
    <admst:text format="$(indent)case $(moduc)$(qual)NODE_%(name):\n"/>
    <admst:apply-templates select="." match="push_indent"/>
    <admst:text format="$(indent)data->v.iValue = inst->%(name)_Node;\n"/>
    <admst:text format="$(indent)data->type = IF_INTEGER;\n"/>
    <admst:text format="$(indent)break;\n"/>
    <admst:apply-templates select="." match="pop_indent"/>
  </admst:for-each>
  <!-- add the branches -->
  <admst:for-each select="$branches">
    <admst:variable name="pname" path="branch/pnode/name"/>
    <admst:variable name="nname" path="branch/nnode/name"/>
    <admst:text
      format="$(indent)case $(moduc)$(qual)BRN_$(pname)_$(nname):\n"/>
    <admst:apply-templates select="." match="push_indent"/>
    <admst:text
      format="$(indent)data->v.iValue = inst->$(pname)_$(nname)_Branch;\n"/>
    <admst:text format="$(indent)data->type = IF_INTEGER;\n"/>
    <admst:text format="$(indent)break;\n"/>
    <admst:apply-templates select="." match="pop_indent"/>
  </admst:for-each>
  <admst:text format="$(indent)default:\n"/>
  <admst:apply-templates select="." match="push_indent"/>
  <admst:text format="$(indent)return (E_BADPARM);\n"/>
  <admst:apply-templates select="." match="pop_indent"/>
  <admst:text format="$(indent)}\n"/>
  <admst:text format="$(indent)return (OK);\n"/>

  <admst:text format="}\n\n"/>
</admst:template>

<!-- ---------------------------------------------------------------------- -->
<!-- ---------------------------------------------------------------------- -->

<admst:for-each select="/module">
  <admst:apply-templates select="." match="init:translation"/>
  <admst:open file="$(modlc)aski.cc">
    <admst:value-of select="/simulator/package_string"/>
    <admst:text format="// Interface: %s\n"/>
    <admst:value-of select="/simulator/currentdate"/>
    <admst:value-of select="/simulator/fullname"/>
    <admst:text format="// Created by: %s - %s\n"/>
    <admst:apply-templates select="." match="push_indent"/>
    <admst:apply-templates select="." match="module_aski_cc"/>
    <admst:apply-templates select="." match="pop_indent"/>
  </admst:open>
  <admst:message format="$(modlc)aski.cc: file created\n"/>
</admst:for-each>

</admst>

