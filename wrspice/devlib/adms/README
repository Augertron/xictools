$Id: README,v 1.9 2015/05/03 16:52:21 stevew Exp $

Welcome the the WRspice Device Kit
----------------------------------

This is supplemental to the WRspice circuit simulation program from
Whiteley Research Inc.  This distribution is the starting point for
users who wish to develop custom device models for WRspice.

Creating Loadable Device Modules For WRspice
--------------------------------------------

WRspice has the ability to load device modules while running.  These
devices can then be used in simulations in the normal way.  The
modules can be generated from C++ source code, compiled by the user. 
In particular, modules can be compiled from Verilog-A source into C++
source using the open-source ADMS package, making available device
models supplied only in Verilog-A form to WRspice.

This document describes how to create a loadable device module from a
Verilog-A description for use in WRspice.

Caveat
------

This is a very new capability, alpha-grade.  Not all Verilog-A
constructs are supported.  Consider this experimental.

Requirements
------------

1.  The user's computer must contain the gcc C/C++ compiler and the
regular set of program development tools.  This is the default on
Linux systems.  Apple users are advised to install Apple's program
development environment, which is a free (but huge) download from
Apple.

The module compilation is now available under Microsoft Windows.
See the Windows Setup section at the end of this file.

2.  The gcc version used to compile modules must be compatible with
the version used to compile WRspice.  Incompatibility may be
manifested in various ways
    - The module fails to load, with an error message.
    - The module loads, but with warnings.
    - The module loads, but causes program instability when used.

That being said, I haven't noticed any problems, even in the case of
using gcc-3 to compile the module and gcc-4 to compile the program.

The gcc versions used to prepare the various distributions of
WRspice are presently
    Darwin64 (OS X 10.9)                clang-5.0
    LinuxRHEL5, LinuxRHEL5_64,          gcc-4.1.2
    LinuxRHEL6_64,                      gcc-4.4.7
    Windows                             gcc-4.8.3

The stock compiler found on the operating system will probably work
fine, if it is from the gcc-4 series.

3.  The ADMS translator must be installed.  This is available from
sourceforge.net (http://sourceforge.net/projects/mot-adms).  BE SURE
TO GET VERSION 2.3.0 OR LATER.  You can build this from the source
code, or possibly find pre-built packages for your system.
====
IMPORTANT
I see that as of 2/18/2014 there is a different adms-2.3.0.tar.gz
distribution file on that site, with the following properties:
1) the configure script is not executable.
2) there are missing configuration scripts so configure doesn't run
after making it executable.
3) the files are mostly a year older than in the original distribution.
4) the distribution contains old object files and similar rubbish,

It is possible to make it work, but you need to be a near-expert. 
Sorry, this is probably the most flaky, poorly maintained and
documented software project I've encountered.  Unfortunately, there
isn't an alternative at present.

The original adms-2.3.0.tar.gz file has size 639604 bytes.
The "new" (broken) distribution file has size 4333061 bytes.

Get the original adms-2.3.0 distribution from the Whiteley Research
"free software" repository.
====

4.  The procedure to build the example modules is simple.  However, to
successfully build an arbitrary module will probably require expertise
in C++ coding/program building, Verilog-A syntax, and possibly the
ADMS language, if the module does not build or work properly initially.

How It Works
------------

The ADMS program reads the Verolog-A file, and builds a representation
of the file logic in memory.  A set of XML scripts access this tree
and generate the C++ code to describe the device functionality.  The
C++ files are then compiled into a loadable module (shared library)
which can be loaded into WRspice.

WRspice can load device modules in two ways.  On program startup, any
device modules found in the devices sub-directory in the startup
directory (typically
/usr/local/xictools/wrspice/startup/devices) will be loaded. 
While running, the WRspice devload command can be used to load a
module, with the command argument being the path to the module.  If no
argument is given, a list of the modules currently loaded is printed.

The ADMS Scripts
----------------

The scripts which control the interpretation of the Verilog source
during translation into C++ reside in the admst directory.  There is a
fairly steep learning curve in gaining proficiency with the language
and logic of these scripts, but they can in theory be modified by the
user.  In fact, the wrspiceVersion.xml file provides some
user-customization switches.

Some of the features provided by the WRspice script set, that are not
available in the script sets available for many/most/all other
simulators, are the following:

1.  Rigorous automatic partitioning of static and dynamic contribution
    terms, as well as noise terms.
2.  Support for potential nature contributions (V() <+ ...), and
    automatic node collapsing when possible.
3.  Support for optional ports and the $port_connected call.
4.  Support for the idt (time integration) operator, and most other
    system functions.
5.  Does not require adms-specific format extensions, but will use
    them if found.
6.  Full computation of second-derivative terms.
7.  Full support for noise analysis in WRspice.
8.  A new and more efficient math package.
9.  No "built in" fixes for common public Verilog models, scripts
    are intended to be completely generic.
10. Produces C++ code that is indented and humanly-readable.

How to Build a Module
---------------------

If all goes according to plan, this is easy.

1.  Create a fresh directory somewhere.

2.  Copy the Makefile from the devkit directory (typically
/usr/local/xictools/wrspice/devkit) into the new directory.

3.  This is optional, but you may want to copy the Verilog-A source file
(or files) into this directory as well, for convenience.

4.  Edit the top of the Makefile with a text editor.  The Makfile
contains comments explaining what needs setting.  Basically, you need
to set the device key letter and model level (as will be used in
WRspice), a short name for the module, and the path to the XML scripts
provided under the devkit.

5.  Type "make" at the shell prompt.  The processing may take a few
minutes.  Some compiler warnings may appear.

You may see a message:
  [error..] mismatch in assigment - lhs=contribution rhs=block
This can be ignored, it is a spurious message from ADMS.

There may be a lot of messages like:
  warning: declaration of T10 shadows a previous local
These appear when the module code defines a variable in a block, and
also in a lower-level block.  These should be harmless, but some
models (bsimsoi) generate a lot of these messages.

Messages like
  warning: unused variable vd
appear if a variable is declared in a block but never used.  Once
again, these are harmless, but represent declarations in the Verilog
source that could be omitted.

6.  If all goes well, a loadable module will be created.  This is a
file with a ".so" extension (".dylib" under OS X, or ".dll" in
Windows) with the base name the same as the module name that you
supplied in the Makefile.  You should be able to load this module into
WRspice, and access the device description in simulation files.

Building the Examples
---------------------

The examples subdirectory contains several publicly-available Verilog
models for testing and illustrating the procedure.  The README files
provide more information.  You should copy the directories and their
contents to your local directory to build the modules.  In each model
directory, follow the procedure above, and modify the Makefile as
recommended in the README file.

7.  Test the new loadable module.  First, verify the the loadable
module file exists, i.e., the compile succeeded.  Then, change to the
"tests" subdirectory, and start WRspice.  At the WRspice prompt, give
the command

  devload ../module.so

where "module.so" is the actual name of the module file.  WRspice will
print a "Loading device ..." message, and no error messages should
appear.

Next, bring up the File Selection panel with the File/Open button. 
There will be at least one file listed with a ".sp or ".cir"
extension, these are the SPICE input source files.  Click on one of
these to select, and click on the green octagon button.  The
simulation will run and a plot will appear.

Have fun!

What if it Doesn't Work?
------------------------

There are many things that can go wrong, and it is likely that
something will.  Most likely, the Verilog-A file contains a construct
that either ADMS or the scripts can't handle.  The author of ADMS
describes the translator as "alpha", but that being said, it seems
fairly complete and stable.  The problem most likely resides with the
XML scripts.  These were adapted to WRspice using scripts for other
simulators as a starting point.  They will evolve to provide more
complete and error-free translation.  As a quick look at the script
text will show, they can be hideously complex.  The language itself is
not well documented, though "experts" can figure it out from the
configuration files in the ADMS installation.

If you can provide the Verilog source to Whiteley Research for
evaluation, we would be happy to help diagnose/fix problems.

-------------------------------------------------------------------------------
Microsoft Windows Setup
-------------------------------------------------------------------------------

It is now possible to compile Verilog-a models and build loadable
modules in Windows.  This file explains how to obtain and set up the
tools needed, and compile and install the ADMS translator.

The basic procedure is:
1) Install Cygwin.
2) Install MinGW-w64.
3) Tweak your startup files.
4) Build/install adms-2.3.0-wr.
5) Test build the supplied module examples.

Warning:  this is fairly advanced stuff.  The description below is
from memory and a bit sloppy.

1) Install Cygwin.

Cygwin is a fairly complete Linux-like environment for Windows.  It is
available from cygwin.org.  First download the installer program.  Run
this to obtain the packages.

You can choose 32 or 64 bits.  Either should work, however only 32-bits
has veen tested.

In addition to the basic installation, you'll need the g++ compiler,
the binutils, make, and libtool, from the development category.
We need a full compilation chain to build adms.

If you find that a needed program is missing, it is easy to run the
Cygwin setup program and grab additional programs or libraries.  It
will also check for updates.

2) Install MinGW-w64

This is a compiler toolchain for Windows.  This is different from
Cygwin in that it does not require the "Cygwin dll" which is legally
encumbered.  Programs built with Cygwin can't (or only with
difficulty) be distributed commercially, but MinGW built programs are
freely distributable.

Our strategy is, when building the modules, is to use Cygwin for the
infrastructure (make, bash, etc) but use MinGW for compilation and
linking.

We recommend the win-builds project as an easy all-in-one install of
the entire "MinGW" toolchain and needed libraries.  Simply go to
win-builds.org, download the installer program and run it.  Make sure
that the "32-bits", and "native Windows" buttons are pressed, and
click the "Process" button.  This will install everything.  You get a
lot more than you need, so if disk space is tight you might want to go
through the list of packages first and skip installing some.

FOR PRESENT WRSPICE, 32-BITS IS REQUIRED.

3) Tweak your startup files.

When the Cygwin bash shell starts, it reads the .bash_profile file,
which is where user customization can be applied.

We want to be able to compile with either the MinGW or Cygwin
tool chain.  To use MinGW, the bin directory from the installation
is added to the front of the PATH variable.  For vanilla Cygwin,
MinGW is not included in the PATH.

It may be convenient to generate a new icon that will start Cygwin
with MinGW.  I'll leave how to do this as an exercise.  (Write a bat
file that sets a variable and starts bash, test for the variable when
creating the PATH, create a new desktop icon that calls the bat file.)

Remember:  Use MinGW to build the modules themselves.  Use Cygwin to
build accessories such as adms-2.3.0-wr.

You will probably want to add mount points such as these lines:
mount c:/win-builds/bin /win-builds/bin
mount c:/usr/local /usr/local

These map the first (Windows) location to an equivalent point in
the Cygwin directory system.

You probably want to add :/usr/local/xictools/bin
to the end of the PATH.

4) Build/install adms-2.3.0-wr.

From a Cygwin window, install the adms-2.3.0-wr files somewhere.  Use
sftp or whatever to import the distribution files, and tar to
unpack the distribution.  This produces a directory adms-2.3.0-wr
in the current directory.  To build and install the program:

> cd adms-2.3.0-wr
> ./configure
> make
> make install

If it doesn't work, you'll have to figure out why and fix it.

5) Test build the supplied module examples.

Copy the adms examples from the WRspice distribution as per the
instructions.  For testing, you can start with a simple module, such
as cap.  You should be able to cd into the cap directory, type "make",
and end up with a "cap.dll" file.  When cap works, they all should
work.  It takes a while to build all of the modules, as the bsim's in
particular are quite complex.

