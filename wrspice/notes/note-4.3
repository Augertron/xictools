--- Start of 4.3.X

Changes relative to final 4.2 release (4.2.16).

----- switch to git code control ------

The commit notes will in large measure replace this file, at least with
respect to documenting small changes.

The default path to xic was incorrect.

Fedora port: set SIGIO to SIG_IGN, so ipc works.

Bug fixed:  In Monte Carlo analysis, compose call for checkPNTS (e.g.)
would try and delete and replace the vector, which was prevented and
a message issued since the plot active flag is set.  Instead, the existing
vector is now kept but the data array updated, in new sDataVec::reset
method.

Made program separable from gnu-tainted mozy, with HAVE_MOZY.
fte
  initialize.cc (help, text help and init)
  inpcom.cc (httpget upd, net file access)
  keywords.cc (help, help-related variables)
  misccoms.cc (help upd, help and update commands and related)
gtkwrs
  gtkcmds.cc (help, help entries)
  gtkcolor.cc (help, help btn)
  gtkfte.cc (help, help btns)
  gtktoolb.cc (help, click for help)
misc
  texthelp.cc (help, implement text_help struct)
bin
  wrspice.cc (upd, update)

ToDo:  option to set default line width for trace lines in plots for
line-draw drivers (Naveen, Hypres).
DONE: Print Control Panel updated, new entry for linewidth visible
when PS line draw driver is chosen.

--- release 4.3.1

Got rid of internal pkg updates
update docs for:
XT_NO_CHECK_UPDATE
XT_UPD_DEBUG
nocheckupdate
installcmdfmt

Commands:
wrupdate -> pops up update page in help
passwd -> gone
proxy  -> gone

--- release 4.3.2

Modified adms scripts to support arrays.

updated the Verilog-A JJ model and tweaked the internal model for
consistency.

Update to gpulse tran function.  pw is now FWHM pulse width, old interp
(as variance) if given negative.  If pw is 0, SFQ pulse with pw computed from
amplitude.

Completely new DCOP calculation when JJs are present.  This is a
phase-based calculation which will find the actual initial JJ and
inductor currents.  Conventional DC analysis is now feasible with JJs.

The update command (to save tool window configuration) is now "tbupdate"
to avoid clash with program update function.

The dump command printed incorrect values for the imaginary part of
complex matrices.

New non-portable Verilog-a analysis function keyword: smsig, for JJ
support.

Phase-mode DC analysis for JJs, lots of work.
Major update to JJ models, internal and Verilog.

DCOP failure is now a fail point on margin/MonteCarlo analysis instead
of fatal error.

Bug in mutual inductor code fixed.

Bug fixed, "tran" funcs like pulse were being called during dc sweeps
with voltage instead of time.  Mayber this was a feature?  No longer
happens except for pwl.

multiple analysis runs are done in file order for each analysis type,
ised top be the reverse.  The analysis order is built-in.

--- release 4.3.3

Update to the Verilog-A jjmodel,  $simparam("smallSig") instead of
$analysis("smsig").  Added internal support for this.

Minor updates to JJ model, sync with Verilog-A model.

Lots of new documentation for JJ model, and for Verilog-A support.

--- release 4.3.4

Documentation was not in update, due to the old stupid of updating copied
files, not the source.  Updated makefiles to check for this.

--- release 4.3.5

The lossless tra model uses far more memory than necessary.
In progress:  update to fix this.
The Pade level DCOP stamp was wrong, can causes DCOP convergence failure.
TLine update complete, for now.  todo: bulk allocate list elements,
or use array with head/tail pointer.

Now no longer separate allocation of node numbers in matrix, since original
node numbering is compact.  Saves a little overhead, maybe, and translation
vectors only show changes due to internal reordering.  New undocumented
option "translate" will force translation as in previous releases.

Added options to dump command:
-c  compact form, just show which entries are nonzero
-r  show reordered matrix
-t  terse, don't show header.

TODO:  Make sure WRspice cleans all files/directories under /tmp.  It
apparently does not.

NEW:  rewrote tran function code, now uses separate polymorphic structs,
separate parse funcs, etc.  Much cleaner.

GPULSE now handles additional delay arguments creating separate pulse
trains, same as PULSE.

PULSE and GPULSE now accept HSPICE-style "bstring" arguments that control
per-period on/off.

pulse ... [ bstring_elt [...]]
bstring_elt: bstring [r[=N]} [rb=M]
bstring: string starting with 'b', chars that follow are interpreted as "on"
or "off", off = 0,f,n,F,N  anything else is "on",  r == repeat count, -1
repeat forever.  rb is 1-based starting bit for repeat.

inductor now takes a model, only one parameter: M
R/L/C now all have M parameter, instance and model.  M will multiply the
device effective conductance (parallel multiplier).
L instance larameter 'l' new synonym for ind,inductance
R now uses preload when possible for speed, nonlinear resistors now handled
in phase mode.

new syntax element:
.defmod Name [(] name=val... [)]
Define parameters for the default model.  Not all devices support default
models, devices that don't have a fixed terminal count do not.  If no model
is given for a device, a default model will be used.  The .defmod line
allow parameter specification for this model, which will be used for all
devices of that type which don't have a model given explicitly.
Example:
.defmod R(M=1.2)
This will reduce the resistance of all resistors in the deck that don't have
a model explicitly given, or an overriding M given.

ToDo:
Matt,

You can give commands like "plot v(1) v2) ; plot (v3) v(4)" to get two     
plot windows.  Importantly, this works from the Xic prompt line when the
plot button is active, and you can click to define the vectors.  Just add
": plot" as plain text.

I plan to add a "group" option to the WRspice plot command, so one could     
have something like "plot v(1) v(2) -g v(3) v(4) -g i(v1) i(v2)" to obtain
three sub-plots containing the listed vectors.  These would be displayed
into the same window somehow, or perhaps separate windows.  The latter case
would be equivalent to "plot v(1) v(2) ; plot v(3) v(4) ; plot i(v1) i(v2)",
which should not be too difficult to implement.

Regards,
Steve

