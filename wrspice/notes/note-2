
update (anything else) switches w/h without saving

Found and fixed a memory addess problem triggered by PWL statements.
This caused various strange things to happen, such as 1) an initial
run of a circuit would fail to converge, but subsequent runs are ok,
2) premature termination of Monte Carlo runs, and probably other
seemingly unrelated things.

Improved error reporting from equation parser (which also handles things
like pulse, pwl, etc).  Added checks for non-monotonicity and missing
data in PWL statements.

If a circuit contains an ".exec" block, a temporary plot structure is
now created to hold any vectors defined in the .exec block while the
circuit is parsed, after which the plot is deleted.  Thus, if the circuit
references vectors defined in the .exec block, the reference will be
satisfied, and the variables will have initial values as defined in the
.exec block.
-------------------------------------------------
Fixed bug: if a plot statement was in an exec block, WRspice would
crash.
------------
Added a feature: the gauss() random number generator used in voltage/current
sources can have variable arguments.  THIS DOES NOT APPLY TO THE gauss()
FUNCTION USED BY THE SHELL.

The full spec is

    gauss(std_dev, mean, lattice)

Example:
    V1 1 0 gauss(.5, 2, 100n)

If args are not given, these are the defaults:
    std_dev 1.0
    mean    0.0
    lattice 0.0

The new parameter "lattice" is for use in transient analysis.  A new random
value is computed at each time increment of lattice.  The value returned
by the function is the (first order) interpolation of the random values
at the lattice points which frame the time variable.  If lattice is 0,
a new random value is returned for each value of the time variable (as
previously).  The example above provides a randon signal with standard
deviation of .5V and mean of 2V, based on random samples taken every
100nS.

The lattice value should be on the order of the user print increment.
It should not be less than the maximum internal time step, since the past
history is not stored, and a rejected time point may back up the time
across more than one latice cell, thus destroying the correlation.

There is now an automatic gdb dump if wrspice crashes, similar to that
feature in Xic.

----------------
Using "trace" without args is now valid, it simply prints the time.
It used to crash the program if there were no args.

The command line hardcopy command now doesn't crash the program and
actually seems to work.  This is only useful in scripts, or if screen
graphics is not available.

--
The deriv() function now works for complex vectors with real or complex
scales (it used to crash the program if the scale was complex, which it
is in AC plots).

The "log" indicator in plots now goes away when the scale is changed to
linear.

++
plotting complex vectors on lin/log grid automatically creates separate
traces for real and imag parts.

The expression parsing for source specifications and vector expressions
has been unified into a single class.  The @device[param] construct now
works in source specifications.  Also, the "tran" functions can now be
used in regular vector expressions.  They represent a vector corresponding
to the current scale, which must be real and monotonically increasing.
For example:
    (do a tran analysis to establish a reasonable scale)
    let a = pulse(10n 10n 10n 20n)
    plot a    (plots a pulse waveform)
The construct can be used like any other token in an expression.

There is a new "tran" function:
   interp(vector)
The output is vector interpolated to the scale of the current plot.
When used in a source, the output of the source is the interpolated
vector, or the initial or final value for points out of the original
scale.

For example, say an amplifier produces vector v(1) (an output) in plot
tran1.  You want to apply this as input to another circuit.  Simply
use a source like
    vin 1 0 interp(tran1.v(1))
This of course works in regular vector expressions as well.

The delete command can now take a range such as 2-6.  There can't be
any included space.

.save lines are now processed by the output routine in interactive mode.
They contribute saves (specials only implies save all), but these are
not placed in the save debug list.

Safe now to copy vectors between plots with different scales.

If "set savecurrent", then all device current sepcials will be saved
during analysis.  There is a corresponding button in "pldefs".

There is a new system for maintaining the units of computed vectors.
The units are now carried through a computation, and should be correct
at the end.  Presently, the system can not handle fractional powers.

The @device[param] for device terminal currents and voltages now
returns the ac values during and after ac analysis.

By default, command line editing is on, which means that wrspice takes
control of the low level functions or the terminal window.  This can be
defeated by "set noedit" or the corresponding button in "shell".  If
your terminal window doesn't work with the editor, it is recommended
that "set noedit" appear in the .wrspiceinit file.

The units of a vector can be set with the settype command.  With no args,
the list of recognized types and abbreviations is printed.  The type
field con consist of a single name, or a single token containing a list
of abbreviations.  The token list can contain a digit power after
an abbreviation, and a single '/' for denominator units.  Examples:
"F/M2", "Wb2/Hz".
---------------------------------------
Fixed bug that caused seg fault when quitting if there is no graphics.

Fixed a typo which prevented recognition of the "icfact" parameter for
Josephson junction models.

The terminal setup routine is now not run when wrspice is run from Xic,
since the terminal is not used anyway, and it may cause trouble on some
systems.
---------------------------------------

Fixed a subtle problem that affected some systems.  It seems that the
ATT curses library defines an external symbol "SP" which also hapened to
be the name of a major data structure in WRspice.  Only the Solaris linker
reported this clash (and resolved in in the correct manner).  On other
systems, initializing the terminal would corrupt the application name
field of the WRspice structure, which is printed when WRspice terminates
when run from the command line.  On my system, the corrupt string put my
xterm in line-draw mode.  This structure has been renamed.

The response to a hangup signal under some systems was a bit bizarre.
After printing the message announcing termination, a continue signal is
received, so WRspice continues.  WRspice now ignores continue signals
after receiving the hangup signal.

The timestep is limited to 1/2 the delay time if there are transmission
lines present.  The allbreaks directive in the lossless model now works.
(Change in device library only)

Fixed a problem with the assignment of indexed vectors.
------
The "save" button has been removed from the margin analysis plot popup.
This is not really needed, since margin analysis results are already
saved in a file.  The "save" button tried to save the data in a rawfile,
which crashed the program.

The 100'th cell of margin analysis plots is now correctly redrawn.

The popups for the margin analysis plot are now located on the plot,
rather than in the extreme upper left of the screen.

The gauss() function now takes a fourth argument.  If this arg is 0,
no interpolation is done, and the output is stepwise at the lattice
points.  Any other value given, or if the fourth arg is not given,
and first order interpolation is done.
---

The device in @device[param] constructs appearing in subcircuits is
now expanded.  The device referenced must be from the subcircuit or
one of its subcircuits.

New feature: subcircuit parameters.
It is now possible to supply parameters to a subcircuit. The syntax is

.subckt name node_list ... param1 = val1 param2 = val2 ...

Xname node_list name param1 = val3 param2 = val4 ...

The params are tokens which must start with a letter, which can appear
in the subcircuit lines.  These are not shell variables, so there is
no $ or other punctuation, but the '%' concatenation character is
recognized.  The concatenation character is used to separate the token
from the other text:  for example RES%K allows RES to be identified as
a token, and if RES is "1" the substitution would yield "1K".  The
param token must be surrounded by non-alphanumeric characters.  The value
tokens must begin with a non-alpha character.

The names and default values of the params are specified in the .subckt
line.  During subcircuit expansion, the param tokens are replaced by their
corresponding value tokens in the text.  If a list of params is given
in the subcircuit instantiation line, those values will supersede the
defaults in that subcircuit instance.

Example
.subckt resistor 1 2 resis=1k
r1 1 2 resis
.ends

x1 3 4 resistor resis = 500
x2 5 6 resistor
x3 7 8 resistor resis=2k


WRspice can now handle duplicate formal args in .subckt lines.  It does so
by assigning a new node to one of the duplicates, then inserting a voltage
source between the two nodes, which is added to the subckt text.  This mainly
solves a problem related to files generated by Xic.  If two or more subckt
terminals are attached to the same wire net, the resulting .subckt line
will have duplicate nodes.  In the limiting case where a subcircuit consists
only of a wire with two connections, the subcircuit would in addition be
empty.  Previously, WRspice would ignore empty subcircuits and abort on
duplicate nodes.  Presently, 
    .subckt xxx 1 1
    .ends
is converted to
    .subckt xxx 1 _#0
    v_xxx_0 1 _#0
    .ends
during subcircuit expansion, which avoids an empty subcircuit and has the
intended effect of instances shorting the two terminals together.

Interrupts are reinitialized after the terminal setup routine is called.
On at least one architecture, terminal setup reinitialized the interrupts
so that Ctrl-C would exit the program.

-------

Fixed a bug: substitutions in spice text for things like "-$value1" would
leave a space between the - and the number, fouling subsequent processing.

The "tran" functions can now take constant expressions as arguments.

The argument list consists of comma or space separated expressions.  Arguments
are parsed as follows:
1. The outer parentheses are stripped from the list.
2. Commas that are not enclosed in parentheses or square brackets are
   converted to spaces.
3. Minus signs ('-') that are not enclosed in parentheses or square brackets,
   and are not followed by white space, and are first in the
   line or preceded by white space, are converted to "--" which
   signals a unary minus.  Double minus signs are not changed.
4. The string is parsed into individual expression units, which are the
   arguments.  The separation is determined by context.

There is no provision for a unary '+', thus, func(a, +b) is taken as
func(a+b).  Parenthesis can be added to enforce precedence.  The
minus sign handling implies that func(a, -b) and func(a -b) are taken as
func((a), (-b)), whereas f(a-b), f(a- b), f(a - b), etc are taken as
func((a)-(b)).

Expressions used in sources can now include user defined functions, which
must have been previously defined with the define command.

Example:
    define mypulse(delay, width) pulse(0 1 delay 1n 1n width)
    ....
    v1 1 0 mypulse(5n, 10n)

Recall that a line in the deck starting with "*@" will be executed before
the deck is parsed.

    title line
    *@ define mypulse(delay, width) pulse(0 1 delay 1n 1n width)
    v1 1 0 mypulse(5n, 10n)
    r1 1 0 100
    .end

The expressions used in sources can use the following predefined constants:
    e        2.7182818284590452354
    pi       3.14159265358979323846
    yes      1.0
    true     1.0
    no       0.0
    false    0,0
    c        2.997925e8
    kelvin   -273.15
    echarge  1.60219e-19
    boltz    1.38062e-23
    planck   6.62620e-34

----------------------

The axes in plots are no longer drawn with solid lines, the same line
style is used as the other grid lines.

A bug in the rtype=3 option in the Josephson junction model was fixed.
This bug provided plausible looking i-v curves when the input parameters
were out of range.  Now, a warning message is issued if the delv parameter
is too small, and the iv-curve properly looks like hell.

--------------------------
Fixed a bug that would crash is an unrecognized single $token appeared in
an input line.

Fixed a bug that would sometimes cause tran runs with
steptype=hitusertp to quit after the first point, or quit before the last
point.

If a mos model is not found, the default internal model used is level 1 (MOS1).
Previously, the first mos-type model was used, which was Bsim1.

This version now contains a Verilog parser/simulator.  It is full of bugs
and has a very limited feature set, but this will evolve into a major
enhancement to WRspice for mixed-mode simulations.

An input file can contain a single block of verilog statements, enclosed
in lines
.verilog
(verilog stuff)
.endv

The verilog block defines the modules of a hierarchy, including a top-level
"stimulus" module.  The description is simulated, along with the Spice
lines of the circuit (if any) during transient analysis.  One Verilog time
unit is always one user time increment.  The simulation is performed as
if "steptype=hitusertp" is set, i.e., simulation is performed at each user
time point.  The verilog simulation occurs before the Spice iterations
at the time point.

Presently, there is no means of getting circuit signals into the Verilog
block.  This will be added in the next release.

Output signals from the verilog block are obtained through voltage or
current sources in the circuit.  The voltage/current source must refer
to a Verilog variable in the scope of the top module.  The
voltage/current source is set to the binary value of the variable, and
has a built-in rise/fall time of one time increment.  At present, []
range specifications are not allowed in the voltage source reference. 

This is about all that can be done at present, but it is useful as it
allows "digital" pulse sources to be implemented that are independent of
actual time.  They look the same with any time scale that has the same number
of points.

A good reference on Verilog is:
Samir Palnitkar, "Verilog HDL, A Guide to Digital Desigh and Synthesis",
SunSoft Press (Prentics Hall) ISBN 0-13-451675-3.

Here is an example circuit:

verilog test
v1 1 0 q
v2 2 0 clk
r1 1 0 1
r2 2 0 1
.tran 1p 100p
.plot v(2) v(1)
.verilog
module xxx(q, clk);
input clk;
output q;
not nx(q, clk);
//always
//	$display("  ", "clk =", clk, q);
endmodule

module stimulus;
reg clk;
wire q;
initial clk = 1'b0;
always #5 clk = ~clk;
xxx x1(q, clk);
initial
	$monitor($time, "clk =", clk, q);
//always
//	$display($time, "clk =", clk, q);
initial #100 $stop;
endmodule
.endv
.end
--------------------------------------------

Input text can now contain lines of the form

  .global node1 node2 ...

where node1, etc., are node names.  These node names are unaltered when
subcircuits are expanded, thus the indicated nodes become accessible
throughout the circuit.

For example, the substrate node of all n-channel mosfets in the main
circuit and subcircuits can be tied to a node listed in the .global
line.  Then, substrate bias can be applied to all substrate nodes with
a single source, conveniently located in the main circuit.

Circuit variables can now be used to set digital variables in the
Verilog block.  This is accomplished by use of ".adc" lines in the
circuit text (not the Verilog text).  The format is

    .adc digital_var node_name [offset] [delta]

digital_var:  name of a variable in the top module of the Verilog block,
    can include a range specification.
node_name:    node of circuit to convert, not including any "v()".  Current
    branches can be accessed as "name#branch".
offset: (optional, default 0)  real number subtracted from value before
    conversion.
delta:  (optional, default 1)  the size of an lsb for conversion.

The transfer function is:

    value = value - offset;
    if (value > 0)
        value = value + 0.5*delta
    else
        value = value - 0.5*delta
    conversion = (integer) (value/delta)

There are two new vector functions:

    (real) rms(vector<real or complex>)
    Returns the square root of the sum of the squares of the elements of
    vector.  If vector is complex, sum the squares of the real and imaginary
    parts.
 
    (type) sum(vector<type>)
    Return the sum of the elements of vector.

    Both functions return vectors of length 1.

Fixed a bug in the let command introduced in 2.1.0.

Fixed a bug in the plot command that would crash during a button 3 zoomin.

-------------------
Fixed a bug:  if there were space characters after lines like ".monte" and
".check", the keyword was not recognized.

Major enhancements to the Verilog simulator:

This document outlines the current capability of the the Verilog parser
supplied with WRspice.  The parser/simulator is integrated within
WRspice, and the interface is described in the WRspice notes.  Also
provided is a stand-alone parser/simulator: vl.  The internals of the
stand-alone and integrated simulators are identical.

The vl program is a command line driven parser/simulator without graphics.
It is invoked as follows:

    vl [-p] [-d###] file1.v ... fileN.v

All of the given files are read and the totality is parsed as a Verilog
description.

If -p is given, the Verilog description is printed.  The printed version
is reconstructed from the internal data structures.

Various debugging options are enabled with -d###, where ### is a number
in C-style hex (0xnnnn), octal (0nnn), or decimal format.  The following
bits activate various debugging output:

#define DBG_act_eval  1   // print action before evaluation
#define DBG_cx        2   // print internal context changes
#define DBG_modname   4   // print current module name being evaluated
#define DBG_action    8   // print action as added queue
#define DBG_tslot     16  // print time slot action list before evaluation
#define DBG_desc      32  // print some things about the description
#define DBG_mod_dmp   64  // dump module info
#define DBG_ptrace    128 // print yacc parser trace

The parser/simulator handles most Verilog constructs and features.  The
following are presently not supported.

* No user-defined primitives.

* No delays in wire nets or gates.

* No stimulus blocks.

* Drive strengths are ignored.

The simulator works correctly on all of the test files supplied with
vbs-1.3.0, and the minsim.v example supplied with the Veriwell product.

Feedback is urgently needed to get the bugs out.  Verilog descriptions
with "known good" output are extremely useful.
--------------------------------

"let vector"  now prints the vector, in the same format as let without
args.

The constants plot vectors are now read-only.

Fixed a bug where the gauss function was always interpreted as a tran
function.

Note about "tran functions"
The "tran functions" are: pulse, pwl, sin, spulse, exp, sffm, gauss, and
interp.  These functions are normally used in source specifications in
Spice input.  In WRspice, they can also be used in vector expressions.
If assigned to a vector, the vector will have a length equal to the
current scale (e.g., the time values of the last tran plot), and be filled
in with values just as if the analysis was run with the given source
specification.  For example

    (run tran .1n 10n)
    let a = pulse(0 1 1n 1n)

Vector a will be length 101 and contain the pulse values.

There are three tran functions, sin, exp, and gauss, that have the
same names as math functions.  The math functions always return data
of the same length as the argument(s), and take 1 arg for sin, exp and
2 for gauss.  When one of these names is encountered in an expression,
WRspice counts the arguments.  If the number of arguments is 1 for
sin/exp or 1 or 2 for gauss, the math function is called, otherwise
the tran function is called.  It may be necessary to give the gauss
function a phony additional argument to force calling the tran
function gauss.

The Verilog parser was updated substantially.  It now uses a true event
triggering algorithm instead of the inefficient polling of the last version.
A number of constructs which didn't work have been fixed.

------------------------------------------
If the statement of an always block is a system task statement, the
statement is executed only once per time point.

Fixed a bug which prevented command line input of an Xic file from recent
versions of Xic.
--------------------------

The handling of "debugs" (trace/save/iplot/stop) is now changed.  If one of
these commands is given at the prompt in interactive mode, it is placed in
the global debug list, and will persist until deleted.  This is the same
as provious.  However, if the command is given in a file, the command
will be applied to a list for the current circuit, and will apply only to
that circuit.  Thus, for example, a spice file can contain lines like
   *# iplot v(1)
and the iplot will be performed as that circuit is run, but the "iplot v(1)"
directive will not apply to subsequent circuits.


-----------------------------------

There is a new vector function: integ(vector).  The return value is
the integral of vector, over the range of the vector's scale.
Trapezoidal integration is used.

The rms function has changed.  The returned scalar value is the
square root of the integral of the square of the argument vector,
over the vector's scale, divided by the scale range.  
If the vector has no scale, or the scale has length 1, the return
value is the square root of the sum of the squares of the vector
entries, as previously.

The new BSIM3v3.2 model has been installed in the device library as
level 9.  Bsim3v3.1 is retained as level 8.

The math functions sinh(), cosh(), and tanh() are now available in
vector expressions.
----------------------------------------

Minor repairs to the plot graphics.  Zoom-in now plots only the part
inside the cursor along the x axis.

The units suffix of a constant value is now used to assign the units
of any vector to which the constant is assigned.  This means, for example,
in
    let a = v(1)/15o

a has units of current (A).  Type "settype" to see a list of recognized
types:

Type                        Abbreviation
  time                        S
  frequency                   Hz
  voltage                     V
  current                     A
  charge                      Cl
  flux                        Wb
  capacitance                 F
  inductance                  H
  resistance                  O
  conductance                 Si
  length                      M
  area                        M2
  temperature                 C
  power                       W

  If alpha characters appear after a number, the initial characters
are checked as a scale factor.  Recognized sequences are
t, g, k, u, n, p, f, m, meg, mil.  Remaining characters are parsed as
a units string.  This is all case insensitive.

There is a new keyword that can be used on a tran line: scroll.

tran tstep tfinal [tstart] [tmin] [uic] [scroll]

If the scroll keyword is given, the simulation will continue indefinitely,
until stopped by a trace or interrupt.  The time range of data tfinal - tstart
is retained in the plot.  Iplot has been modified for compatibility with
scroll mode.

The offset and quantum arguments to the .adc line can now be expressions.
These will be evaluated once only, as the circuit is read in.

Revised the routines which manage the breakpoint table.  In certain cases,
the overhead associated with the breakpoint table can be quite large.
The new implementation is far more efficient.

Fixed an operating system interface problem that was apparent when
trying to pipe the standard output.

The Verilog simulator now recognizes the following system commands:
$time
    returns the current simulation time.
$display
    display the arguments.  All of the display functions are different
    from the standard in the following:
    1) The default printing of an argument not typed in a prior string
       argument is type-dependent, i.e., it prints in the "best" format.
    2) A space is inserted between argument print fields.
$write
    as above, but don't add newline character to end.
$strobe
    same as display, but wait until all assignments are complete.
$monitor
    set up monitoring on standard output.
$monitoron
    enable standard output monitor.
$monitoroff
    surpress standard output monitoring.
$stop
$finish
    terminate simulation, these operate identically.
$fopen
    open a channel for output.
$fclose
    close an open channel.
$fdisplay
    display to channels.
$fwrite
    write to channels.
$fstrobe
    display to channels after assign.
$fmonitor
    monitor to channels.  This is independent of standard output monitor.
$fmonitoron
    enable channel monitor.
$fmonitoroff
    disable channel monitor.
$random
    produce a random integer.

The following are only partially implemented
$dumpfile
    open a file for VCD dump.
$dumpvars
    specify variables for VCD dump.
$dumpall
    update VCD dump.
$dumpon
    enable VCD dump.
$dumpoff
    disable VCD dump.

------------------------------------------------------

Fixed a bug which would cause misbehavior occasionally when the
separate button was pressed during an iplot.

Fixed a bug in the vertical scale when zooming in on a plot in
single scale mode.

In Spice text, placing a backslash '\' before a $ will suppress shell
exapnsion.  In this
case, the \$ combination, if first in a line or preceded by space, acts
as a comment delimiter.  For example:
   \$ this line is a comment
   R1 1 0 10 \$ this is a comment
This usage is for partial compatibility with Hspice (tm), which uses the $
character as a comment delimiter.  Due to the shell expansion capability,
WRspice requires that the $ be preceded by the backslash character.

Spice input can contain lines of the form
  .title  Some new title string
This simply replaces the title line, which is the first line of the file,
when printing output.

Spice input files can now contain lines of the form:
  .lib path_to_file name
This will look in "path_to_file" for lines enclosed as follows.
  .lib name
  ... lines of Spice text
  .endl
The lines inside the block will be read into the spice deck being
read.

The library file can contain any number of .lib blocks.  The .lib block
can itself contain .lib references.  The text can be any valid WRspice
input.  The name is an arbitrary text token, which should be unique
among the .lib blocks in a library file.

example:
   title line
   .lib ~stevew/spice/stuff/mylibrary mosblock
   ... more lines

~stevew/spice/stuff/mylibrary:
   .lib mosblock
   M0 4 9 12 PSUB p1pvt L=0.25U W=2.4U
   .endl

is equivalent to:
   title line
   M0 4 9 12 PSUB p1pvt L=0.25U W=2.4U
   ... more lines

The Spice input can now contain lines of the form
   .param name = value [name = value] ...
This assigns the text value to the text token name.  If the text string
name, delimited by space or one of ,)([]='" but not with '=' to the right
is found in the Spice text, it is replaced by its value.

Subsitiutions occur on a second pass, so the order of definition and call
is not important.

Substitutions are not performed in Verilog blocks, but are performed
everywhere else, before shell variable expansion.

Parameters defined in a .param line override those defined in subcircuit
definitions or calls.

Values can contain parameter references, i.e., nesting is ok.

The value must be a single token, or be enclosed by single or double
quotes.  If double quotes are used, they are stripped when the substitution
is applied.  Single quotes are retained in the substitution, as single
quotes have a special significance described below.


There is a new expression evaluation syntax available in Spice input.
Any text enclosed in single quotes (') will be evaluated as an expression
as the file is read (before shell substitution) and the string will be
replaced by the result.  Since evaluation is performed before shell
substitution, the expression can not contain shell variables or other
`$' references, but it
can contain vectors (which nust be defined before the circuit is read).

Parameter substitution is performed whether or not the substitution
variable in part of a single or double quoted string.

The .measure statement
WRspice input files may now contain .measure statements.  These statements
allow certain types of measurements to be performed during a simulation,
either at a selected point or over a selected interval.  The syntax is
similar to the .measure statement in Hspice (tm).

The overall syntax is
.measure [dc|ac|tran] <result> {interval | point } { measurements }

the first two tokens are mandatory:

The dc|ac|tran specifies the analysis type for which the measurement is
active.

The <result> is a token, starting with a letter, which will be used to
uniquely identify the results of the measurement.  A vector with this name
will be added to the current plot, if the measurement is successful.

The rest of the line can have various formats.  The next part of the
statement is either an interval specification, or a single point
specification.

Interval specification.

The interval begins with the "trigger" and ends with the "target".
The trigger and target are independently specified as follows:

form 1:
trig|targ at=value

form 2:
trig|targ variable val=value [td=delay] [cross=crosses] [rise=rises]
+ [fall=falls]

form 3:
trig|targ when expr1=expr2 [td=delay] [cross=crosses] [rise=rises]
+ [fall=falls]

Form 1 is straigntforward; the interval starts (trig) or ends (targ) at
value.  Value must be within the simulation range of the scale variable
(e.g., time in transient analysis).

The same effect can be acheived with "from=value to=value".  The from
keyword is equivalent to "trig at", the to keyword is equivalent to
"targ at".

Form 2 allows the interval boundaries to be referenced to times when a
variable crosses a threshold.

The variable can be any vector whose value is saved during simulation.

The value is a constant which is used to measure crossing events.  At
least one of the rise/fall/cross fields should be set.  Their values are
integers which represent the variable crossing the threshold a number
of times.  The rise indicates the variable rising through the threshold,
fall indicates the variable decreasing from above to below the threshold,
and cross indicates rises + falls.  The interval boundary is set when
the specified number of transitions is reached.

If the delay is specified, transition counting starts after the specified
delay.

Example:
    trig V(2) 2.5 td=0.1ns rise=2

This indicates that the interval begins at the second time v(2) rises
above 2.5V after 0.1ns.

Separate specifications for trig/targ are used to specify the boundaries
of the measurement in the .measure statement.

The third form is similar to the second form, except that crossings are
defined when expr1 = expr2.  These are expressions, which must be enclosed
in single quotes (') if they are not simple variable references or constants.
A rise is defined as expr1 going from less than to greater than expr2.

Point specification:

A point can be specified with a "trig" or "from" specification as for
an interval.  One can also use the following form:

when expr1=expr2 [td=delay] [cross=crosses] [rise=rises]
+ [fall=falls]

This works exactly as in "trig when".

Meassurements:

The following measurements are available when an interval has been
specified.

min expr
    find the minimum value of expr
max expr
    find the maximum value of expr
pp expr
    find the (maximum - minimum) value of expr
avg expr
    compute the average of expr
rms expr
    compute the rms value of expr

When a point has been specified, the only measurement form available is

find expr
    evaluate expr at point

A .measure statement can contain any number of measurements.  The created
vector, which is added to the current plot, will be of length equal to the
number of measurements, with the results placed in the vector in order.

--------------------------------------------

Fixed a bug that would crash the program or otherwise cause problems
when certain types of expressions were given in voltage/current source
specifications.

The nogrid variable now works as advertised.  Entering "set nogrid"
suppresses the grid drawing in linear axis plots.

Fixed the plots to better handle situations where more than five decimal
places are needed in the x-axis scale.  Sometimes, the scale factors
overlap with the default window size.  Extending the width of the plot
window fixes this.

Fixed a bug that produced "too many open files".

Fixed a memory leak.

Hopefully fixed interrupt handling in scripts.  Ctrl-C should always
break out of a script, and return to the command prompt.

Fixed the out of memory handler, which wasn't working right.

-------------------------

The write command was not including the scale, fixed this.

The write command and the "run file" command now use the same file
generating functions.  Previously, the file header was created in two
different parts of the program, and the format was not quite the same.

Fixed some core leaks.

Exceeding virtual memory is no longer a fatal error.  Previously, this
would lead to program termination with a gdb trace.  Now, the operation is
simply aborted.  The free command can be used to clear memory in use,
but note that this does not generally give the memory back to the
operating system.

Virtual memory notes
WRspice runs can consume quite a bit of virtual memory, and it is possible
to exceed machine limits on many systems.  The main consumer of memory is
the data arrays from simulation runs.  Each point is a double precision
number requiring 8 bytes.  Typically, all nodes and branch currents are
saved, though this can be changed with the save command.  One set of values
is retained for each output increment.  For example, a circuit with
100 saved vectors running tran 1p 1n requires roughly 8 X 100 X 1000
bytes per run.  This is allocated to the plot structure.  By default, all
plots are saved, so memory usage increases with each run.

The vectors are copied when a plot is produced (including iplots), thus
this additional memory must be available for plots to be displayed.
In addition, iplots with a large number of data points (more than about
10000) can noticeably slow the simulation run.  The maximum number of
transient points is limited to 250,001.

The free and destroy commands can be used to delete existing plots, making
the memory available for other purposes.  The rusage command displays
memory usage and memory limits.  Note that once WRspice obtains memory
from the operating system, on most systems this memory is never returned.
Thus, the free command can make more memory available for WRspice, but
not for other programs which may also be running.


Added some syntax error checking for the .measure lines.

Fixed various bugs in .measure.

The measurement scale point(s) in .measure statements are now saved in
a vector, which is the scale for the result vector.  If the measurement
name is "result", the scale vector is named "result_scale".  The scale
contains one or two values, depending on whether it is a point or interval
measurement.

By default, nothing is printed on-screen for a .measure line during
interactive simulation.  If the keyword "print" appears in the .measure
line, the results will be displayed on-screen (as in the previous WRspice
version).  The result vectors are created in either case.

If the keyword "stop" appears in a .measure line, the analysis will be
paused when *all* measurements are complete.  Thus if the deck contains
several .measure lines and one has "stop", the analysis will pause when
all of the measurements are complete, not just the one containing "stop".
The analysis can then be resumed with "resume", or reset with "reset".

Fixed some subtle bugs in print/plot.  Fixed a not so subtle bug in plot:
the Y scale factors were wrong by a factor of 10 for some data sets.
Hope nobody is designing nuclear power plants.

The point-plots now use internally generated glyphs by default instead of
text characters.  These have the advantage of more accurate placement.
The characters are used in hard copies, or if the pointchars variable is
set.

The LTRA device was broken, somehow.  Fixed this.

Improved (somewhat) crash recovery, particularly under FreeBSD.
The gdbexec script was missing in some of the spice_libs distributions.
The file has been modified, also the gdbexec file in the Xic startup
directory, which is now different.

Changed the organization of a lot of the trace and iplot code for
better efficiency.  Iplots and traces of large data sets progress much
faster now.

Fixed a bug that would crash multi-dimensional plots.

Fixed a bug that would cause problems if interrupts were given too close
together at certain times.  The "Interrupt!" message no longer appears
in the error window.

---------------------------------------------------------------------

Fixed a memory corruption problem.

Fixed a FreeBSD-specific problem related to the SIGABRT termination
malloc option.  FreeBSD has this enabled by default, which caused a
very messy crash when triggered.  Although the termination is now clean,
it is recommended that FreeBSD users delete /etc/malloc.conf.

The jjdphimax variable, used to set the maximum allowable phase change
of Josephson junctions between time points, has been renamed to
"dphimax".

Added some code to fix a long-standing problem with Berkeley spice and
derivatives.  The internal time step is determined from numerical
integration of reactive elements, and it defaults to a rather large
value.  This may not resolve the waveforms from sinusoidal sources
adequately.  There is no problem with pulse and pwl sources, as
breakpoints are explicitly set at slope change points.  No breakpoints
are set for a smooth function such as sin.  The added code uses the
dphimax variable to limit the phase change of a sinusoidal source
between time points.  The default value of pi/5 provides about 10
points per cycle.  The variable can be set in the range pi/1000 - pi. 
This variable is used similarly to limit the timestep for the
exponential sources and others.

------------------------------------------------------

modified the rms function for better accuracy.

When temporary files are created, WRspice will put the file in a directory
specified in the environment as SPICE_TMP_DIR or TMPDIR (in that precedence)
otherwise the file goes in /tmp.

Fixed bug that would crash Monte Carlo analysis if Ctrl-C pressed.

Fixed a bug which would permanently break the verilog parser state if
it ever saw certain syntax errors.

The Verilog $fopen() function now accepts a second string argument.  If
this argument exists and starts with the letter 'a', the file will be
appended to rather than overwritten.
    Examples:  fd = $fopen("myfile", "a");     (to append)
               fd = $fopen("myfile");          (to overwrite)

----------------------------------------------

WRspice now fully supports TrueColor visuals (which is what you have
in 16, 24, or 32 plane graphics modes).

There is a new command:
    seed [ integer ]
This will reset the random number generator, using the new seed if given.
This enables "random" sequences to be repeated.

-------------------------------

Plugged some core leaks in the verilog simulator.

Will no longer try to read a directory if a directory name is typed
on the command line.

Fixed a problem with Ctrl-C interrupts of scripts with while loops.

-------
### Start of manual changes ##########

WRspice will now perform an implicit "let" before trying to source a
file.  Previously, the file source test came first, so that if one had
a statement like "xx = xx + 1" and an existing file named "xx", WRspice
would try to execute the "script" xx with args xx, +, and 1.  The user
should use "let" and "source" to avoid ambiguity.

Fixed some rough edges associated with interactive functions and terminal
changes being performed while in batch mode.  For example, the quit
command no longer tries to prompt the user for confirmation, and using
"$<" in a script no longer leaves the terminal in non-echo mode.

In plots that have units but are out of range for the prefix substitution,
the units are now appeanded to the label, so the label would be something
like "e-21V" rather than simply "e-21".

---

The model reference token in device lines is now case-insensitive, i.e.,
case is ignored when matching a name from a .model line.

The following changes are to the shared device library:

Fixed a bug in the source time step limiting that can cause the time
step to be too large.

Added the Berkeley BSIM3-SOI silicon-on-insulator mosfet model to the
standard device library.  The manual for this model is available in the
"docs" directory on the web site.

The mos "level" parameter has been redefined in the current library.

Level  model
1      MOS1
2      MOS2
3      MOS3
4      BSIM1
5      BSIM2
6      MOS6
7      BSIM3v1       (used to be unassigned)
8      BSIM3v2       (used to be BSIM3v1)
9      BSIM3-SOI     (used to be BSIM3v2)

------

Fixed a bug in variable substitution which would sometimes put extra
junk after a substitution.

Having more than one "vs" on a plot string no longer crashes the program.

The pole/zero analysis now should work.

Bugs fixed for certain buttons on the "plotdefs" menu.

Minor improvements/fixes in plot and print commands.
-------------------------

The % integer modulus operator now functions as a float modulus
operator, in the manner of the C fmod function.  If the arguments are
complex, the "largest integer" is obtained by dividing the magnitudes.

There are now floor() and ceil() math functions, which operate the
same as the C library functions for real data.  There is a new int()
function which returns the nearest integer, same as the C rint()
function for real data.  For complex data, the functions perform the
same operation on the imaginary part.

The let a = pulse(...) syntax was broken and caused a fault.  This
has been fixed.

Change to device library:
The sources can now handle an unlabeled dc value and a function specification
in either order in the device line.  Previously, the function had to be
first.
-------

If the "source" button in the Xeditor was used to start a script, and the
editor was cancelled before the run finished, the program would crash.
This has been fixed.

The listing command no longer has a line length limitation.

Fixed some problems with backquote syntax recognition.

Fixed a situation where Ctrl-C could cause a messy crash when a script
is running.

Internal changes to support Microsoft Windows port.

Fixed a bug which would seg fault while creating plots.

Fixed a bug which would seg fault if a looping analysis was resumed
after a reset.

In batch mode, if a command line file is given that can't be opened
for reading, wrspice will exit.  Previously, wrspice would try to
read from the standard input.  This is still true if there are no
command line files given.

Terminating a batch job with Ctrl-C no longer takes the error exit
path, i.e., no gdb dump.

Fixed some old bugs in the shell interface, such as faulting on
a bad output pipe in batch mode.

Fixed some things which allow wrspice to be used as the "shell" in
shell scripts, for example, save the following lines in a file and
make it executable.  Typing the name of the file will run wrspice on
the example file mosamp2.cir and display the plot.  This mode of
running wrspice might be useful for something.

#! wrspice -J

.exec
source /usr/local/lib/xictools/wrspice/examples/mosamp2.cir
run
plot v(20) v(66)
set noaskquit
pause
quit
.endc

Typing the name of the file is the same as executing "wrspice -J
file".  WRspice ignores the #!  line, so that the next line is the
"title" line and is also ignored.  The -J (Jspice3 compatibility)
means to not bring up the toolbar.

The pause command is new, it simply waits for a keypress.

The toolbar now defaults to a drop-down menu.  This takes up less screen
space.

The update command has changed a bit.  With no args, the current
configuration (locations of tools that are open) is updated into the
user's $HOME/.wrspiceinit file.  The argument can be one of "n", "h",
"v", or any word containing one of these letters.  If given, this
changes the menu style:  n for the new drop-down menu, h for
horizontal buttons, and v for vertical buttons.  The .wrspiceinit file
is not updated, however if "s" is also given, the new configuration
will be saved.

The following information did not make it into the new manual:

* The Josephson junction model has been updated.  The previous model,
  also used in Jspice3, took as an axiom that the Rn would project
  through the origin.  This implied that the ratio of the critical to
  quasiparticle gap currents would vary.  In the new model, projection
  through the origin is not assumed, and the ratio is fixed.  The
  default value for this ratio is Pi/4, from BCS theory.

  There is a new JJ model parameter "icfact" to set this ratio, which
  for real devices is generally somewhat less that the theoretical
  value.
----------------------------

Device library change:
Source definition lines that contain things like "pulse 0 1 1n 1n ..."
are now recognized.  Previously, since these are actually functions
interpreted by the expression parser, the arguments are required to
be in parentheses.  A hack was added to recognize when the parnetheses
are omitted, and add them before sending the string to the parser.

Fixed a bug that prevented recognition of the keywords "nodeset" and
"ic".

Fixed a bug that would sometimes cause a second analysis specified in the
input file to not converge.

The UFL-SOI MOS model has been incorporated as Level 10.

Fixed some problems in the plotdefs tool.

Changed the simdefs tool so it fits on a low resolution screen.

If the command line option -x or -X is given, WRspice will start in
its own xterm, in interactive mode.

The bug command was broken, fixed.

The help system now reuses the same window for reference text.
-------------------------

The level 8 BSIM3v3.2 model was broken in transient analysis.  The fix,
from Berkeley, has been incorporated.

The University of Florida SOI model release 4.5 has been added to the
device library.  Documentation and examples can be found in the file
docs/ufsoi-docs.tar.gz.  Thanks to Prof. Jerry Fossum of UFl for making
the code available.  More information can be found in www.soi.tec.ufl.edu.
The new model has level 10.

Fixed a Linux library problem:  WRspice uses a library named "ncurses" which
controls access to the terminal window.  This library is statically
linked, due to the fact that there are several incompatible versions.
Under Linux, if the terminfo database is not found in /usr/lib, the
program would exit.  This has been fixed: a warning is now printed
and the program continues.  If the warning appears, then the command
line editing may not work.  To eliminate the warning, set the
TERMINFO environment variable to the location of the terminfo, e.g.
"setenv TERMINFO /usr/share/terminfo".  This seems to be necessary
for Red Hat Linux 5.1.

Fixed some problems in the .measure processing.  In trig/targ, the
"val=" is now optional, i.e.,
   trig varname val=number is equivalent to trig varname number

The text-mode help, which is active when no graphics system is available,
now prints plain-text help, and not the HTML text.  Some bugs were also
fixed in this system.  The HTML to ascii text converter only handles
the most common HTML tags, so some descriptions may look a little
strange.  The figures (and all images) are not shown.

The echof function, which prints to the output file in operating range
and Monte Carlo analysis, now works in both the .control and .exec
blocks.  Previously, it did not work in .control blocks.
--------------------------------------------------------------

The ncurses library is no longer used, alternative functions are now
used.  This fixes some strange but minor problems in the RH 5.0 Linux
release having to do with the terminal interface.  The comment in the
last release notes about the TERMINFO variable still applies.

-------------------------------------------------------------------

The plot window was insensitive to keyboard input under some window
managers (FVWM).  This has been fixed.

If an error message window tried to pop up while a hardcopy was in
progress, a fault would result.  This has been fixed.

The built-in limit of 250000 transient points has been eliminated.
Instead, there is a new "set" variable maxdata, which has a corresponding
form in the "simdefs" tool, which sets the maximum allowable memory
stored as plot data during an analysis.  The default is 32MB.
If the steptype is not set to "nousertp", the run will abort at
the beginning if the memory would exceed the limit.  Otherwise, the
run will end when the limit is reached.

There is a new tran line keyword: segment.  The new syntax is

tran tstep tstop [tstart tmin] [uic] [scroll | segment base delta] [dc params]

If the "segment" keyword is given, along with a character string token "base"
and real value "delta",  individual rawfiles are output for each range of
delta as the simulation advances.  The internal plot data are cleared after
each segment is output.  The files are named with the "base" given,
as base.s00, base.s01, etc.  This will not happen if a rawfile is being
produced.  If "scroll" is also given, it is ignored.  If a dc analysis
is chained, it is legitimate to pass a delta of zero, in which case a
file is produced for each cycle.  Otherwise, the delta should be a multiple
or submultiple of tstop, or the files will be difficult to interpret.
It is an error if delta is nonpositive if there is no chained dc analysis.
The purpose of this feature is to facilitate extremely lengthly transient
analysis runs.

Fixed a bug that would cause faults if .save lines were used in a file
run with "run rawfile".

Fixed a bug that would cause errors in extremely long runs containing
short transmission lines.  Specifically, if tmax/1e6 is longer than the
delay of a transmission line in the circuit, there would be problems.
This has been fixed.

Fixed some errors in the handling of parameters in .param statements and
and in .subckt definitions and references.

new defaults: itl1 = 400, itl2 = 100

All mos devices now accept a real parameter "M" which scales all the
instance capacitances, areas, and currents by the given factor.  This
can be used as a short-cut for modeling multiple devices, e.g.,
M = 2 is equivalent to two identical devices in parallel.

fixed a bug which would hinder convergence, mostly in MOS circuits.

Fixed a bug which caused the loop command to crash.

Modified the gmin stepping algorithm to improve convergence.

---

Found a bug in the Berkekey BSIM3 code which caused the model nominal
termperature to be set incorrectly on the second and subsequent runs
in a multi-run task (more than one analyis in a file).

Fixed a bug which caused poor convergence in dc sweep analysis with
bipolar transistors.

Fixed a bug that caused the .options lines to be listed twice in the
listing command.

In the line given to the plot, asciiplot, etc. commands, a "." is replaced
with the vector list found in a .plot line from the file with the same
analysis type as the current plot.  For example, if you have a file with

   ...
   .tran .1u 10u
   .plot tran v(1) v(2)

then one can type "run", then "plot ." to plot v(1) and v(2).

Fixed a bug that caused poor convergence with the nqs flag set in
bsim3v3.2 (level 8).

The WRspice input file syntax now supports conditional blocks, through use
of three new keywords:

  .if extression [ = expression ]
  .else
  .endif

The expression can involve parameter names from a .param line included
elsewhere in the file, or vectors and shell variables defined *before*
the file is read.  It does not understand variables implicitly set by
inclusion in the .options line.  If the single expression is nonzero,
or the two expressions yield the same result, the lines following .if
up to the matching .else or .endif are read, and if an .else block
follows, those lines to the matching .endif are discarded.  If the
single expression if zero or the two expressions do not match, the
lines following .if to the matching .else or .endif are discarded, and
if a .else line follows, the lines following .else to .endif are
retained.  These blocks can be nested.  The action is similar to the C
preprocessor.

This filtering is performed early in the parsing of the file, so the
.if, etc. lines can enclose script lines, verilog blocks, etc., and
not simply circuit lines.  The lines not in scope are gone from memory.

Example:

Spice deck title line
...
.param use_new_mod = 1
...
.if use_new_mod
.model m1 nmos(level = 8 ...
.else
.model m1 nmos(level = 3 ...
.endif

------------------------

WRspice now supports MOS model selection by L and W, similar to Hspice.
This facility is used to automatically select the proper model for a
specific device dimension, from among several models which are nominally
similar but optimized for a particular device size.  This facility works
with any of the mos model levels.

The mos models for the specified ranges should use the same "base" name
plus an arbitrary but unique extension separated from the base name with
a period.  The instance line should refer to the model by the base name.
Each of the different models with the same base name should have ranges
specified with the model parameters LMIN, LMAX, WMIN, WMAX.  The model
associated with an instance is the first model found such that the base
name matches, and LMIN <= L <= LMAX and WMIN <= W <= WMAX.  If the MIN/MAX
parameters are not found in a model line, the particular test is always
true, e.g., if no MIN/MAX parameters are specified in a model, that model
would match any L, W. 

example:
m1 1 2 3 4 nm l=1.5u w=1u
m2 a b c d nm l=3u w=5u
...
.model nm.1 nmos(level=8 lmin=1u lmax=2u wmin=1u wmax=2u ...)
.model nm.2 nmos(level=8 lmin=2u lmax=4u wmin=1u wmax=2u ...)
.model nm.3 nmos(level=8 lmin=1u lmax=2u wmin=2u wmax=5u ...)
.model nm.4 nmos(level=8 lmin=2u lmax=4u wmin=2u wmax=5u ...)
.model nm.5 nmos(level=8 ...)

In this example m1 would use model nm.1, m2 would use nm.4.  The model
nm.5 is a "catch all" for instances that don't match the other models.
The extension can be omitted in one of the model names.

The show command with the "-d" specifier now displays the name of the
model used, and can therefor print the actual model associations,
for example

    show -d m*,none

would print

    m1: BSIM3v2 (model nm.1)
    m2: BSIM3v2 (model nm.4)

---------------------------------

Fixed a memory bug in "check -c".

If a "license.host" file appears in the current directory, that file
will be consulted to find the license host (since the Xic program
does likewise).

If a plot window was resized before drawing was finished, the plot would
likely be munged.  This has been fixed.

No longer crashes in an OP of a circuit with no sources.

Fixed a string-handling bug that could crop up in numerous places.

Fixed a bug: if the output was redirected to a file, the program
might crash, at least under Linux.

The graphical objects have a now color scheme.

Fixed a condition that would crash the probram by attempting to print
a null error message string.

The from/to keywords weren't working in .measure lines, fixed.
------------------------------------

Redesigned some of the internal run-control data structures to avoid
various kludges, and allow incorporation of the following new features.

Previously, during operating range and Monte Carlo analysis, only the
current data point was available.  This is no longer true.  The
"check" command, which is used to control this type of analysis, takes
several new options which control data retention.  This allows other
features, such as .measure lines and iplots, to work with operating
range ane Monte Carlo analysis.

With none of the following options given to the check command, operation
is as in previous versions.  However, if a .measure line appears in the
spice deck, data will be retained internally so that the .measure is
operational.

traces and debugs

check -f
    The -f option will cause the data for the current trial to be
    retained.  This is implied if any .measure lines are present.
    The data are overwritten for each new trial,  The data for the last
    trial are available after the analysis is complete, or can be accessed
    for intermediate trials if the analysis is paused.

check -s
    This option also causes retentian of the data for the current trial,
    but in addition will dump the data to a family of rawfiles, similar
    to the "segment" keyword of the .tran command (though this works with
    other than transient analysis).  The default file name is the name
    of the range analysis output file, suffixed with ".sNN", shere NN
    is 00, 01, etc.  Each trial generates a new suffix in sequence.

check -k
    With this option, all data is retained, in a multi-dimensional plot.
    Note that this can be huge, so use of the "maxdata" variable and
    .save lines may be necessary.  One can see the variations by plotting
    some or all of the dimensions of the output.  Recall forms like
    v(1)[N] refers to the N+1'th trial, and v(1)[N,M]  includes the data
    for the N+1'th to the M+1'th trials.

If an iplot is active, -f (current trial data retention) is implied.
The data will be plotted for each trial in the same iplot, erasing
after each trial is complete.  If -k is given, all data will be plotted,
without erasure.  Note that this doubles internal memory requirements.


There is a new feature set associated with "mplots".  The cells in an
mplot can be selected/deselected by clicking on them.  Clicking with
button 1 will select/deselect that cell.  Using button 2, the row containing
the cell will be selected or deselected, and with button 3 the column will
be selected or deselected.  A selected cell will be shown with a yellow
background, with in index number printed.

Only one mplot window can have selections.  Clicking in a new window will
deselect all selections in other mplot windows.

At present, the selections are used to facilitate plotting of multi-dimensional
plots, such as those obtained from the -k option of the check command.
If selections exist, only the data from the selected cells will be plotted
from the associated multi-dimensional vectors.

For example, after running check -k, suppose one has a resulting
vector v(1) (which will contain data from all of the trials).  If not
using "mplot -on" during the run, one can type "mplot" after the run
to display the pass/fail results.  In the mplot window, select one of
the cells.  Then, "plot v(1)" will plot the v(1) from that trial only.
If no cells are selected, or all cells are selected, "plot v(1)" would
show the superimposed v(1) traces from all trials.  The index number
that appears in the cell is the vector index, so for example if a single
box is selected with index 4, "plot v(1)" would be equivalent to
"plot v(1)[4]".  Note that the selection mechanism allows combinations
of traces to be plotted which can't easily be obtained from indexing.

This capability is carried a step further for general multi-dimensional
plots.  If one enters "mplot vector" where "vector" is the name of a
multi-dimensional vector from whatever source, an mplot will appear.
This mplot has nothing to do with range analysis, all cells are marked
"fail", and there are no scale factors or other labeling.  It allows
the selection mechanism to be used for displaying the plots, however.
Suppose for example one has a multidimensional plot from a loop-transient
analysis.  Entering "mplot time" will bring up a dummy mplot whose cells
represent the loop iterations (time is the scale vector for the plot, but
any data vector in the plot would suffice).  Then, by selecting the
cells, one can choose which iterations will be visible when vectors from
the plot are plotted.

If a single multi-dimensional variable is plotted, the dimensions are
shown using different colors, with a legend printed at the left.

Fixed a bug in the dc convergence test that would fail unexpectedly on
some simple cases.


When a .measure is included in an iterative analysis, data are saved
as follows.  Before each iteration, the result vector and its scale
are saved to the end of a "history" vector and scale, and are then deleted.
The result vector and scale are recreated when the measurement is completed
during the iteration.  Thus, at the end of the analysis, for a measurement
named "example", one would have the following vectors:
example   (the result from the final iteration)
example_scale  (the measurement interval or point in the last iteration)
example_hist  (results from the prior iterations)
example_hist_scale (intervals from the prior iterations)

Thus, during each trial, the result vector will have the same properties
as in a standard run.  It can be used in the .control block of a
Monte Carlo or operating range file (recall that $?vector can be used
to query existance, and that if there is no checkPNTS vector defined,
the .comtrol block is called once at the end of each trial).

The results form operating range/Monte Carlo analysis is now hidden
away in the resulting plot structure.  The plot can be displayed
by entering "mplot vec" where "vec" is any vector in the plot.

Changed the default plotting colors for improved differentiability.

Fixed a condition that would cause subtle integration errors if
steptype = hitusertp, or when verilog blocks are present.
---------------------------

Removed the "fix" that caused "subtle integration errors" in the last
release.  It turns out the the "subtle integration errors" were in fact
correct, brought about by the increased accuracy of the "hitusertp" mode.
The "fix" was to reduce the integration order after a time point, which
reduces accuracy slightly, and is therefor not a good idea.

During analysis with Josephson junctions, WRspice now handles
breakpoints by hitting the breakpoint.  Previously, breakpoints, which
are generated by slope changes in sources, were ignored in Josephson
circuits, for efficiency.  The inherent small internal time step used
for Josephson circuits guarantees convergence, but handling
breakpoints improves accuracy.

Fixed a bug in the last release: measure results from intervals were
recorded as zero in the output vectors.

The plot windows now contain icons for changing the scales.  These are
triangles; the x-axis icons are in the lower left corner, and the
y-axis icons are arrayed along the right edge.  Clicking on one of these
icons has the following effects:

right or up:
  button 1:
    move the scale interval to the right or up
  button 2:
    extend the right or top scale factor to the right or up
  button 3:
    contract the right or top scale factor to the left or down

left or down:
  button 1:
    move the scale interval to the left or down
  button 2:
    extend the left or bottom scale factor to the left or down
  button 3:
    contract the left or bottom scale factor to the right or up


Previously, the pulse() function would default to being periodic with
period tstep + tfinal, which is undesirable when the "scroll" keyword
is used with transient analysis.  The default period is now set to an
extremely large value.

If a tran analysis with scrolling is paused, and a new iplot specified,
the iplot should now work correctly if the tran analysis is resumed.

Forms like "command > something something_else" no longer fault.

The echo command no longer strips '%' from the arguments.

Lines that end with an unmatched " or ' no longer cause faults.
----------------------------------

Tweeks to the colormap handling to make sure that the label widget colors
are defined.

WRspice no longer immediately halts when placed in the bacground, so
window events are now serviced.

New capablities in .measure lines:

  There are two new meaurement keywords, "pw" and "rt".  These are used
  to specify a measurement mode over an interval.

  pw  (pulse width) 
  This will measure the full-width half-maximum of a pulse contained in
  the interval.  The baseline is taken as the initial or final value
  with the smallest difference from the peak value.  The algorithm will
  measure the larger of a negative going or positive going pulse.

  rt  (rise time)
  This will measure the 10-90 percent rise or fall time of the edge
  contained in the interval.  The reference start and final values are
  the values at the ends of the interval.

Multiple .measure lines can now be "chained" in the following manner. 
The vector name following the from, to, trig, or targ keywords can be
the name of another measure.  In this case, the effective start time
is the measure time of the referenced measure.  The measure time is
the end of the interval or the measure point.  The td, rise, etc
keywords can be used in the referencing measure.  The td will be added
to the imported time, and the other keywords operate in the normal
way.  If there are no keywords other than td spedified, the time is
the delay time plus the imported time.  If none of the rise, fall, or
crossing keywords is given, the interval starts immediately after any
delay.


Example:

.measure tran t1 trig v(5) val=.4m rise=3
.measure tran t2 trig v(5) val=.4m rise=4
.measure tran pw trig t1 td=20p targ t2 td=20p pw v(5) max v(5)

In this case, the measures t1 and t2 "frame" a period of an (assumed)
repeating signal v(5).  Note that no actual measurement is performed
for these lines.  Their purpose is to be referenced in the third line,
which takes as its interval the t1-t2 interval delayed by 20 pS, which
measures the pulse width and peak value.

New command: combine

This command takes no arguments.  This command will combine the two
most recent plots, if similar, into a single plot, and expands the
dimensionality of the resulting plot.  The two plots must have
identical vector names and compatible lengths.  The purpose of this
command is to create a single multi-dimensional plot from sequences
of runs.  The most recent plot is added to the end of the previous
plot, and is deleted.

Example:

while i < 5
    (set parameters for run)
    run
    if i > 0
        combine
    end
    i = i + 1
end

This will combine all the data from the five runs into a single plot.

The new .meaasure keyword "print_terse" can be used instead of "print",
if more concise output is desired.

New command: pick
usage:

    pick vecname offset period vector [ vector ... ]

This command creates vecname and fills it will every period'th value
starting with offset from the vectors.  For example, for

   pick xx 1 2 v1 v2

xx[0] = v1[1]
xx[1] = v2[1]
xx[2] = v1[3]
xx[3] = v2[3]
and so on.
---------------------------------------

added deltas for ufsoi-4.5F

port to gtk

The imaginary value returned from the log() function is now
log10(e)*theta.  The log10(e) term was previously missing.

---------------

Fixed bug: wrspice would crash if started without graphics and an iplot
was specified.
    GR.Cur = 0, pointer used in iplotEnd()

The text-mode help (active when no graphics package is available) now
works.
    changes to gtk-xmhtml

The hardcopy command now works without a graphics package available.

Fixed user/system time display in main display.

------------------------------

Fixed bug that would crash program occasionally if marker was used
in a plot that was being updated with new data.

If a variable in an iplot could not be evaluated, it would cause a
program crash.  This has been fixed.

Fixed an obscure problem with "special" variables, i.e.,
device/circuit parameters that begin with '@', in "save".  If a device
parameter is a list type, only a single component can be saved.  The
single component can be sepcified with an integer, or with a vector
name that evaluates to an integer.  For example, the initial condition
values for a Josephson junction can be accessed as a list, say for
junction b1,

  @b1[ic,0] or @b1[ic][0]    (equivalent, which is the same as
                              @b1[vj], the initial voltage)

  @b1[ic,1] or @b1[ic][1]    (equivalent, which is the same as
                              @b1[phi], the initial phase)

One can also have
  let val = 1
  @b1[ic,val] or @b1[ic][val]

Bug fix #1: this now works, e.g., syntax as above
   save @b1[ic,0]
   or equivalently
   save @b1[ic][0]
is accepted.  Note that "save @b1[ic]" is the same as "save @b1[ic,0]".
The "0" can be an integer, or a vector name that evaluates to an integer.

A problem is that this produces a vector with a name like "@b1[ic,0]". 
To access this vector, you can't simply type the name, since the name
is an expression which will actually lead to an evaluation error.  One
has to fool the expression parser into taking the name as a string. 
This will happen if the name is not the lead in a token and the name
is double quoted.  If the name is the leading part of a token, it
should be backslash- double-double quoted.

In an expression list, double quotes serve as expression terminators.
For example,

    plot v(2) -v(3)

is ambiguous.  It can be two vectors, or one (the difference).  However
    plot v(2) "-v(3)"
enforces the two-vector interpretation.  To use the double quotes to
enforce string interpretation, one should have

    plot v(2) \""@b1[ic,0]"\"

The extra set of quotes is needed only if the string is at the start
of a token, thus

    plot 2*"@b1[ic,0]"

is ok.  This may be a bit confusing, but this feature is seldom
used, and a bit of experimentation will illustrate the behavior.

Fixed a bug in the graphical interface involving references to dead
windows.  Bring up the mail client with no help window present and press
help on the mail client.  Move the help window if necessary to overlap
the mail client, then dismiss the mail client.  This would cause a
crash.

The help database was updated.  It should now be current for the gtk
release of WRspice.

------------------------------------

Fixed a bug that would cause the program to become unstable when
the window manager "destroy window" function was used to close
the plot window.

Fixed a bug that would cause the program to crash when closing a
plot window.

Fixed the rpm distribution to eliminate old help files that were
causing (harmless) database clashes.

----------------------------------

The rpm distribution file for Solaris did not create the symbolic
link libxsdev.so -> libxsdev.so.2.0 in (default) /usr/local/lib

The Solaris rpm binary was updated, and can now doesn't require
files under /usr/local.
--------------------------

The terminfo database should now be located correctly on Linux
systems with terminfo under /usr/lib.

Fixed a buffer overflow problem with long PWL statements.  These
statements (and SPICE logical input lines in general) have no fixed
length limit.
--------------------

Radio buttons in forms now work.


Fixed some problems in the rpm intallation scripts.

1) The pre/post install scripts were operating on files under /usr/local
even if the --prefix argument was given.  The scripts move the previous
version to version.old and similar things, which would not be done
properly.

2) On Solaris, if installed over an old Xic installation, the
libxsdev.so file in /usr/local would not be removed, causing WRspice to
start with the old library.  WRspice would start, but simulations would
fail.

3)  If the --prefix argument is used, the script now creates a symbolic
link in /usr/lib named libxsdev.so that points to the actual location
of the libxsdev.so.2.0 library file.  Previously, this had to be done
by hand, of WRspice would likely not be able to find its library.

The device library libxsdev.so.2.0 now contains a version stamp, which
is compared with the expected version now compiled into WRspice.  Previously,
WRspice would start with any old library, but it would not run properly.
Now, if WRspice finds a library with an incorrect version stamp, it will
exit with an error message.  If it finds a library without a version
stamp, the loader will kill the process, and issue an error message
indicating that the variable "DevlibLinkedVersion" is not found.
------------------------

The UFSOI model (MOS level 10) has been upgraded to release 5.0 from
the University of Florida.
-------------

Fixed broken rspice command

Fixed broken undefine command.

Fixed some problems with the define command, and user defined functions.
  1) defined functions had to have at least one arg.  Now defined functions
     with no arguments is possible.
  2) constants in defined functions were not being handled correctly.

Fixed some command line parsing problems with > and <.  For example,
print 1 \>= 2 would give a parse error.  Note that these
symbols are generally taken as redirection unless quoted.

Fixed a memory problem with user-defined functions that use the same
arguments more than once, such as the built-in min and max functions.

Fixed a buffer overflow problem that would crash the program if the
internal expanded function name for a vector became too long.  For
example, "print min(max(1,2),max(3,4))" would fault, since the min/max
would be expanded in the names of internal vectors.
------------------

Fixed bug in the handling of the "debug" entry in the Debug popup.  Pressing
this button would cause GTK error messages.

Fixed the xgmarker entry in the Plot Defs popup.  The boolean keyword
was given an integer entry field.


The "bug" command now brings up the mail client window, if graphics is
available,  instead of the command line mail program.
------------------

It is now possible to reference .measure results in sources.  The referencing
token has the same form as a circuit variable, with an optional index, i.e.
    @result[index]
where the index, if used, is an integer that references a specific component
of the result (0-based).  The value is always zero for timepoints before
the measurement has been performed, and a constant value afterward.

Example:
.measure tran peak from=50n to=150n max v(5)
.measure tran stuff trig v(4) val=4.5 rise=1 targ v(4) val=4.5 fall=2
+ min v(4) max v(4) pp v(4) avg v(4) rms v(4) print
vxx 1 0 @peak
vyy 2 0 @stuff[2]

In this example, during transient analysis, vxx is zero until 150n, where the
measurement takes place, at which point it jumps to the value measured.
Likewise, vyy is zero until the measurement, at which point it jumps to the
third component ("pp v(4)") result.  The resulting voltages can be used
elsewhere in the circuit.  Note that we have two implementations of a
behavioral peak detector.
--------------------------

(***** SRW ** vectors.cc:723  delete [] -> delete)
(***** SRW ** graph.cc:sGraph::gr_copy, added copy selections)
(***** SRW ** added if (gtk_main_level()) before gtk_main_quit in gtkhcopy.cc

fixed bug: crash after asciiplot of multi-d vector.
---------------------------------------------------------

Fixed a bug that would cause a program crash after dragging a trace
from one plot window to another, if the trace copy failed.

Fixed a bug that would cause incorrect ghost-drawing of the trace pointer icon
when over a different plot window.  The trace icon was not being erased when
the pointer left the window, leaving junk behind.

When a trace is dragged into a plot, the command buttons are now regenerated
so that functions like "Separate" become available.

It is now possible to drag traces with non-monotonic scales between
plot windows, if the scale vectors are identical.

The noise analysis output was fouled up, adding the integrated noise as a
"garbage" point at the end of the noise density plot.  This has been fixed.

The device library has been incremented to 2.2.2, since the header files
required changes due to the noise analysis problem.

(Unix/Linux)
Ack!  The GTK arc rendering function was rendering solid arcs, making polar
and smith plots useless.  This now works.

(Unix/Linux)
The "Set" button in some of the tools entries (such as for the
gridstyle variable in Plot Defs) was not working, fixed.

Windows Only
 - drag/drop between plots now works
 - the marker in plots now works
 - polar and smith plots now work
 - Due to Microsoft's crappy 16-bit internal random number generator,
   and WRspice's assumption of 32-bit random values,
   Monte Carlo analysis and the gauss() function were broken.  In fact,
   the system would hang on the first call to the generator, such as when
   a Monte Carlo file was sourced.  This has been fixed.  The Microsoft
   random numbers are probably good enough for most circuit simulation
   purposes.
 - Fixed a bug that would crash the program sometimes when using mplot
 - The same bug prevented selections in mplots from being rendered
   correctly.
   
-----------------------------
The states of the buttons in the Tools menu were not being set properly
at startup.

Fixed a bug that would break subcircuit expansion if the subcircuit call
did not give a name (beyond "x") to the subckt. i.e.,
  x 1 2 ...
would fail.

The xeditor text editor pop-up would reset the file name if the Read button
was used, as it would for the Load button.  This no longer occurs.

There is a new means of implementing nonlinear resistors.  If a PWL
statement is included in the expression that follows the node definitions
for E, G, H, and F controlled sources, the controlling variable of the
PWL is the controlling variable of the source, and not the time vector.
The PWL statement gives the value of the source as a function of the
controlling parameter.

See the help for cccs, ccvs, vccs, vcvs for more information.

If an expression is single-quoted, the "function" keyword can be eliminated.

The table construct has been reimplemented.  The call to a table can take
one of two forms:
   tabname(var)    (only in source expressions)
   table(tabname, var)
The two forms are equivalent, and can be used in *any expression*.

Entering "show devname..." now executes "show -d devname..." (as the
documentation states).

Single-quoted expressions are supposed to be evaluated and replaced by the
result when the file is read.  This was not happening unless a .param line
was present in the file.  Substitution occurs properly now.

The documentation recommended using single quotes around complicated
expressions used in .measure lines.  This no longer works, since single
quoted expressions are evaluated at file load time.  Instead, the expression
can be placed in parentheses.

  old (won't work):  .measure ... 'v(1) - v(2)' = 'v(3) - v(4)' ...
  new             :  .measure ... (v(1) - v(2)) = (v(3) - v(4))

Fixed a convergence problem in circuits with a source with an expression
that does not resolve to 0 at time = 0.

If the 8'th bit is set in any character in the first "line" of an input
file, the read is aborted.  This avoids accidently  sourcing a binary file
and crashing the program.

Major review and update of the help database.
---------------------------------------------------

If "vs" was last in a plot argument list, the program would crash.

If there exists a vector named "v(20)", for example, then entering
plot ".v(20)" would find "v(20)" in the first plot in the internal list of
plots.  This may be a "feature", but could be confusing.  Now, this
gives an error, unless ".v(20)" also happens to be a vector name.

Giving the form "all.vecname" in a plot line would cause internal corruption
which could cause problems.

not documented:
Entering "plot all.1" is the same as "all.v(1)" if v(1) exists in some plot.

Some shell shortcuts:
plot v({1,2,3})  is the same as plot v(1) v(2) v(3)

\$ inhibits shell expansion, if preceded by space or first in line indicates
a comment.

While in the $< (prompt for input) shell substitution, typed characters are now
echoed to the screen.  Previously, they were not echoed, which is confusing.

While in the $< (prompt for input) shell substitution, pressing Ctrl-C would
leave the terminal with the editing mode turned off.

Applying the im() (or imag()) function to a real vector now results in
a vector with each component equal to 0.  Previously, the return was the
same as the real vector.

Fairly extensive revision of the core math functions, with a few small
bugs fixed.  New functions:
asin
acos
atan
asinh
acosh
atanh
These functions should work properly with complex arguments.  The previous
atan worked on real values only.

New vector functions, unless noted these use only the real part of a complex
argument and provide real output.
j0    Bessel function order 0
j1    Bessel function order 0
jn    Bessel function order n (*)
y0    Modified Bessel function order 0
y1    Modified Bessel function order 0
yn    Modified Bessel function order n (*)
cbrt  Cube root
erf   Error function
erfc  Complement error function
gamma Gamma function

The functions marked (*) take a complex argument.  The integer value of the
real part is the function order, the imaginary part is the function
argument.  If a real argument is passed, the 0'th order is assumed, and the
real value is passed as the argument.

New main commands:

setscale [plot or vector] [ vectors...] vector

This command is used to set the vector used as a scale when plotting other
vectors.  Each plot has a default scale, which can be set with this command.
Each vector has a scale variable, which if set will override the default
scale of the plot.  These also can be wet with this command.  This command
takes as input the names of a plot and a new scale vector in that plot,
or the names of vectors from the current plot.  The wildcard forms using
"all" and the plot prefix form plot.vector are not alloed in this command.
If only one argument is given, i.e.
    setscale vector
then vector is assigned as the default scale of the current plot.  The vector
must already exist in the current plot.

If two arguments are given, the first argument is initially interpreted as the
name of a plot, and the second argument is the name of a vector in that plot
to use as the scale, i.e.,
    setscale plot vector
where plot has names like "tran1" or "ac2" and the vector exists in that
plot.

If the first argument is not a plot name, or there are more than two arguments,
the arguments are expected to be vectors in the current plot, and the last
vector will be assigned as the scale for the other listed vectors.

The scales assigned to vectors can be removed by assigning the vector
that is the current default scale for the plot, or the scale vector
name given can have the special names "none" or "default".  The scale
for plots can't be removed, since a plot must always have a default
scale (if any vectors are defined).

The "let" command without arguments lists the vectors anw will show the
scales, if any.


remove vector [...] *** redefined unlet ***

This command will delete the vectors listed as arguments.  The current
plot is assumed, though the plot.vector notation is accepted.  The
names can be "all", indicating that all matching vectors should be removed.
If the vector name is "all", the plot is cleared.  Giving "all.all" will
clear all plots (not very useful).  To delete a plotm use the destroy
or free commands.

The Delete button in the Vectors tool now works.

Although it may not be apparent to the user, the mathmetical subsystems
used for vectors and for expression evaluation in voltage/current sources
are completely different.  The source expressions work with real scalars
only, whereas the vector expressions generally support complex numbers.

The following functions are now accepted in source expressions:
j0(x)
j1(x)
jn(n, x)
y0(x)
y1(x)
yn(n, x)
erf(x)
erfc(x)
cbrt(x)
deriv(x)

The functions have the same meaning as the vector functions of the same
name.  The calls to jn, yn require two arguments, unlike the other math
functions.  The first argument is the (integer) order, the second is the
real argument.

The deriv function will differentiate the parse tree with respect to the
variable "x", which is set to time intransient analysis (see the info on
dependent and independent sources).  This is completel unlike the deriv
function for vectors, which performs a numerical differentiation with
respect to some scale.  Differentiating the parse tree gives an analytic
result which is generally more accurate.

the source command is now Internet aware, i.e., if a given filename has
an http:// or ftp:// prefix, the file will be downloaded from the internet
and sourced.  The file is saved as a temporary file, so if a permanent local
copy is desired, the edit or listing commands should be used to save the
circuit description to disk.

In the WRspice help system, anchor references to files with a ".cir" extension
will be sourced into WRspice. 

missing documentation
During a "pure" DC sweep, i.e., not part of a chained analysis, the
"x" variable is set to the voltage of the swept source, or the first
swept source if there are two.  For "independent" sources (not
e,f,g,h) other than the swept ones, if an expression is given, the
output of the source will be the result of the expression where the
input "x" is the swept voltage, rather than time as when in transient
anslysis.  However, if the source line has a "dc" keyword and optional
following constant value, during "pure" dc analysis the source will
output the fixed value, or zero, if the value is omitted.  However, in
"pure" dc analysis the "tran" functions generally return zero.  The
exceptions are pwl(), table(), and interp().  These three functions
return values, but with the swept voltage ("x") as the input (in the
case of table() the input is explicit anyway).  For "dependent"
sources (e,f,g,h) the "x" is the controlling voltage or current as in
transient analysis.  Again, if a "dc" keyword appears, the output will
be fixed at the given value, ignoring the controlling variable.

In a chained analysis, the "x" variable will be that of core analysis. 
Thus, for a chained transient analysis, "x" is time, as in the
unchained case.  Since the funtional dependence is inoperable in any
kind of ac small-signal analysis (ac, noise, transfer function, pz,
distortion, ac sensitivity) "x" is not set and never used.  In "op"
analysis, "x" is always numerically zero.  The same is true in dc
sensitivity analysis.

------------------------------------

Fixed hash function to work with 8-bit chars.

if a .measure line was given with a form like
.measure ... when 'v(x)'='expr' ...
The program would crash.  This is now accepted.

not documented?
the single-quote substitution is suppressed to the left of an '=' sign.  The
single quotes are ignored in this case.

If "special" vectors, i.e., those whose name starts with '@', were put
intp .save lines, and a chained analysis was run which keeps all data points,
such as margin analysis with .measure lines used, there was a
problem with bad memory pointers.

In the type a chained analysis mentioned above, the intermediate temporary
vectors were not being freed until the end of a trial.  This could add
up to huge transient memory usage.  The garbage is now cleared after each
data point, as it is in normal analysis.

-------------------------------

The text editor pop-up would not pop up.

The printing interface should almost work now.  Microsoft makes something
as simple as printing into a complex mess.  The programs whould now
obtain a list of available printers from the operating system, one of
which is printed in the "Print Command" entry area.  This area is now
not editable, except in "To File" mode.  Instead, a spin-button to the
right cycles through the available printers.

All formatting is done in the program's printer drivers, and the result
is sent to the printer as "raw" data.  This means that the selected
printer *must* understand the format.  In practice, this means that the
printer selected must be a PostScript printer, and one of the PostScript
formats used, or the printer can be an HP Laserjet, and the PCL format
used, etc.

----

the power operator '^' was not working correctly for non-scalars.

fixed numerical bug in transformation for Smith plots.

Fixed a few small bugs in printing margin analysis plots
1) plotting with selections would lead to odd behavior and instability.
2) plotting with selections caused cells not to appear in postscript line
   draw mono plots.
3) selected cells were opaque black boxes.

Selected cells now cause no problems in printing margin analysis results,
and are shown in reverse video in monochrome plots.

Slight cosmetic fix to plots, to avoid a situation where the grid lines
were slightly too long.

Arcs are now supported in all plot drivers (used for Smith and Polar plots).

Arcs in PostScript line draw now use floating point so they look much
better.
---------------------------------------------------------------------

Consider the following script:

    title
    .control
    let x = 1
    while (x < 5)
        source circuit.cir
        run
        print x  
        x = x + 1
    end

Previous behavior

This will only work when started with the current plot being the
constants plot.  The vector x is defined in the constants plot.  The
run changes the current plot, but x is still resolved into the
constants plot, since the constants plot is always searched.  Once a
vector is defined in the constants plot, it can not be removed, so
repeated runs of the script will always work.

However, if the initial plot was not the constants plot, x would be
defined in that plot, and the script would fail when x is accessed
after the run.

Bug Fixed:
The vector was created in the current plot, even if it existed in the
constants plot.  So x = x+1 would be set to 2 in each new current plot
in the example, and the "real" x in the constants plot would never be
incremented.

Current behavior   

Now, before executing a script, the current plot is saved in plot_cx,
which is searched after plot_cur when resolving vectors.  When the
script ends, plot_cx takes the prior value, which is zero at the top
level.
-----------------------------------------------------------------

Windows Only
If a plot window was deleted while it was being drawn into, the program
would crash.  This includes the case when the Dismiss button was pressed
while the window was partly obscured by another window, since the window
would be in a drawing state when deleted.

Windows Only
The File Selection pop-up (from the Open button in the File menu) would
not have the correct height when it first appears.

Windows Only
The extra button in the Path Files Listing pop-up is now gone.
-------------------------------------

Fixed a bug that could potentially crash the program when plots are
freed.

---------------------------------

In noise analysis, a specification like
    .noise v(3,2) Vin dec 10 1k 100G
would produce output vectors with names like
    3,2:dens
Unfortunately, references to these vectors fail since the name is
interpreted as a complex number, unless quoted, for example as
    plot "\"3,2:dens\"" , or
    plot ("3,2:dens")
In this release, the output vector name has been changed to forms like
    v3_2:dens
which can be referenced directly.
--------------------

If the spice file for a margin analysis contained ".save @device[param]" lines,
the program would probably crash during margin analysis.  This should be
fixed, now.

The scaling of the margin analysis plots was not quite right under some
circumstances, obscuring the top margin.

Removed Versatec support.  This was never really working, and can cause
program crashes.  The WRspice plot rendering engine does not support
the cmyk color conversion and multipass segmented rendering needed for
Versatec.

The hardcopy command was broken, fixed.

The description of the hardcopy command in the help and manual is wrong.
If no plotting arguments are given, the arguments are the last entered
for a plotting command (plot, asciiplot, hardcopy, etc).  If there
are none, an error results.

if -f filename is given, the plot goes to the file only, and is not sent to
the printer.
-------------------

Major audit of tools code.  Many small bugs fixed. The pop-ups now remember
prior state.
------

The Control-C (copy) function of the text editor and similar pop-up was not
working since Control-C is trapped as a simulation-interrupt character.
Now, Control-C is not trapped when the editor or other text witdows have
the focus, so the copy function should work correctly.

Major update of the Verilog system
--------------------

Fixed a bug in parsing subcircuit calls with parameters.

Fixed misc bugs in subckt expansion.

Added examples:
prbs.cir    Illustrates Verilog blocks
jjpulse.cir Illustrates .measure lines

Fixed a bug related to gtk themes.  If the gtk theme engine is installed
on the system, then all gtk-based applications, including WRspice and
Xic, should respond to the setting of different themes, meaning that the
visual appearance can be changed.  Only Linux provides the gtk theme
engine.  This can be installed by the user on Solaris and FreeBSD systems.

This capability was not working, but should now work with the present
release.

fixed a bug:  The following input could crash the program

   foo
   .exec
   free a y
   .endc
   (circuit lines)

The free line (and similar for the destroy command) would destroy the
current plot while still in use, causing instability.  This should no longer
be a problem.

Fixed bug: For some plots, it was impossible to switch from log to linear,
then back to log plotting of the X scale.

The complex sqrt function now always chooses the solution in the upper
half plane.  Previously, the solution returned was somewhat arbitrary.
-----------------------------------------------------------------

Update to varilog system.

Improved Ctrl-C handling, should no longer produce program instability.

Fixed a memory corruption bug that could be triggered by a garbage
input file.
-------------------------------------------------------------------

Fixed problem in subcircuit expansion function that would fault on input
with extremely long logical input lines.

New feature: it is not possible to use tables in AC analysis.

.table line: .table table_name [ac] ....
The optional ac keyword will specify that the table is for use in AC
analysis.  In this case, the ordinal variable is taken as frequency (a
real number).  The table values are complex, i.e., two numbers, the
real followed by the imaginary part.  Any tables referenced must also
have "ac" specified.

general sources

The "ac" specification of a V or I source now has the general form
  ac [ mag [phase] | table(name) ]

The table construct must give the name of a table with the "ac" keyword
given.  In this case, the output of the source in ac analysis is frequency
 dependent,
with the value at a given grequency interpolated from the table.

independent sources

if "ac table(name)" is given, the transfer function at a given frequency
is obtained from the table, in ac analysis.

It is now possible to give a complex gain coefficient to these sources.
The imaginary part is ignored except in ac analysis.  The imaginary part
can follow the real part, when specified as a number without a keyword.
If the "gain" keyword is given, only the real part is taken.


The focus should now revert to the console after a window pops up, avoiding
an annoyance with certain window managers.

Xic too!
If the Text Editor was started with a filename without a path, the
File Selection pop-up from the Open button would come up empty.

The fft/ifft functions have changed:
-  fft() returns only the positive frequency components in the vector.
  The negative frequency values are complex conjugates of the positive
  values, since the time signal is assumed real.
- ifft() returns a real vector, i.e., the frequency domain data is
  assumed to have come from a real time signal.

The "dependent" sources, i.e., the devices keyed by e,f,g,h now have
the capability of using frequency-domain transfer data in transient
analysis.

If an ac table is given for the device, and there is no dc/transient
transfer value given, then the ac data will be used in a convolution
procedure during transient analysis.  This is somewhat experimental
and may be prone to numerical difficulties, so the user should be
careful.
------------------------------------------------------------------

Windows only
The Save button in the plot windows would crash the program
re-release
------------------------------------------------------------------
WRspice no longer recognizes XIC_FUN_CMD, XICNOGDB, XICNOMAIL,
now recognized are SPICE_FUN_CMD, SPICENOGDB, SPICENOMAIL.

Fixed a problem with running Xic from the Edit menu.

The internal path the wrspice was screwed up in win32, aspice broken.

New predefined set variable: xicpath = the path to the Xic executable

.options savecurrent now works
ditto maxdata, checkiterate noshellopts

Previously, the user had control (via a text editor) of which tools
appeared in the Tools Menu and in which order.  This is no longer true.
The problem is, if a new tool is added, it will not be visible unless
the user edits or deletes their initialization file.  Now, all available
tools will be listed, in a factory-set order.  The positions and
initial activity status of the tools can still be set, as before.

There is a new Tool Font menu item in the Tools meno.  This sets the
font used in the text areas of the various tools.  Pressing Apply will
update the fonts in the visible tools immediately.

date string in plots, check (overwrites)

new set keyword: toolfont
new toolfont entry in Commands/General

audit to incorporate const

WRspice now looks for startup file in the HOME directory, i.e the directory
indicated by the HOME environment variable.

In Windows, the startup file name is now ".wrspiceinit" as in unix.  It
used to be wrspice.rc for no good reason.

WRspice no longer uses the gdbexec script.
The mfbcap file is gone.

make tool windows fixed size

The BSIM2 model would not work unless the "M" parameter was specified.
The default value was effectively 0.

Fixed some bugs in the .table functionality, added "tab.cir" to the
examples.
-----------------------------------------------

The device library now contains ufsoi-7.0 as mos level 10.
The documentation for this model can be found on the web site.

mos level 49 is now recognized as bsim3v2 for Hspice compat

If a .subckt line has one node of one character, and parameters,
such as ".subckt sname 1 val=2" it would not parse correctly.
-----------------------------------------------

The Linux 2.2.10 distribution file contained the wrong device library.
fixed 8/14/02

Fixed bug in reporting version, reported "Linux" for "Linux2" which
would fool the wr_update script.

Fixed bug:  A current source with an unconnected node would very likely
cause a program crash.

The focus should not revert to the error window when it pops up.
---------------------------------------------------

The plotname.varname vector referencing syntax was not working when
varname starts with '@'.

One can now use curly brackets as delimiters for shell variable
references, in the manner of the C-shell.  That is, a reference
to a shell variable can take the form $var or ${var}.

For example:

  set plot = $curplot
  let n = ${plot}.v(10)

Without the curly brackets, the variable substitution would fail bacause
of the adjacent extra characters.  Note that one could also use
  let n = $plot{.v(10)}
which works due to global expansion, which was available in prior releases.
-------------

Fixed memory use problem which would occur when the Points button in plot
windows was used.

Number of traces allowed to use the "separate" mode increased to 10 from 8.

WRspice would not read rawfiles containing unitless variables.

New utility: printtoraw

This converts the data in files produced by the print command into
the rawfile format, which can be plotted.  This works only for print
files in the standard columnar form.

Usage: printtoraw [printfile]

The argument, if given, is assumed to be a path to a file that was
produced by the WRspice print command through redirection.  If no
argument is given, the standard input is read.  The data are converted
to rawfile format and dumped to the standard output.

Example:

wrspice> run
wrspice> print v(1) v(2) v(3) > myfile
wrspice> quit

bash> printtoraw myfile > myfile.raw

wrspice> load myfile.raw
wrspice> plot all

in graph.cc gr_dv_set_trace(), suppress interrupts during draw of
multi-dim trace.

Fixed an obscure bug that occurs if a node name is the name of one of
the predefined constants, and it is used as one of the control nodes of
a controlled source.  The node name would be changed internally to
a string representing the constant's value, which would cause bizarre
error messages.
-------------------------------------------------

New buttons on main toolbar: Run (green arrow) and Stop (red X).  Pressing
the Run button is equivalent to giving the "run" command without arguments.
Pressing Stop is equivalent to pressing Ctrl-C, i.e., any running simulation
is halted.

The first line of the toolbar display is a little different.  There now is
an indication of status: "idle", "running" and "stopped".  The elapsed
time is now measured from the last status change.

A voltage source with both terminals grounded would cause memory corruption
and possibly program crashes.

If both voltage nodes of an inductor or voltage source are grounded,
the branch node is not created (fix above).

Added test for node count/matrix size consistency in NIreinit()/

Fixed some bugs and oddities in the drag/drop features of plots:
  1) copying the date string no longer caused gross strangeness.
  2) fixed potential fault when copying traces.

The show command will now accept wildcard "globbing" (using ?, *, [], {})
in both the device/model name and parameter fields.

Added the EKV mos model as level 44.

Added .elif to .if/.else/.endif

Fixed a spurrious error message when using .param and .if.

wordlist sorting modified so that a list like (xx1, xx10, xx2) would be
ordered as (xx1, xx2, xx10).
-----------------------------------------------------------------------

function dependence was broken for the "dependent" sources, i.e. constructs
like e 1 0 2 0 10*x
would always return 0.

There is a new unified parser that handles text parsing for most devices.
This should be invisible to the user, except that it avoids some potential
bugs with devices with variable contact numbers (such as SOI mosfets)
in subcircuits.


The Parker-Skellern JFET model from Macquarie University in Australia
has been added as level=2 for JFETs.  Information on the "PS model" is
available in the documentation archive on the web site.
http://www.elec.mq.edu.au/cnerf/spice/spice.html

Added a new command to WRspice:

spec start_freq stop_freq step_freq vector ...

This is based on a Spice3 spec command by Anthony Parker of Macquarie
University in Sydney Australia, which is available as part of the patch set
from http://www.elec.mq.edu.au/cnerf/spice/spice.html.

The spec command will create a new plot consisting of the Fourier
transforms of the vectors given on the command line.  Each vector
given should be a transient analysis result, i.e., have time as a
scale, and each should have the same time scale.  The Fourier
transform will be computed using the frequency parameters given, and
will use a window function as given with the specwindow variable.

Associated variables:

These variables control operation of the spec command.  Each can be set
with the set command, or equivalently form the Foruier tab of the Commands
tool.

specwindow
   This variable is set to one of the following strings, which will
   determine the type of windowing used for the Fourier transform in
   the spec command.  If not set, the default is "hanning".

    bartlet        Bartlet (triangle) window
    blackman       Blackman order 2 window
    cosine         Hanning (cosine) window
    gaussian       Gaussian window
    hamming        Hamming window
    hanning        Hanning (cosine) window
    none           No windowing
    rectangular    Rectangular window
    triangle       Bartlet (triangle) window

specwindoworder
   This can be set to an integer in the range 2-8.  Thiw sets the order
   when the gaussian window is used in the spec command.  If not set,
   order 2 is used.

spectrace
   This enables messages to be printed during Fourier analysis with the
   spec command, for debugging purposes.

!!!! generalize SourceNodeCount(), link fails in msw
no longer needed, subckt.cc moved to inp/inpsubc.cc

check single-quote expansion

Added the Southampton Thermal Analogue SOI MOSFET (STAG) model release 2.6
as level 33.  This is a model developed under Prof. Bill Rudman-White at
the Southampton University Microelectronics Centre in the UK.  More information
can be found on the STAG web page at http://www.micro.ecs.soton.ac.uk/stag/.
The manual is also provided in the documentation directory of the Whiteley
Research web site.

M parameter in help

vectors that were created with the load command would be freed (improperly)
under some circumstances, such as if "plot all" was given, leading to a
likely program crash.

Put back bsim32 as level 7

Changes to show -D and show -M.  If these commands are given, only the device
or model info is printed for each device or model (both for show -DM).
Previously, all the parameters were shown also.  If an argument is given, the
parameters are listed as before, e.g., show -D m60 will list the parameters
of the level 60 mosfet device.

Windows Only
If one resizes a window twice, before plotting is finished, strange things
would happen.  In NT, everything would be fine, except that none of the
WRspice windows could be moved or resized.  On other versions of Windows,
it is suspected that a program crash would occur.  This has been fixed.

Windows Only
Lots more colors are now available by name from the Set Color pop-up.
In particular, all of the names from the X-window system are recognized.
Previously, only a subset of these colors were available.

Windows Only
The colorN variable, and the entries in the Colors tool, can now take
the form #rrggbb, i.e., HTML-style color specification, where rr, gg, bb
are the hex values for the red, green and blue component of the color.

----------------------------------------------------------
* In batch mode, printing of operating point info (.op line) was not
  working right.  Only nodes mentioned in .print, .plot, etc.  cards
  would be printed, and the first such node would not be printed since
  it was incorrectly assumed to be the scale.  If only one node was   
  listed, the program would crash.  Now, all circuit nodes and
  currents are printed.  Note that in interactive analysis, the .save
  and save directives will be ignored in a "op" plot.  Operating point
  analysis will always save all node voltages and branch currents.   

* Windows Only
  Batch mode was not working in Windows, usually crashing.  This
  should be ok now.

Giving the show command with -d, -m, or no - option, and no device list,
would cause a segmentation fault.

Fixed a bug in the Verilog block destructor that would cause memory
corruption and program crashes.

Arguments to the print, plot, etc commands that are "strange" vector
names should now be correctly recognixed as vectors.  Previously,
if a name looked like an expression, the command would probably
fail with a parse error, or give an unexpected result.

For example:
   let 1+0 = 2
   let
     (lists vectors, including
      1+0                 :    real, 1 long)
   print 1+0
      1+0 = 2.000000e+00

In previous releases, the print line could be
   print ("1+0")
The parens and double quotes were necessary to "hide" the expression
and enforce interpretation as a vector name string.

There is a side-effect which is close enough to being a feature that
I'll keep it in for now.  If an argument is a node name, the value
V(node_name) will be understood.  For example, if a vector V(1) exists,
then "plot 1" is equivalent to "plot V(1)".  If you really want to
plot the number 1, use "plot 1.0", for example.
---------------------------------------------------------

Fixed bug:  Under some circumstances 0-length vectors would cause seg
 faults when plotting.

stop at XXX was broken

Fixed condition which would cause faults if a vector was changed during
simulation or during a pause.  For example:
   stop at 50
   run
   (simulation stops, vector v(1) was created)
   let v(1) = 1
   resume

This would probably crash the program if v(1) was plotted or otherwise used.
Now, this should be safe, but there should be no reason to do this, except
by accident.

A change in the last release that was meant to preidentify vector names
that might be parsable as expressions caused serious problems and was
removed, except in the case where the vector name is the only token in
the line.
   Example

   let 1+1 = 4   (define vector named "1+1")
   print 1+1
   (prints "4.000000e0", no quotes needed since only 1 token)
   print 1+1 1
   (prints "2.000000e0 1.000000e0", interprets first token as expression since
     there are two tokens)
   print "1+1" 1
   (prints "4.000000e0 1.000000e0", quoted first token taken as vector name)

Fixed problem in subckt expansion, model names were sometimes not
translated.

Fixed bug: if duplicate vectors appeared in the internal save list, the
simulation would crash.  Example:  if there is a node "a", then if both
"iplot a" and ".save v(a)" were in effect, the simulation would crash.

The logic wasn't quite right for some of the yes/no prompts.  This
logic should now be consistent.  Such prompts always have the form
  
   Ask a question [y]?

or

   Ask a question [n]?

In either case, the first non-space character of the response being y,
Y, or 1 means "yes", and n, N, or 0 (zero) means "no".  Any other first
 character (including no response) gives the default response, i.e. 
 [y] or [n] as in the prompt.

As a side effect of recent changes, giving a node name where a vector was
expected was the same as giving the vector name v(node_name).  Thus,
"plot 1" would plot v(1) if it exists, or the number 1 if it doesn't.

This has been partially reverted, since common forms like

   let vec = 4

would not work as expected if a vector v(4) exists.  Now, node names that
are unsigned integers are always treated like numbers.  Other node names
will imply the corresponding vector, as will double-quoted numbers
 (e.g., plot "2" is equivalent to plot v(2))

--------------------------------------------------

Big undate to the terminal handling functions related to command line
editing.

new command:
    mapkey [ -r [filename] | -w [filename] | keyname map... ]

This command us used to manipulate the limited key mapping that is available
in WRspice.  Only the keys that are used for command line editing are
mappable.  This is to account for "strange" terminals that may not send
the expected data when a key is pressed.

The following keys can be mapped:
Ctrl-A
Ctrl-D
Ctrl-E
Ctrl-K
Ctrl-U
Ctrl-V
Tab
Backspace
Delete
LeftArrow
RightArrow
UpArrow
DownArrow

Of these, the arrow keys and Delete are most likely to need remapping.

If no argument is given, the user isprompted to press each of these
keys, and the internal map is updated.  After doing this, the keys
should have their expected effect when pressed while entering a WRspice
command.

If -w [filename] is given, the present internal map will be saved in
the named file, or "wrs_keymap in the current directory if no filename
is given.

If -r [filename] is given, it will be read as a key mapping file, and the
internal map will be updated.  The filename, if not given, defaults to
"wrs_keymap".  If no path is given, it will be found in the current
directory or the startup directory.

If keyname map... is given, a single key in the internal map can be
updated.  The format is the same as the entries in the mapping file,
i.e., one of the names above, followed by one or more hex bytes of data.
The bytes represent the stream sent when the named key is pressed,
and will henceforth be interpreted as the pressing of that key.

Example:
After installing the latest X-window system, suppose one finds that,
when running WRspice in an xterm window, the
Delete key no longer deletes the character under the cursor in WRspice,
but instead injects some gibberish.  There are three ways to fix this:

1)  From the main xterm menu, find and click on the "Delete is DEL"
entry.

2)  Create a file named "XTerm" in your home directory, containing the
line
    *deleteIsDEL: true

3)  In WRspice, type "mapkey" and follow the prompts.  You can save the
new map, and add a line to your .wrspiceinit file to read it
when WRspice starts.

Unless WRspice can read the terminfo/termcap data it needs, it will
no longer allow command line editing mode, and a warning message will
be issued.  This probably means that the TERM and TERMINFO environment
variables are not set or bogus.

set noedit would freeze the keyboard under Windows.  This variable is
now ignored under Windows.

The qsort function in Sun's C library would seg fault mysteriously. 
This seems to be a bug in Sun's library.  A working qsort, borrowed
from the FreeBSD C library, is now used in builds for Solaris to avoid
this problem.

If the block name was omitted from a .lib line, s fault would result.

.subckt without a name would cause faults.
.subckt without args would cause faults.

Added mouse wheel support to all of the text listing tools.

------------------------------------------------

In the previous release, if there was trouble setting up the terminal
for command line editing,
WRspice would exit immediately with an error message.  This was not
intended.  Now, WRspice prints a warning and disables command line editing.

The term variable is now set to the terminal name.  If set in the
.wrspiceinit file, this will override the TERM environment variable,
or the -T option.

The text mode help which is supposed to be available when no graphics
is available wasn't working.  This has been fixed.
-------------

Fixed situation where subcircuit call syntax error would crash the program.

FIXME:  SPICE_ASCIIRAWFILE is ignored in batch mode.
ed hudson
done

ADD: support for .options scale/scalem

ADD: cmdline option for no graphics
added wrspice -dnone
---------------------------------------------------

Bug? Mark Johnson circuit, gauss function changes things

ADD: (Zebulum)  modify .tran spec so that the tstep is different in
different time ranges.
Qingguo asked for this too.

The .tran specification has been modified to allow for separate print
increments in different time ranges.  The full syntax is

.tran tstep1 tstop1 tstart tmax tstep2 tstop2 ... tstepN tstopN

This will simulate and save results from tstart through tstopN, where the
saved time increment is
  tstep1  tstart <= t < tstop1
  tstep2  tstop1 <= t < tstop2
  ...
 tstepN   tstopN-1 <= t < tstopN

Bug: the unlabeled dc value was being ignored on v/i lines.

Fixed bug in device library, 'A' (arbitrary source) device parser
would crash on certain syntax errors.
Note: leaving out the "v=" ir "i=" implies current source.

Sensitivity analysis was completely broken.  Now, an operating point
sensitivity run at least gives numbers.

---------------------------------------------------

Hspice aliases in bsim3
tref    tnom
cjm     cj
mj0     mj
pj      pb
php     pbsw

nqsmod in bsim3

Level 49 is now mapped to level7 (BSIM3v3.2).  Previously, level 49
was mapped to level 8 (BSIM3v3.2.4).  The earlier BSIM model is a better
match to the Level 49 implemented in Hspice.  Level 8 is a newer model,
but does not allow backward compatibility in the VERSION parameter.

---------------------------------------------------

Misc bugs fixed in .tf analysis.

---------------------------------------------------
XIC_SYSTEM_MALLOC changed to XT_SYSTEM_MALLOC

Command line editing didn't work in FreeBSD 4.9 since termcap file does
not define cursor backapace code.  Added internal hack around this.

Internal
Memory manager interface changed a bit:
   zeroing no done in malloc.c, operator new override gone.
   out-of-memory handled in memory_error_log()

-----
SPICE_EDITOR now supersedes EDITOR as it should.  Setting SPICE_EDITOR to
nothing or "default" implies xeditor.

todo: Fonts: show defaults somehow

TODO (Zebulum) extract Verilog description from circuit.
todo: check nosource (edit cmd)

wrspiced on msw?

add pwd command

The shell command was broken, would hang program.

redirected tags in seealse (help sys)

change maxdata default

The Windows release 2.53 seg faulted on startup since memory was not being
cleared.

Major cleanup/revision of the help text.
------------------

jfet/jfet2 instance kewords icvds icvgs DONE
mes off parameter RO? FIXED
bjt ic defined twice (OK)

show -D
show -M
In the listing, parameters that can be written but not read (with the
@device[param] construct) are now listed, with "NR" to indicate not
readable.  Previously, these parameters were not listed at all.

-----------

.save xxx in interactive mode vs save?  Update docs.

changed VT_XXX to VTYP_XXX to avoid msw conflict

set unixcom in msw under d: takes forever

fixed gdbexec to use Global.Bug_Addr (check this)

show -m all or show -m *  was listing device parameters and not model
parameters.

show -d * caused seg fault in EKV model code if EKV model used.

The bin model selection was inadvertently disabled in last release.
----

$#&xxx doesn't work!  $?& seems ok

Problem in jjoprng.cir:
   if expression operator vector
not parsed correctly, needs
   if "expression operator vector"
or
   if (expression operator vector)

This was due to some residual silliness from wrs2.2.46 where an attempt
as made to better handle vector names that could be interpreted as
expressions, e.g., "1+1".  The vector name interpretation should be
used if the name is preceded by a quoted token or it it is the only
token in the line.

!! fix manual
help, expressions keyword, $?& and $#& were reversed.

$#? now works when the vector i undefined.

The step1/step2 values in range analysis wre limited to 30.  There is
now no limit - the user is expected to be sensible.  A warning is given
if points > 10000.

Previously, the operating range/Monte Carlo analysis would abort if
an output file couldn't be opened because filaname.d00 - filename.d99
exist.  There is no linter a 100 file limit, and the integer suffix
can grow without bound.

see xic server auth mode notes
---------------

The echof function was not working quite right in range analysis, printing
before the data line was complete.  The echof output will now always appear
ahead of the data line in the output file.

The interation algorithm in one-dimensional operating range analysis was
not working correctly, all points would be checked.  Now, points inside of the
bounding PASS points are not checked, as in two dimensional analysis.  Give
"check -a" to test all points.

updated device library:
   MOS level 9 is now b3soi-3.2, replacing b3soi-3.0
   MOS level 14 is now bsim4.4.0, replacing bsim4.2.1

-----------------------

Change to the Save button in the Plot pop-up
  If the given filename has an extension that begins with "raw", the data
  are saved as a rawfile.  Otherwise, the data are saved as if from a
  print command.

  Previously, data were always saved in rawfile format.

TODO - ltra/pade models can't do RC?  Bad results with R > Z0.

select timeout 500us from 50000us, need tighter loop for d&d.
ramifications?

Adapted graphics to gtk2.

Added pixmap backing store to plot windows.

The positions of the help keyword listings for simdefs, etc are now saved.
The buttons that invoke these are now toggles that pop up/down the help.

TODO:  make print redirection work from circuit files:
    measure: print_terse > myfile
    *@ print xxx > myfile
    why doesn't *@ plot v(x) work at all?

Font selector popup has drop down selector.

All screen fonts are now saved in the .wrspiceinit file during an Update.

The xfont and toolfont keywords are no longer recognized.

New command: setfont font_num font_specifier

rewrote the shell escape "shell" command which wasn't working right,
exported CP.System to other system() calls.
check MSW!, need MSWtoolbar::ClosegraphicsConnection()

Fixed some problems with the transmission line model.
RC lines now work.

in plot windows: button1 + Shift = button2, button1 + Ctrl = button
----

The parameterization for subcircuits was not supposed to work for
model names, but for devices with an undefined node count, model name
parameterization would work, but subcircuit name expansion would not
be applied to other than the minimun node count nodes.  This has been
fixed by applying parameter expansion to the entire line past the name
token, before subcircuit name expansion of the tokens.  Thus, the
model name, as well as node names, can now be parameterized, for any
device.

* parameterized nodes demo
.subckt dx a b dplus=a dminus=b
d0 dplus dminus d
.ends
.model d d
v1 1 0 sin(0 1 1Meg)
r1 1 2 1k
x1 2 0 dx
x2 2 0 dx dplus=b dminus=a
.tran 1n 5u 0 1n

-----------------------------

Starting without graphics would probably crash.

The .checkall keyword in a .exec block was being accepted as ".check".

ADD MODEL TYPE NAMES TO MANUAL!!  These are missing, e.g. csw/sw
done

trying to use model type csw produced a spurious error message:
"Unknown keyword: csw"

The Print button in plot windows under Windows was broken.
-------------------------------

TODO:  make verilog use the sourcepath for opening data files.
DONE.

Added ".spinclude" as a synonym for ".include".  Xic expands .include
lines, not .spinclude lines.

TODO: some means of setting plot window geometry.

New variable: plotgeom
This variable sets the size of subsequently created plot windows.  It
can be set as a string "wid hei" or as a list ( wid hei ).  The wid
and hei are the width and height in pixels.

For Microsoft Windows, the default width and height are 500, 300 and
these apply to the whole window.  Due to Microsoft's silly and
unnecessary conversion to "dialog units", the actual pixel size may be
slightly different.

For others, the default width and height are 400, 300 and these apply
to the plotting area only.

The acceptable numbers for the width and height are 100-2000.  In the
string form, a non-numeric character can separate the two numbers, e.g.,
"300x400" is ok.
---------------------

TODO: add wrspice.log to log all error messages.
second thought, nix this

TODO: make -dnone work under Windows.
done.

TODO: save more errors (...MAX_ERRORS mswtoolb.cc).
done, 100->200

Bug fixed:  in Jspice3 emulation mode, (-j command line option), running
a job would crash the program.

Update docs:  In Jspice3 emulation mode, errors are printed in the
console window, and not in a separate pop-up.
----------------------------

The plot command now responds to the plotgeom variable set in the
.options line of the current circuit.

Previously, all .param statements were evaluated before any .if/.else/.endif
processing, so all the .param statements would be seen, including those
in ignored blocks.  Now, parsing is a little more intelligent, and
.param statements in ignored blocks should be ignored.

---
When a variable is set in a .options line, it becomes visible almost
like it was set with the set command, when the circuit is the current
circuit.  In the variables listing (set command with arguments or
Tools/Variables), these have a '+' in the first column.  However, they
are not part of the normal variable table, and they only "work" in
special cases.  For example, they will work in variable substitution,
but won't affect the defaults in most commands, such as the plot
command.  If the same variable is also set with "set", the "set"
definition will have precedence.  The variables set with .options
can't be unset.

Should the circuit vars be generally visible?

Pro:
Variables listed in the set or Tools/Variables listing, will
always have effect.

Can set any variable in .options line, and have it always "work".

Con:
Circuit variables can't be unset, so a variable in the current circuit
will always have effect, desired or not.

Changing this would possibly adversely affect existing users who expect
the current behavior, and might break scripts.

So, let's compromise.  There is a new variable:
    cktvars (boolean)
When this variable is set, with the set command, circuit variables set
in the .options line of the current circuit will be treated the same as
variables set with the set command.

Change:  Previously, when circuit variables were checked, sometimes they
were checked before "set" variables, sometimes after.  Now they are
always checked after.

The Tools/Shell panel contains an entry for "cktvars".

The Tools/Plot Defs panel contains an entry for "plotgeom" on page 1.
-----

todo: show -n, list devices connected to a node (Eric N).

Fixed bug: error messages were going to the console window instead of the
error message window.

new variable: noerrwin (bool)
If set, error messages go to the console terminal and not to a separate
window.

todo: add above to shell tool

Hi George,

Your vertph.mod uses an extension that is not presently supported in
WRspice - the use of subckt parameter 'AREA' in the single-quoted
expressions in the .model lines.  In WRspice/spice3, the .model lines
are parsed separately and don't know about the .subckt parameters.
I'll put on the to-do list to try and make this work.

The "special" current vector returned for resistors (@rxxxx[i] or
@rxxxx[c]) was returning incorrect values (v*v/r instead of v/r).

.if/.elif don't know about parameters given as subckt/instance args.
These and .param always have global scope.

The parameter (.param and subcircuit/instance assignemnts) handling has
changed.

  single-quoted exprs and params outside of .subckt blocks are expanded
  before variable substitution and subcircuit expansion.

  In .subckt blocks, expanded after variable substitution during
  subcircuit expansion.

  parameters defined in a .subckt or instance line always override
  parameters defined with .param lines.  Previously, the reverse
  was true.

  models defined within subckts can now use subckt parameters in
  the model text.

  
The @rxxxx[i] special variable would sometimes return an incorrect value.
The underlying bug may have also affected other special variables from
other devices.

The show command has a new option:
  show -n nodename [args [, params]]

This produces the same type of output as show -d, and the args and params
are the same as for -d.  In the present case, only devices that are connected
to the named node will be displayed.
    Examples:
     show -n 0               show all devices connected to ground
     show -n vcc r*,resistance  show the resistance of all resistors
                                connected to vcc
-------
todo: line wrap in error window?
done: error popup now has wrap-mode button (Gtk only)
does MSW wrap?

I find that you can't split a number token like
k3=2.806e+
+00
State in docs: '+' continuation adds a space between lines (as does SPICE3).

todo:If the error line is too long (.model line) the "Unrecognized parameter"
part gets truncated.
done: extended to 8K from 1K

Under FreeBSD, Linux, and OS X, error messages can be arbitrarily long.
Otherwise, the error messages are limited to 8Kb.
-----------------------

Previously, the .lib lines would be recognized only if the deck came
from a file, and not from the interprocess communication channel from
Xic.  There were other subtle differences due to independent processing
of these channels.  Now, the input processing is unified, so .lib will
work in all cases.

WRspice recognizes the spice command ".splib" as a synonym for ".lib".
This is for compatibility with Xic, similar to ".spinclude".  Xic will
expand .lib and .include lines in the deck before sending to spice,
so that the files are sought on the machine running Xic, not the machine
running WRspice, which may be diferent.  Xic will convert ".spinclude"
to ".include" and ".splib" to ".lib" before sending to WRspice, but not
expand the files.  In this case, WRspice will handle the file inclusions.

The (sp)include and (sp)lib lines can be freely intermixed.

---
The Poly(2) construct in sources did not work.
Note:  the Spice2 Poly() construct works by converting the Poly construct
to an expression.  Using the command "listing -e" will show the converted
expression, which can be useful for debugging, or to unwind the rather
cryptic Poly syntax.
---

in vl_sim.cc/step(), always keep a nonzero timewheel, potential crashes
otherwise.

Verilog $fopen for append in Windows did not work correctly, opened
with truncation.

Fixed subtle bug:  when running a circuit file with a Verilog block,
file descriptors used by Verilog aren't closed or flushed, so they may
appear incomplete unless the circuit is deleted (which flushes the
output queues).  On some operating systems, quitting WRspice would
cause loss of data.  Now, the files are flushed when a run is paused
and flushed/closed when the run finishes.

Fixed a subtle numerical bug that caused "missing" time points in
"hitusertp" mode, or when Verilog blocks are present.

---

The hardcopy functionality was completely broken.

The mos model auto-selection logic wasn't right.  If more than one
model matches, the most selective one is chosen.
----

Blank title lines were not being recognized.  This used to work in
earlier releases.  These are now accepted again.
============================================================================

Use cimatch instead of ciprefix to detect keywords.

.inc in now equiv to .include

.include now pushes to the directory of the target, if the target has a
directory path.  Thus, includes within the target file will resolve
relative to the target directory, instead of the initial cwd.

Fixed bug: the ~ (NOT) operator was broken, returned x ? 1 : 0.

Expression parser changes:
&& is the same as &  (AND operator)
|| is the same as |  (OR operator)
== is the same as =  (equality)
! is the same as ~ (NOT)
!= is the same as <>, >< (NOT EQUAL)

Level 54 mapped to level 14 (BSIM4.4.0)

updated the hash functions (hash.cc, new hash.h) to be dynamic hashwidth.

Updated all the paramsub stuff to use hash tables, for efficiency.

Parameter assignments can now be used to define functions.
.param func(a,b,c) 'expression'
This has the same effect as the define command.
note: function remains defined, provide circuit-specific functions?

An isolated '$' character in a line of SPICE input is now taken as a comment
start.  The '$' and the rest of the line is thrown away.

In expressions, '**' is now the same as '^' (power).

Expressions now support xxx ? yyy : zzz
There must be white space surrounding the ? :.

If there are more than one backslashes at the end of a (continued) line, they
will all be stripped.

VLvalue new return struct for GetVar, avoids fixed-length string buffers.

An integer followed by ':' is taken as the start of a node name, which
might break "x ? y : z" constructs.  If y is an integer, there must be space
before ':', or y must be in parens, of y can be given as a floating value.

".macro" is a synonym for ".subckt" (or value of substart)
".eom"  is a synonym for ".ends" (of value of subend)

modified tranfunc recognition to be a little faster and not fail.

Parser::Parser() now takes some flags, for more careful control.
When called from .param expand, tran func recognition is turned off
(but still can be called from devine.cc).  Node name <int>: hack is
also turned off.

numparse always returned 0 for <int>:, removed this.

new variable : errorlog (string).  When set to a file name, errors will
be written to the file.

new variable : dollarcmt (bool)
unset:
    ^$<space>         line is a comment
    ^;<space>         line is a comment
    <space>$<space>   rest of line is a comment
    <space>;<space>   rest of line is a comment
set:
    ^$         line is a comment
    ^;         line is a comment
    <space or ,>$   rest of line is a comment
    <space or ,>;   rest of line is a comment


parameter substitution.
    // For .param, .subckt, .model, subinvoke, device line:
    //   For each "p = v", call line_subst on each v, ignore the p's
    //   except as syntax elements.  I.e., update only the RHS of
    //   assignments.
    // For v/i source, .print, .plot, others?:
    //   Call line_subst on line.  This tokenizes and updates each
    //   token.

"--" unary minus is gone.

When given a list of expressions, such as arguments to print or plot,
terms like "v(1) -v(2)" will be interpreted as "v(1)-v(2)"  (one term,
the difference, instead of two terms).  In previous releases, one could
give "--" instead of "-" to coerce a unary minus.  However, this breaks
the parser in subtle ways and has been removed.  Instead, a semicolon ";"
can be inserted to explicitly enforce a token break:  "v(1); -v(2)".
 
Problem with this: the shell breaks the line at the semicolon.  Have to
use double quotes, of backslash quoting.

Double-quoting the tokens also works.

fixed array overrun bug in .param handling

Fixed bug in v_divide, failed for negative divisor.

Added bsim4.3.0 as level=54 MOS model.

--

New functions
These have been added for HSPICE compatibility.  Unlike the other math
functions, these take multiple arguments, and the comma separating the
arguments is taken as an argument separator and not the comma operator.

unif(nom, rvar)
    Returns a vector the same length as nom, complex or real as nom.

    Below, random() returns a random number between -1 and 1. 

    if nom is complex, var is complex:
    out[i].real = nom[i].real*(1 + random()*rvar[i].real/sigma)
    out[i].imag = nom[i].imag*(1 + random()*rvar[i].imag/sigma)

    if nom is complex, var is real:
    out[i].real = nom[i].real*(1 + random()*rvar[i]/sigma)
    out[i].imag = nom[i].imag*(1 + random()*rvar[i]/sigma)

    if nom is real, var is complex:
    out[i] = nom[i].real*(1 + random()*rvar[i].real/sigma)

    if nom is real, var is real:
    out[i] = nom[i]*(1 + random()*rvar[i]/sigma)

aunif(nom, var)
    Returns a vector the same length as nom, complex or real as nom.

    Below, random() returns a random number between -1 and 1. 

    if nom is complex, var is complex:
    out[i].real = nom[i].real + random()*var[i].real/sigma
    out[i].imag = nom[i].imag + random()*var[i].imag/sigma

    if nom is complex, var is real:
    out[i].real = nom[i].real + random()*var[i]/sigma
    out[i].imag = nom[i].imag + random()*var[i]/sigma

    if nom is real, var is complex:
    out[i] = nom[i].real + random()*var[i].real/sigma

    if nom is real, var is real:
    out[i] = nom[i] + random()*var[i]/sigma

gauss(nom, rvar, sigma)
    Returns a vector the same length as nom, complex or real as nom.

    Below, gauss() returns a gaussian random number with zero mean and
    unit standard deviation.

    if nom is complex, var is complex:
    out[i].real = nom[i].real*(1 + gauss()*rvar[i].real/sigma)
    out[i].imag = nom[i].imag*(1 + gauss()*rvar[i].imag/sigma)

    if nom is complex, var is real:
    out[i].real = nom[i].real*(1 + gauss()*rvar[i]/sigma)
    out[i].imag = nom[i].imag*(1 + gauss()*rvar[i]/sigma)

    if nom is real, var is complex:
    out[i] = nom[i].real*(1 + gauss()*rvar[i].real/sigma)

    if nom is real, var is real:
    out[i] = nom[i]*(1 + gauss()*rvar[i]/sigma)


agauss(nom, var, sigma)
    Returns a vector the same length as nom, complex or real as nom.

    Below, gauss() returns a gaussian random number with zero mean and
    unit standard deviation.

    if nom is complex, var is complex:
    out[i].real = nom[i].real + gauss()*var[i].real/sigma
    out[i].imag = nom[i].imag + gauss()*var[i].imag/sigma

    if nom is complex, var is real:
    out[i].real = nom[i].real + gauss()*var[i]/sigma
    out[i].imag = nom[i].imag + gauss()*var[i]/sigma

    if nom is real, var is complex:
    out[i] = nom[i].real + gauss()*var[i].real/sigma

    if nom is real, var is real:
    out[i] = nom[i] + gauss()*var[i]/sigma

limit(nom, var)
    Returns a vector the same length as nom, complex or real as nom.

    if nom is complex, var is complex:
    out[i].real = nom[i].real +/- var[i].real randomly
    out[i].imag = nom[i].imag +/- var[i].imag randomly

    if nom is complex, var is real:
    out[i].real = nom[i].real +/- var[i] randomly
    out[i].imag = nom[i].imag +/- var[i] randomly

    if nom is real, var is complex:
    out[i] = nom[i].real +/- var[i].real randomly

    if nom is real, var is real:
    out[i] = nom[i] +/- var[i] randomly

pow(x, y)
    Returns a real vector the same length as x.

    if x is complex, y is complex:
    out = x^y   (same as ^ operator)

    if x is complex, y is real:
    out = x^(int)y (same as ^ operator, but y is truncated to integer)

    if x is real, y is complex:
    out = x^y   (same as ^ operator)

    if x is real, y is real:
    out = x^(int)y (same as ^ operator, but y is truncated to integer)

pwr(x, y)
    Returns a real vector the same length as x.

    if x is complex, y is complex:
    out[i] = (sign of x[i].real)(mag(x[i]) ^ y[i].real)

    if x is complex, y is real:
    out[i] = (sign of x[i].real)(mag(x[i]) ^ y[i])

    if x is real, y is complex:
    out[i] = (sign of x[i].real)(abs(x[i]) ^ y[i].real)

    if x is real, y is real:
    out[i] = (sign of x[i].real)(abs(x[i]) ^ y[i])

sgn(x)
    Returns a vector the same length as x, complex or real as x.

    if x is complex:
    out[i].real = 1,0,-1 if x[i].real is >, =, < 0
    out[i].imag = 1,0,-1 if x[i].real is >, =, < 0

    if x is real:
    out[i] = 1,0,-1 if x[i] is >, =, < 0

sign(x, y)
    Returns a vector the same length as x, complex or real as x.
    The vector y is padded to the length of x if necessary, by replicating
    the highest value.
 
    if x is complex, y is complex:
    out[i].real = (sign of y[i].real)abs(x[i].real)
    out[i].imag = (sign of y[i].imag)abs(x[i].imag)

    if x is complex, y is real:
    out[i].real = (sign of y[i])abs(x[i].real)
    out[i].imag = (sign of y[i])abs(x[i].imag)

    if x is real, y is complex:
    out[i] = (sign of y[i].real)abs(x[i])

    if x is real, y is real:
    out[i] = (sign of y[i])abs(x[i])

tsin
texp
tgauss

The "tran" functions sin, exp, gauss have names that conflict with math
functions.  There seems to be no way to reliably distinguish the tran
vs. math functions by context, nor is it possible to rename the functions
without causing big compatibility problems.

Although the sin and exp functions are generally distinguishable except
for one unlikely case, with the additional arguments to the gauss function
for HSPICE compatibility, the problem is more acute.

To guarantee that the tran functions are used in an expression, they can
be called by the names "tsin", "texp", and "tgauss".

If sin, exp, or gauss use white-space delimiting in the argument list, then
they will be called as tran functions.  The math functions always use
commas to separate arguments.  Commas are also legal argument separators
in tran funcs.

The argument count is used to resolve ambiguity.

To resolve ambiguity, if comma argument separators are used, the math
function is assumed.

Note that almost all math functions (whith the exception of gauss and a few
others) take a single complex vector argument.  It is possible to give
these functions multiple comma-separated "arguments", but in evaluation
these are collapsed by evaluation of the comma operator:
    a,v  = (a + j*b)

So, sin(1,1) is equivalent to sin((1+j)), which returns a complex value.

In previous WRspice releases, sin(a,b) was always interpreted as the
tran sin function, which has a minimum of two arguments.  Presently.

sin(a,b)  -> math
sin(a b)  -> tran

If ambiguity occurs in a function spec for a V/I or dependent source,
the tran function is favored.

New variable: norandom (boolean)
When set, the math functions unif, aunif, gauss, agauss, and limit
return the nominal value, not a random value, when not doing Monte-Carlo
analysis.

--

Now checks for updates on program start in graphical mode.

new variable: nocheckupdate
This variable can be set in your .wrspiceinit file to suppress checking
for updates on program startup.

New command: passwd (no args)
Creates $HOME ./wrpasswd file

New command: wrupdate

New variable: installcmdfmt

New function: helpreset (no args)
Re-read the help database.

XXX George, plot trace limit
Done, now cay have up to 18 separable traces.

Work on dec sourcing functions, mo param sub into SpDeck.  This should put
param evaluation into Monte Carlo loop.

/*XXX
Procesing order
-- start DeckSource --   
read .param lines
handle .if, etc lines after param sub and var sub
conditional lines are gone, only in-scope lines remain

extract Verilog lines
extract .exec lines
extract .control lines

-- start SpDeck --
         
extract .param lines
param sub all remaining lines  
     
if (.exec lines) {   
    param sub exec lines
    execute exec lines
}
 
-- if no circuit lines return --
var sub .option lines
parse/set .option lines

var sub all lines

expand subcircuits:
    read and merge local .param lines
    param sub lines

-- return to DeckSource

if (.control lines) {
    param sub .control lines
    execute .control lines
}
*/

TODO:
  new variables to tools  DONE, both in General page of Cmds tool
  implement agauss, etc.  DONE
  check yn function, 2 args OK
  add auto-update code DONE
  make sure all paths are correct (gtkcmds.cc has /usr/local) OK
  update MSW Tools/Cmds/General page
  check new help text

-------------------------------------------------
output.cc
Modified error string printing to avoid possible array overrun.

Modified many error message outputs from the BSIM device models which
could cause seg faults if generated.

Modified the number parser to avoid using crummy pow() math function in
older (GLIBC-2.2.4, Red Hat 7.2) C libraries.  This was causing failure
of equality tests for forms like (1.00000e+00 == 1).  This affected the
Linux2 distributions only.

The Linux2 binaries, both Generation 3 and the final Generation 2.5
distributions, were generated with a new custom-installed compiler,
the installation of which was necessary to build Generation-3
programs.  The original stock Red Hat compiler can not handle some of
the C++ constructs in these programs.

Unfortunately, the new compiler was not predefining the macro for
setting up the floating-point math properly.  All Linux2 distribution
files that were downloaded the week of May 19, 2008 are suspect and
should be updated.  These binaries will have subtle math errors which
can break scripts or otherwise cause trouble.

.ind/.include [H] path

If H/h given, the dollarcmt and norandom variables will be set during
the file read.  XXX norandom needed?

In Monte Carlo:
1.  .params are recomputed at the start of each trial.
2.  parameters are known in .exec block if not bound, but not in .control block
    ie, params known in .exec block if it is read in the smae logical unit
    (same file, or through .inc) as the circuit.

agauss wasn't working correctly.

new example: jjmc1.cir
This uses .param defines to generate random values.

new keyword: .norandom
-----------------------------------------------

GJC:  hspice bsim3 params, flag to quiet all hspice warnings?
