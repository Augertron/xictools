dnl Configure input script for Mrouter.
dnl Process this file with autoconf to produce a configure script.
dnl $Id: configure.in,v 1.14 2017/02/18 19:46:24 stevew Exp $

dnl ***
dnl *** Initialize
dnl ***

AC_INIT(configure)

linux32=no
if test "`uname -m`" = i686; then
    linux32=yes;
fi

dnl Override hack for 32-bit build on x86_64 machine.
linux32_64=no
if test $linux32 = no; then
    if test "`uname -m`" = x86_64; then
        if test -f BUILD-32; then
            CC="gcc -m32 -march=i686"
            CXX="g++ -m32 -march=i686"
            GCC=yes
            linux32_64=yes
            linux32=yes
            export PKG_CONFIG_PATH=/usr/lib/pkgconfig
        fi
    fi
fi


DATE=`/bin/date`
VERSION=0.0.1
AC_SUBST(prefix)
AC_SUBST(DATE)
AC_SUBST(VERSION)

dnl ***
dnl *** Setup configure args
dnl ***

dnl --enable-m64
dnl enable addition of -m64 gcc option to force 64-bit output
m64="no"
AC_ARG_ENABLE(m64,
    [  ]--enable-m64            enable 64-bit build,
if test $enable_m64 = yes; then
    m64="yes"
fi
)

dnl --enable-mingw[=/path/to/mingw]
dnl enable mingw (Win32), the default on MSW systems, cross tools otherwise
mingw="no"
if test x"$MINGW" = x; then
    mingw_dir="/usr/local/mingw32"
else
    mingw_dir="$MINGW"
fi
AC_ARG_ENABLE(mingw,
    [  ]--enable_mingw=DIR      build using mingw path optional,
if test $enable_mingw != yes -a $enable_mingw != no; then
    mingw_dir=$enable_mingw
    mingw=yes
elif test $enable_mingw = yes; then
    mingw=yes
fi
)

dnl --enable-mingwlib=/path/to/mingw_libs
dnl this sets a -L/path to extra libraries used with mingw
mingwlib=
AC_ARG_ENABLE(mingwlib,
    [  ]--enable_mingwlib=DIR   specify path to extra libs for mingw,
if test $enable_mingwlib != yes -a $enable_mingwlib != no; then
    mingwlib="$enable_mingwlib"
fi
)

dnl --enable-oa=/path/to/oa/libs/
dnl enable Open Access
OA_DEF_LOC=/usr/local/cad/OA-22.04
with_oa="no"
AC_ARG_ENABLE(oa,
    [  ]--enable-oa[[=path_to_oa]]             enable link to OpenAccess,
if test $enable_oa != yes -a $enable_oa != no; then
    oa_loc=$enable_oa
    with_oa=yes
elif test $enable_oa = yes; then
    with_oa=yes
    oa_loc=$OA_DEF_LOC
fi
)

dnl --enable-valgrind
dnl should valgrind be enabled
valgrind="no"
AC_ARG_ENABLE(valgrind,
    [  ]--enable-valgrind       enable valgrind,
if test $enable_valgrind = yes; then
    valgrind="yes"
fi
)

dnl --enable-profiling
dnl should profiling be enabled
profiling="no"
AC_ARG_ENABLE(profiling,
    [  ]--enable-profiling      enable profiling,
if test $enable_profiling = yes; then
    profiling="yes"
fi
)

dnl ***
dnl *** Check operating system and build environment
dnl ***

sys_os=`uname`
case $sys_os in
CYGWIN*)
    mingw=yes
    sys_os="CYGWIN"
    CC=$mingw_dir/bin/gcc
    CXX=$mingw_dir/bin/g++
    GCC=yes
    TOOLKIT="Win32"
    WINDRES=$mingw_dir/bin/windres
    RESOURCE=resource.o
    AR=$mingw_dir/bin/ar
    RANLIB=$mingw_dir/bin/ranlib
    LD=$mingw_dir/bin/ld
    # static link avoids libwinpthread-1.dll dependence
    WINPTHREADFIX="-static"
    ;;
*)
    AC_PROG_CC
    AC_PROG_CXX
    TOOLKIT="Gtk2"
    if test "$AR" = ""; then
        AR=ar
    fi
    if test "$RANLIB" = ""; then
        AC_PROG_RANLIB
    fi
    if test "$LD" = ""; then
        LD=ld
    fi
    ;;
esac
AC_SUBST(TOOLKIT)
AC_SUBST(WINDRES)
AC_SUBST(RESOURCE)
AC_SUBST(AR)
AC_SUBST(RANLIB)
AC_SUBST(LD)
AC_SUBST(WINPTHREADFIX)

# Test whether a gcc option (-Wno-ignored-qualifiers) is valid.
NO_IGNORED_QUALIFIERS=""
AC_MSG_CHECKING([whether CC supports -Wno-ignored-qualifiers])

cat > conftest.cc << EOF
int main()
{ return 0; }
EOF
$CXX -c conftest.cc -Wno-ignored-qualifiers 1>&5 2>&5
if test $? = 0; then
    NO_IGNORED_QUALIFIERS=-Wno-ignored-qualifiers
    echo yes
else
    echo no
fi
rm -rf conftest*
AC_SUBST([NO_IGNORED_QUALIFIERS])

if test "$GCC" = yes; then
    DEPEND_PROG='$(CC) -MM'
    c_flags="-Wall -W -Wshadow -Wwrite-strings"
    if test $profiling = yes; then
        c_flags="-pg $c_flags"
    fi
dnl    CXX_FLAGS_CHECK(["-Wno-ignored-qualifiers"])
else
    DEPEND_PROG='gcc -MM'
fi
AC_SUBST(DEPEND_PROG)

AC_PROG_MAKE_SET

LEX="flex -l"
AC_PROG_LEX
AC_PROG_YACC
AC_PATH_XTRA

EXESUFFIX=""

case $sys_os in
CYGWIN*)
    EXESUFFIX=".exe"
    FILTER="|sed -e s/C:// -e s///"
    OSNAME="Win32"
    ARCH="i386"
    m64="no"
    lib_dirs="/usr/lib /usr/local/lib"
    SOEXT=dll
    LSHFLAG="-shared -Wl,--enable-auto-import,--export-all-symbols"
;;
Darwin)
    kern=`uname -r`
    tifs=$IFS
    IFS="."
    set $kern
    IFS=$tifs
dnl uname -r returns the kernel release, it seems that the major
dnl index - 4 is the OS release, e.g. kernel 10.4.0 is OS X 10.6.4.
    if test $1 -ge 13; then
        OSNAME="Darwin64"
        ARCH="x86_64"
        # Assume Yosemite back end,
        SDK="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"
        UFLAGS="-mmacosx-version-min=10.10 -arch $ARCH -isysroot $SDK"
    else
        echo "Architecture not supported."
        exit
    fi
    m64="no"
    INSTALL='STRIPPROG="strip -S" $(LPATH)/../util/install-sh'
    lib_dirs="$lib_dirs $ac_x_libraries"
    SOEXT=dylib
    LSHFLAG="-dynamiclib -undefined dynamic_lookup"
;;
FreeBSD)
    OSNAME="FreeBSD"
    if test $linux32 = yes; then
        ARCH="i686"
    else
        ARCH="x86_64"
    fi
    m64="no"
    PIC_OPT="-fPIC"
    LFLAGS="-rdynamic"
    LSHFLAG="-shared"
    INSTALL='$(LPATH)/../util/install-sh'
    lib_dirs="$lib_dirs $ac_x_libraries"
    SOEXT=so
    LIBDL="-ldl"

;;
Linux)
    OSNAME="Linux"
    if test $linux32 = yes; then
        ARCH="i686"
    else
        ARCH="x86_64"
    fi
    
    m64="no"
    PIC_OPT="-fPIC"
    LFLAGS="-rdynamic"
    LSHFLAG="-shared"
    INSTALL='$(LPATH)/../util/install-sh'
    lib_dirs="$lib_dirs $ac_x_libraries"
    SOEXT=so
    LIBDL="-ldl"
;;
*)
    OSNAME=$sys_os
    echo "*** Operating system $sys_os not supported"

    # Don't know this OS, will stumble ahead anyway, assuming that
    # it is close to Linux.

    # User can perhaps get things working by setting up variables below.
    # Ports to other operating systems would be very welcome, contact
    # stevew at wrcad dot com

    ARCH=`uname -m`
    PIC_OPT="-fPIC"
    LFLAGS="-rdynamic"
    LSHFLAG="-shared"
    INSTALL='$(LPATH)/../util/install-sh'
    lib_dirs="$lib_dirs $ac_x_libraries"
    SOEXT=so
    LIBDL="-ldl"
;;
esac

if test $profiling = yes; then
   LFLAGS="-pg $LFLAGS"
fi

AC_SUBST(SDK)
AC_SUBST(UFLAGS)
AC_SUBST(EXESUFFIX)
AC_SUBST(FILTER)
AC_SUBST(OSNAME)
AC_SUBST(ARCH)
AC_SUBST(INCLXTRA)
AC_SUBST(SOEXT)
AC_SUBST(LIBDL)

CFLAGS="-O -g $c_flags"

if test $valgrind = yes; then
   dnl # Minimal optimization for memory leak debugging
   CFLAGS="-O0 $c_flags"
fi

AC_SUBST(CFLAGS)
AC_SUBST(PIC_OPT)
AC_SUBST(LFLAGS)
AC_SUBST(LSHFLAG)
AC_SUBST(INSTALL)

dnl ***
dnl *** Checks for header files
dnl ***

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(
    alloca.h dirent.h fcntl.h fenv.h float.h fnmatch.h limits.h pwd.h \
    regex.h setjmp.h sgtty.h stdlib.h strings.h sys/dir.h sys/file.h \
    sys/ioctl.h sys/resource.h sys/time.h sys/wait.h term.h termcap.h \
    termio.h termios.h ulimit.h unistd.h)
AC_EGREP_HEADER(sys_errlist, stdio.h, AC_DEFINE(SYS_ERRLIST_DEF))
dnl Detect when select takes int* as second arg (for HPUX)
AC_EGREP_HEADER(select.*int.*int, sys/time.h, AC_DEFINE(SELECT_TAKES_INTP))

dnl ***
dnl *** Checks for typedefs, structures, and compiler characteristics
dnl ***

AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_SIGNAL
dnl check for socklen_t
dnl AC_CHECK_SOCKTYPE(TYPE, DEFAULT)
AC_DEFUN(AC_CHECK_SOCKTYPE,
[AC_REQUIRE([AC_HEADER_STDC])dnl
AC_MSG_CHECKING(for $1)
AC_CACHE_VAL(ac_cv_type_$1,
[AC_EGREP_CPP(dnl
changequote(<<,>>)dnl
<<(^|[^a-zA-Z_0-9])$1[^a-zA-Z_0-9]>>dnl
changequote([,]), [#include <sys/types.h>
#include <sys/socket.h>
#if STDC_HEADERS
#include <stdlib.h>
#include <stddef.h>
#endif], ac_cv_type_$1=yes, ac_cv_type_$1=no)])dnl
AC_MSG_RESULT($ac_cv_type_$1)
if test $ac_cv_type_$1 = no; then
    AC_DEFINE($1, $2)
fi
]) 

AC_CHECK_TYPE(int64_t, long long)
if test $ac_cv_type_int64_t = "no"; then
    NEEDINT64="-DNEED_INT64_TYPEDEF"
fi

dnl ***
dnl *** Check for needed libraries
dnl ***

if test $OSNAME = "Win32"; then
    MSLIBS=
    if test z"$mingwlib" != z; then
        MSLIBS="-L$mingwlib "
    fi
    MSLIBS=${MSLIBS}"-lgdi32 -lwinspool -lcomdlg32 -lole32 -loleaut32 \
 -luuid -lodbc32 -lversion -lcomctl32 -lwsock32 -lws2_32 -liphlpapi -lm"
    SLIBS="$MSLIBS"
    LIBS="$MSLIBS $LIBS"
else
    AC_CHECK_LIB(m, main)
    AC_CHECK_LIB(dl, main)
fi
AC_SUBST(MSLIBS)
AC_SUBST(NEEDINT64)
AC_SUBST(SLIBS)

dnl ***
dnl *** Checks for library functions
dnl ***

AC_FUNC_VPRINTF
AC_FUNC_WAIT3
if test $OSNAME = "Win32"; then
    dnl these are macros
    ac_cv_func_gethostname="yes"
    ac_cv_func_gethostbyname="yes"
    ac_cv_func_select="yes"
    ac_cv_func_socket="yes"
fi
AC_CHECK_LIB(m, main)
AC_CHECK_FUNCS(
    access acosh atexit cbrt chdir clearerr dup2 erf erfc fork fseeko \
    ftime getcwd getenv gethostname gethostbyname getpid getpwuid \
    getrlimit getrusage gettimeofday getwd hstrerror isatty kill \
    lgamma mkstemp mkstemps perror popen posix_memalign posix_openpt \
    qsort raise re_comp select shmget sigaction signal socket srand \
    srandom stat strchr strcasecmp strcasestr strerror strtok_r system \
    tcgetpgrp times ulimit unlink vsnprintf vasprintf)

LINKCC=$CXX
if test $OSNAME = "Win32"; then
    LINKCC="$CXX -static-libgcc -static-libstdc++"
fi
AC_SUBST(LINKCC)

AC_CONFIG_HEADER(include/config.h)
AC_OUTPUT(lddb/Makefile mrouter/Makefile examples/Makefile)

(cd lddb; ${MAKE-make} ../include/ld_vers.h)
(cd mrouter; ${MAKE-make} ../include/mr_vers.h)

