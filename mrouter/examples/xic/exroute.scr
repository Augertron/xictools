
# exroute.scr
# This is a script that will exercise the MRouter plug-in from within
# Xic, by running the examples from Qflow provided with MRouter.  The
# MRouter is assumed to be installed in its default location, if
# installed in a different location, edit the MROUTER_PATH below.

# Where MRouter is installed.
MROUTER_PATH = "/usr/local/xictools/mrouter"

# Ask user to pick example to run.
r = AskReal("Routing example.  Enter 1 for map9v3, 2 for openMSP430 ", "1")
if (r == 1)
    exname = "map9v3"
elif (r == 2)
    exname = "openMSP430"
else
    ShowPrompt("Options are 1 or 2 only, goodbye.")
    Halt()
end

# Open the Oklahoma State 350nm CMOS library, as found in the current
# directory.
OpenLibrary("./osu35.lib")

# Open a new cell for editing.  We will place the cell instances and
# wiring in this cell.
Edit(exname, 0)

# Read in the LEF file that defines the OSU library routing properties.
leffile = MROUTER_PATH + "/examples/osu35/osu035_stdcells.lef"
MRouter("read lef " + leffile)

# Read in the DEF file that contains the netlist.  This was generated
# from the QFlow package (www.opencircuits.com).
deffile = MROUTER_PATH + "/examples/" + exname + ".def"
MRouter("read def " + deffile)

# Read in the "user" obstruction list.  This is equivalent to the list
# of obstructions in the config files for the examples as generated by
# Qflow.
blkfile = MROUTER_PATH + "/examples/" + exname + "_blk.def"
MRouter("read def " + blkfile)

# Set the power and ground net names.
MRouter("set vdd vdd")
MRouter("set gnd gnd")

# Set the verbosity level, and the via stacking limit (the OSU library
# presumably requires this).
MRouter("set verbose 1")
MRouter("set via_stack 2")

# Set a flag that will cause output to be the same as produced by a
# modified version of Qrouter.  This simply orders internal lists of
# such things as taps in a net to be the same as in Qrouter.  By
# default, MRouter will keep things in the order given or read from a
# file, which will be preserved when writing LEF/DEF output.  Qrouter
# uses a reverse order at times.  The different ordering can cause
# different but equivalent routing to be generated by the two
# programs.
MRouter("set debug 0x1")

# Do the routing.
MRouter("stage1 -ma")
MRouter("stage2")

# Now place the subcells into the Xic cell we have open, and draw the
# routes.  Update the display.
MRouter("place")
MRouter("draw")
Window(0, 0, 0, 0)

# Dump a DEF file that will contain the physical routes.  This is
# generated from the MRouter database.
MRouter("write def " + exname + "_routed.def")

# Dump a DEF file that is created by adding the physical route info to
# a copy of the original DEF file.
MRouter("append " + deffile + " " + exname + "_routed_a.def");

# Create an internal schematic for the physical cell we have created.
ExtractAndSet("all", "ar")

# Dump a DEF file from our schematic.
DumpPhysNetlist(exname + "-xic-extracted.def", 0, "g", "DEF")

// Save our design using the extended GDSII supported by Xic.
Save(exname + ".gds")

ShowPrompt("Done")

