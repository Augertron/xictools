$Id: README,v 1.6 2014/07/19 23:12:58 stevew Exp $

                        XicTools Accessories
                        --------------------

                        Whiteley Research Inc.
                            wrcad.com
                        

This directory tree contains the source code for the (free) accessory
programs.  These are:

mozy:
  A stand-alone help/www browser.  This can be used to browse the Xic
  and WRspice help databases, or general HTML and image files.

xeditor:
  A stand-alone text editor window.

httpget:
  A program for retrieving files served from a remote FTP or HTTP
  server.

hlp2html:
  A program for creating standard HTML files from help database (.hlp)
  files.

hlpsrv:
  A bridge program to allow access to a help database through a web
  server.

fcpp:
  A post-processor for FastCap output - obtains capacitance values.

lstpack:
lstunpack:
  Utilities to convert FastCap input files between the packed (single
  file) and unpacked (multiple file) formats.  The Whiteley Research
  release of FastCap and FasterCap from FastFieldSolvers.com
  understand the packed format, other versions do not.

These tools and the supporting libraries are provided in the hope that
they may be useful, under the GNU Library General Public License. 
This is open-source software, with no guarantees whatsoever, use at
your own risk.


                        Building the programs
                        ---------------------

Pre-built packages are available for the same operating systems as the
XicTools programs.  A source code distribution is also available. 
This section describes building the programs from the source code
distribution.

The tree contains the libraries needed to build the programs on
various platforms.  This is guaranteed to work under the platforms
supported for XicTools, however it may be necessary to install
"development" libraries for GTK-2 and possibly others.  You may have to
do some porting on other platforms.

The programs and libraries should build in any Unix-like environment,
including MinGW and Cygwin on Windows.

However, this procedure is not very friendly and the configure script
is a bit of a mess, so building from source will likely require
programming experience.

Starting from the directory containing this file:
1) cd src
   Use the following:
   ./configure --enable-gtk2[=path]
     This will configure for GTK-2.  The "path" is the path to the
     pkg-config script, and is not needed if it is in the shell search
     path.  GTK-2 will be used by default, so the enable_gtk2 argument
     is only needed if a path needs to be provided. 

   For MinGW, you propbably want to build using the GTK-2 bundle
   provided for use with the XicTools programs.  The configure line
   would be something like

   ./configure --enable-gtk2=/usr/local/gtk2-bundle/bin

  The configure script allows a number of other options, which can be
  listed with "./configure --help".

  I have no idea whether building with GTK-1 still works, but this is
  selectable.

2) make
   Type "make" at the system prompt to build the libraries and
   programs.  The executables can be found in the xictools_accs
   subdirectory.


                        Installing the programs
                        -----------------------

In the XicTools framework, the programs are not directly installed. 
Instead, a "package" is first created, and the package is installed. 
The package is a native distribution file for the system, such as rpm
for Linux.  This approach will only work, however, for the supported
platforms.

To bypass the packaging step:
In src/xictools_accs, type "make install_force".

The executable files are installed by default in
/usr/local/xictools/bin, which should be added to your search
path if necessary.  The mozy subsidiary files are placed under
/usr/local/xictools/mozy.  The other programs install an
executable file only.

To build a package:
In src/xictools_accs, type "make package".  If successful, a package
file will be created in src/packages/pkgfiles.

NOTE:  Under windows, the inno packager must be available.  The
scripts assume that this is located in /inno-5.5.1, so you probably have
to do some hacking.  You will need Cygwin to run the shell scripts.

To install a package:
Under Windows, this is easy:  just run the package file, which is an
executable (.exe) file.

Otherwise, you can do one of the following:
  1) Install the package using the native tools on your system, just as
     you would install any package.
  2) Use the "wr_install" script in src/packages/util:
     wr_install name_of_pkg_file
  3) In src/packages, type "make PROGS=xt_accs install"
Note:  to install the packages, you probably have to be root under
unix/linux.  Under OS X, you will be prompted for your password, and
you will need to have admin priviliges.


                        Documentation
                        -------------

Sorry, there isn't any at present, beyond what appears in the help
files, this file, and the source code files.

The graphics support library was originally written as a
toolkit-independent layer between the application and the GUI. 
Support was available for GTK-1 and GTK-2, Windows native WIN32, and
QT.  At present, the WIN32 and QT support have been discontinued, and
GTK-1 is no longer used and the support is probably broken.  The GTK-2
library is fully portable to all of the target platforms, so there is
no compelling reason to supoort multiple toolkits at present.  QT
support was never finalized or used in Whiteley Research products,
though it is currently in use in a product sold by another vendor
which uses licensed Whiteley Research code.  Eventually, the library
will be updated to use GTK-3, which is the current toolkit under
development by the GTK team.

If the framework looks like it might be useful in your commercial
application, contact Whiteley Research for licensing info and
help in porting/adapting.

