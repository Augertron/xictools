Xic release 1.2.12

This will likely be the last release in the 1.2.x series.  Xic is being
ported to C++, to improve maintainability and to facilitate migration to
other operating systems.

Bug fixes:

Fixed error in magnified array scaling in GDS read.

Fixed strangeness in display that would sometimes prevent redrawing
of unexpanded cell boundaries.

Mutual inductors are now treated correctly in the crsym command.

Fixed bug which might have caused crashes in the plot command.


wrspice changes:

The 'n' device key can be used for a "null" device.  Any line starting
with 'n' will be ignored.

************************************

replace after copy now respects a negative answer,

shift-tab now works on 104-key keyboards

fixed some things with the wires command.

Ctrl-arrows now change rotation in label/logo commands.

+++++++++++++
cpp only

mutual factor can be string.

more layers in electrical mode

help database keyword search capability

Ctrl-S and Ctrl-R in help and file browser windows

The pop-up menu locations should not change when the popup
is recreated.

2.0.1
added hpgl driver

functions ToSpice, CurCellName, TopCellName

2.0.2
added wire to poly option

added the symbl button and symbolic mode

physical properties can now be edited after clicking on them

2.0.3
crysm no longer erroneously rotates subcells (xic/xic++);

xic/xic++ a comment line indicating program, version, and date is included in
ascii output files.

the keyb command now has a macro setting capability.

The parser understatnds "proprocessor" directives

fixed rename popup from cells list to go away when it should.

fixed spurrious blank error messages after renaming device.

Physical porperties can be edited by clicking only when shift and
Ctrl keys are not down

dir list refreshed by pointing away from text.

Fixed flatn property problem.

toxic no longer writes out library cells (xic/xic++).

if a cell is opened for editing that references empty symbols, the
user is now given the option of deleting the empty symbols.

2.0.4
double clicking clear in cells pop-up no longer crashes program.

Constrain45 no longer inverted in new tech file in updat (xic++/xic).

fixed problem in update of DRC rules of new tech file if updated from
electrical mode, which would cause layers in rules to sometimes lose
names, which were printed "???". (xic/xic++).

Undo logic fixed in flatn fast mode so that placing a cell, flattening in
fast mode, and undoing the place does not cause a fault.  Now, undoing
a fast mode flatn will resurrect the original subcells, but not delete
the new flattened geometry. (xic++/xic)

Pressing button 1 now sets the reference in the coord pop-up even when
in a subwindow of different display mode from the main window.  Remember
that in the main window, Cntrl-Shift-Button1 can be used to set the
reference without performing an operation.  This is used for measuring
distance.

While in help mode, holding Shift while clicking on a menu button
will execute the command normally.

Fixed problem where polygons and 45 degree rotated cells were not
reliably selected in area select, if they were much smaller than the
select region.

If no cells are selected before entering flatn, the user is given the
opportunity to select.  Only cells are selectable at this point.
***
Application Notes:

Hypertext Labels

One feature of xic which is not widely known is the use of hypertext
labels.  When creating a label, clicking on a connection point in the
drawing, for example, will enter a hypertext link to the node into the
label.  The label will always display the correct node number for the
node.  This is the means by which node labels can be added to the
drawing.

The same feature can be used to set up specialized spice output. 
Suppose one wished to use the save command in wrspice.  A "spicetext"
label can be created, where the nodes to be included in the save are
inserted in the label by clicking on the drawing.  The resulting save
command will always save the clicked-on nodes, whether of not the
actual internally generated number changes.

Spice to file

Sometimes it may be desirable to place the output of a Spice run
initiated from xic into a rawfile, rather than saving the output
internally.  To do this, use the "spicetext" labels to add an analysis
string, such as "spicetext .tran 1p 1000p" (note that the "." ahead of
"tran" is necessary).  One can also add a save line using "spicetext
*#save v(1) ...  " to save only a subset of the circuit variables. 
The "*#" means that the save is executed as a shell command, ".save"
is ignored since wrspice is in interactive mode.  Then, for the
analysis string from xic, use "run filename", where filename is the
name for the rawfile.  The run will be performed, but the output data
will go to the file, so don't expect to see it with the "plot"
command.  If the filename is omitted, the run will be performed with
internal storage as usual.

To access the data for plotting in xic, press the run button, and
enter for the analysis string "load filename", where filename is the
name of an existing rawfile.  The plot command can then be used to
access the vectors as usual (this feature is new in xic++ 2.0.4).

--------------
2.0.5

Fixed symbolic mode in gds

Fixed update of htext refs in symbolic mode.

The numeric keypad +,- and the Home key now work when entering
editable text or plot points.  Remember that th arrow keys will
translate the display if Shift is held (otherwise they translate
the edit cursor).

wrspice:
ltra model and tra abs parameter now correctly defaults to 1.0.
fixed some numerical overflow problems.

Fixed a problem in iplot where the iplot would "flicker" due to being
redrawn unnecessarily.

Fixed a bug that would cause a fault on the second run of a circuit
with certain characteristics.

Wires that art identical placed on top of each other no longer cause
trouble (one will be deleted).  The wire merge no longer merges wires
that retrace the original wire (xic/xic++).

Fixed xic++ hang-on-copy bug.

Fixed hardcopy print problem (xic/xic++).

The xic++ help pop-up now has a cancel button, in addition to
"delete branch" (used to be "delete window") and "quit help".  Cancel
simply removes the window.  Delete branch deletes the window and all
windows popped from topics, recursively.  Quit help deletes all help
windows and exits help mode.

Bug list:
Nonzero-width wires that double back on themselves are rendered
incorrectly.

It has been reported that xic crashes frequently (no further info given).


Haus
> Another peice of evidence.  When I use xic instead of xic++ it can't seem
> to find this cell.  Warning: Call to undefined symbol pdamphdcjx.

I couldn't reporduce this, xic seems to perform the copy ok.

> in wrspice if I hit ^c during a run it will stop.  "run" again will resume
> the sim.  ^c now will end wrspice  ( at least on darla it does).
> Shouldn't all subsequent ^c's just pause the simulation?

Ctrl-C should pause the run in progress/ or terminate a running
command.

Is there a limit to the length of a cell name?

32 characters, set by the GDS format.
-------------------------------------------------
2.0.6
Fixed a bug where copying mutual inductors sometimes caused
problems.  This has been around for a while (xic++/xic).

It is now not possible to copy assocaited labels without also copying
the referenced object in electrical mode.

A huge bug in electrical mode flatn was fixed.  If a device was selected,
it would be flattened, effectively removing the device from the circuit,
but not the drawing.  Worse, the associated labels contained unreferenced
pointers which could fault.  This has been corrected (xic++/xic).

The !check command now removes bad mutual inductor references (xic++ only).
If run from physical mode, unreferenced labels are no longer selected
(xic++/xic).

xic now handles the new electrical layers in the tech file properly (no
double listing in layer table).

If the program crashes, it now automatically mails me a gdb backtrace
and the last 20 lines of the xic_run.log file.  However, if the environment
variable XICNOMAIL is set, no mail will be sent, but it will still call
gdb, like previous versions.  If the environment variable XICNOGDB is set,
there will be no gdb, no mail, and modified cells will be saved with the
.panic extension.

2.0.7

The mail/gdb crash reporting now works on Linux.  The gdbexec file
should now be mode 644 and not executable.  Not that presently a
special hp version of gdbexec is needed.

The hardcopy drivers now have a default command string, usually "wr_lp".
The wr_lp was rewritten to handle 1 or 2 args.

Dumping a hard copy no longer crashes xic++.

* In the properties panel, trying to delete a selected system property
  now brings an instant error message, instead of prompting for the
  property type to delete.

>> wrspice
quit button followed by non-quit response no longer freezes keyboard.

fixed scale bug in iplot.

The special vector "@delta" maps to the internal time step.  To use in a
plot, it must be saved first.

LTRA/TRA abstol back to 1e-12.  LTRA trunclte and truncnr don't work.
Improved breakpoint handling and time step prediction.
(*** fix help)

The "bug report" function now actually sends the report, previously it
did not.  Sorry if anyone tried to use this and got no response.

The "xic" button will start xic with the schematic from the current
circuit loaded in wrspice, if there is one.

xic++ fixed a couple of pointer reference errors which caused crashes.

fixed the mess when DRCing 45-rotated subcells. (xic++/xic)

New licensing system.

Internal organization changes related to making better use of C++
paradigm.

------------- NG only
drc query now works in push.

fixed case where drc error was not erased properly when object was deleted.

new version of license server.
--------------
Fixed a bug where pressing Ctrl-D could fault during text input.

Fixed a problem where certain operations from the cells panel, such as
"clear", would fault if applied during text input for the cell being
cleared.

The error message from the cells/clear function (and elsewhere) can now
be deleted without it leaving a pink rectangle on screen.

fixed bug in database which caused fault when a new cell was opened for
editing with a path name, and the cell previously existed but all instances
of some parent were deleted from some other cell.

fixed subtle bug in interactive DRC which was invisible but caused faults.

It is no longer possible to change the selection in the cells list
after edit is selected during the prompting to save the current cell.
Changing the selection at this time was causing faults.

A subtle bug in peek mode, which was causing faults when button press
events came faster than display updates, was fixed.

Fixed misc bugs in the cells popup and tree popup.
---------------------
bug fix in rename command, would fault renaming a cell under certain
conditions.

Is is now not possible to create a symbol using crsym with the same name
as the current editing cell (which is disaster if done).
------------------------
fixed broken frame command in hcopy.

------------------------

The cells listing now indicates a modified cell with a '+'.  The '*' now
indicates cells which are top level (not used as a subcell) in both
electrical and physical mode, previously it indicated status in the
current mode only.  There is now provision for cell names that begin with
'+' and '*', previously this could lead to problems.

Changes to enable correct updating of terminal locations when terminals
move in subcells.

copied and renamed cells now have the modified flag set initially, so they
will be saved.

The vertex editor should no longer leave stray vertex marks behind.

Fixed problem with coord popop switching between sced/phys modes.

Fixed situation where pressing quit button as first event with legal
message up could fault.
-------------------------------
Fixed problons with buttons in the prpty popup:

.   pressing a sequence of edit, name, or other buttons that ask for input
   in sequence without entering text, then pressing cancel, no longer
   faults.
.  pressing edit or other buttons with no object selected no longer faults.
.  the source button and the cancel button on the resulting popup now
   interact correctly, i.e., hitting source a second time kills the
   popup, cancelling the popup turns off the source button.

The rendering routine now renders degenerate wires (wires that double back
on themselves) correctly.
   
Fixed a bug which was causing crashes due to an interaction with the
input text editor and button 3.  For example, "plot" followed by
button 3 click in the drawing window, followed bu "edit" would crash.

The plot list is no longer lost in a switch to physical mode.
-------------------------------

Rewrote the polygon clipping routine.
poly clipping of strange cases fixed.

The xor command now handles wires.

There is a new "info" button in the attri menu.  When active, information
about the selected objects will be shown.

Fixed a bug which prevented labels from being rotated in 45 degree increments
while being moved in physical mode.

The low-level error handler for the X intrinsics will now call the standard
error termination sequence rather than simply exiting.

The magn button and cnvrt/scale buttons no longer fault if given non-numeric
input.

These same two buttons now properly remember the last non-unit value.


The "best fit" button in the hardcopy popup now really makes the best choice.

Internal hardcopy bitmap now properly zeroed.  Sorry about any garbage
plots (none were reported).

Given that some users are using postscript printers with roll paper,
or may otherwise wish to minimize white space around plots, the
postscript drivers now support an "autoheight" capability.  To invoke
this mode, the "height" value in the hardcopy popup is set to zero. 
The plot produced will be the minimum height consistent with the given
width.  The legend, if on, will always be in portrait orientation,
independent of the portrait/landscape button, which is different from
normal behavior.  The portrait/landscape button will set the cell
orientation, but is overridden by the "best fit" button, which will
orient for the largest (Y-direction) image.

Select() script function takes a fifth "types" arg.

new predefined constant "INFINITY"
-----------------------------------------
Fixed a blunder in the last release that broke the recognition of
device/subcell nodes in plot.

Fixed a bug that raised havoc when the "clear all" function was invoked.

Fixed a bug in the extract menu, the state of several buttons were not
being set right, and fixed the crash if certain buttons were pressed
twice.

NOTE - The extract functions are not stable at the moment.  This should
be fixed up in the next release.
---------------------------
Fixed memory allocation in polygon clip.

Fixed logic for polygon clip box fill.

Internal resolution is now 1000.
The cif/xic output now has a line "(RESOLUTION 1000);".

Fixed bugs:  When new layers were generated from a gds read, they were not
given a StreamOut map, so these layers were ignored when the cell was
written to back GDS.  An output map is now generated (back, of sourse,
to the same layer and datatype).

In GDS write, if a layer did not have an output map, the layer was
silently ignored.  Now this is a fatal error for the conversion.

Note that new layer generated from xic or cif input have no stream mapping
at all.  Mapping can be applied with the "adgds" button in the attri menu.

wrspice: fixed a bug in iplot, 40 bytes per vector per point was being
allocated but not freed.

The global properties (plot/iplot/grid) are now added before a conversion
output.

The info command now displays properties.

Fixed a bug in the cell listings which would sometimes skip an entry.

Fixed the scaling in the conversions to include properties, and to avoid
roundoff error.

Arggh! the plot arrow marker was backwards for up/down!.  fixed.

The properties of electrical cells are now checked and possibly repaired
(as with the !check command) whenever a new cell is read.  The error
messages go to the log file.

Checks were added to "place" for empty cells.  It is now not possible
to place an empty cell.

The info command now shows the internal flags of objects.

Fixed a bug with symbolic mode that broke the gds conversion.

The gds and cif input conversions now use separate temporary symbol
tables for physical and electrical parse, to avoid internal problems which
most visibly would add duplicate sets of properties to symbols.

No longer a fault if on startup, the expnd command is on while the
"delete empty cells" prompt is active, and user hits Enter.

The "delete empty cells" in now recursive, i.e., cells containing only
empty cells that are deleted are also deleted.
------------------------------------

The polygon clip routine was extended to still more pathological cases.

A bug in the reporting of DRC Overlap, IfOverlap, and NoOverlap errors
was fixed.  The last two numbers printed in the logfile for the error poly
were bogus, which screwed up the "next" command.

0-Length labels no longer cause termination of a gds conversion.

A bad bug in the last version affecting gds read of files with no
electrical data was fixed.

Scaling is now applied to physical terminal locations in electrical
mode when scaling is applied to cells during conversion.

----
Fixed fault in Enet/LVS.

When GDS write fails due to lack of layer mapping, in now correctly
reports that the translation failed.  In the last version, it reported
success, even though the gds file was deleted and the log message
indicating the error was also shown.

Added some consistency tests and repairs to the !check command, which is
run automatically when a cell is read in.
-------------------

There is now an "!unset" command.  Entering "!unset varname" will remove
the previously set (with the !set command) varname from the list of
internally set variables.  Internal path variables can not be unset,
but can be redefined with "!set".

There are three new internal variables which can be set with the !set
command:

    nogdsmapok
    if set (with "!set nogdsmapok") then if a layer without gds output
    mapping is encounterred during gds output, it will be ignored,
    though a warning will appear in the log file.  Otherwise, this is
    an error which terminates output.

    keepbadgds
    If set, if an error occurrs during gds output, the output file is
    retained, but given a ".BAD" suffix.  Otherwise, the output file
    is deleted.  This may be useful for diagnostics, but such a file
    is generally not suitable for gds input.

    keepbadcif
    If set, if an error occurrs during cif output, the output file is
    retained, but given a ".BAD" suffix.  Otherwise, the output file
    is deleted.  This may be useful for diagnostics, but such a file
    is generally not suitable for cif input.

These variables can be unset with "!unset".  They can be set in the
".xicstart" file.
------
Finished work on debug popup.  It should now be "safe".

Rewrote the code that keeps track of subcircuit terminal connection
points.  The previous code was sensitive to the order of node properties
in memory.  This is no longer true.  Also added tests for bad input,
and overflow (more than 50 connections).

The ghost cell image in place now shows the symbolic image for a symbolic
cell, rather than the normal image.

The license server can now service installations where /usr/local is
not the installation path prefix.  See the README file in lib/xitools/license
for more information.

Modified panic code to avoid interrupt loop on exit.

Symbolic cells are no longer shown as unexpanded (bounding box with label).

Symbolic cells can be shown as expanded, with a miniature rendition of
the actual circuit inside the symbolic bounding box area, in peek
mode.  Click on the symbolic cell to expand, Shift-click to unexpand. 
Wires connecting the circuit connections to the symbol terminals are
added.  This rendition is for visual purposes only.  If a subcell
placed in symbolic mode is later changed to non-symbolic mode, the
view of the parent cell is likely to look horrid, since the
subcircuits will probably overlap.  The peek mode feature allows
viewing of the underlying circuit without this problem.

Labels can now include the sequence ">>".

Physical properties can now be viewed ("props" command) from a physical
subwindow in electrical mode.

Pop-up windows can now be cancelled by double clicking with button 2
in the background, or on a label object in the popup.  The cursor
changes to the skull and crossbones after the first click, indicating
cancellation on the next button 2 click.  Moving the pointer off the
widget resets the pending cancellation, returning the cursor to the
default.
   This only works for xic++ popups, not wrspice popups.
---------------------
The server can now handle licensing of an entire class C network.

Fixed bug in 2.3.1 which caused single character labels to fail
parse.

extended connect timeout from 10 to 60 secs when xic calls wrspice.
---------------------
Fixed corner-space-test DRC bug which falsely recorded DRC errors.

Fixed a hang condition in DRC.

Fixed the printout of cpu time after DRC with "bw" on.

Fixed a problem where wires of width greater than 92 were shown with
beveled corners for right angle segments.

Fixed a problem where wires of width greater than 92 could not be
click-selected.

Both of these problems were due to integer overflow (half of 92 times
1000, squared, is about the largest possible 32 bit integer).  Going
to 1000 internal units exacerbates such problems.  Be on the lookout
for more examples.

Check for 0,0 input to atan2 library function, produces error message
on some systems.

6755 objects, 252 errors, cpu time 1:36.49 (68.161 objects/sec)
-----------------------------

Fixed various problems with extract functions.  It now works hierarchically,
at least for my simple test circuit.

The ptrms command now has a mode which allows the terminals to remain
visible during normal operation.  Answer "yes" to the pop-up prompt.  To
make the terminals invisible, click on the ptrms button again.  Giving
"no" to the pop-up puts the user in the ptrms command, where terminals
can be moved.

Upgrades to the script interpreter.  New functions:
   Undo()    Undo operation
   Redo()    Re-do last undone operation
   int Strcmp(string1, string2)
             Returns -1, 0, +1 according to whether string1 is
              less than, equal to, or greater than string2. 
              This is the same as the "strcmp" C library function.
   string Strcat(string1, string2)
              Appends string2 on the end of string1 and returns the
              new string.
   int Strlen(string)
              Returns the number of characters in string.

   Character constants enclosed in single quotes (as in C) are now
   accepted.  The back-slash characters ('\n', '\t', etc) and octal
   notation ('\013') are accepted as well.

   The [] notation can now be used to address individual characters
   in strings.  Also, string1 = string2 + number is accepted, yielding
   a string pointing at the number'th character of string2.  Note that
   strings are never copied, so if multiple variables point to the same
   string, they will all see any modifications to the string.
   Example:

    s1 = "a string"
    s2 = s1 + 2
    Print(s2)        // "string"
    s1[4] = ' '
    Print(s2)        // "st ing"

   Error reporting is still terse-to-nonexistent, but has been improved.
-----------------------------------------------------------
frgds now write labels in correct format in created xic files.
frgds now adds the (RESOLUTION 1000) string to created xic files.
The paint subcell feature of the box command works again.
found and fixed yet another weird special case in the polygon clip
routine.

Changed the electrical property checking messages in the logfile to
not be as verbose when there are no errors.

Added check for junk after physical records in gds input.  Xic expects
electrical records, and failed conversion if the records were not found.
Now, extra junk that is not electrical data is ignored, with a warning.
--------------------------
With the strip button on, the tocif command terminates the cif file
with
  C 0;
  End
rather than
  E
for compatibility reasons.

The cif read of stripped files now works again.

Error messages from the fill popup no longer cause program termination.

Fixed pathtype 0 to box conversion in cif output.

Updated property labels are removed from list in prpty command if present,
 previously
the old object was left in the list.

The first time the place panel comes up, the user is prompted for the name
of a cell, just as if the master button was pressed.

Fixed bug where if opening a cell for editing fails, the hypertext was
fouled up.
----------------------------------------------
Pressing Ctrl-z while the pointer is in a drawing window will now
iconize the application.  Ctrl-z in the controlling terminal window
retains the usual job control funcion.

An error message is now produced if a node number less than 0 is ever
generated for a spice file.  This "shouldn't happen".

The overwrite file prompt in the deck command has been eliminated,
a .bak file will be produced if necessary.

The analysis string prompt in the deck command is skipped if the current
analysis string is "run".  It also won't add ".run" to the file anymore.

The argument to the ToSpice(filename) script command can now be blank
or NULL, in which case the default circuit name "cellname.cir" will
be used.  A .bak file will be produced if necessary.

The replace function in the place popup will no longer act on devices,
unless the new cell is also a device.

The place popup has been changed to provide a pull-down menu of existing
masters.  This keeps track of the last N masters (added with the
master button, or through the cells popup), where N defaults to 25.
The N can be changed with the set variable MasterMenuLength, which
must be entered before the place panel is popped up the first time.
Eg. to change the list length to 12, enter at the command prompt
 !set MasterMenuLength 12
This of course can appear in a startup script.
To make a selection, press and hold button 1 while the pointer is on the
menu button.  The menu will appear, with the selection under the pointer
highlighted.  A selection is made by releasing the button.

The "devs" menu now defaults to a set of pull-down menus, keyed by the
first letter of the device name (NOT the spice key).  This form has the
big advantage of obscuring siginificantly less of the screen than the
pictorial menu.  The original pictorial menu can be enabled by setting
the variable "PictorialDevs", i.e., "!set PictorialDevs" on the prompt
line.  The next time the devs menu is displayed, it will use the
old form.  You can also "!unset PictorialDevs".

Please let me know what you think of the new pull-down menus.

The auto-connection of new wire segments that run over terminals
and some other checking of wires has been turned on again.

Xic can now read xic files where the electrical field is blank.  This
worked in previous versions, but was recently broken.
-------------------------------------------------------------
If the "omap" button is on during gds writing of a design containing
electrical data, all cell names, including device names, are converted
to upper case, and a .alias file is produced which gives the name
mappings.  If the gds file is moved to a different directory, withoput
the alias file, a read will fail since it can't find devices with
uppercase names.  The read will succeed, though, if the "imap" button
is on.  In this update, if a cell or device can't be found, and the
name is not mixed case, an attempt will be made to open the cell with
the different case.  Also, the names of library devices are never
changed when a gds file is written.

There have been quite a number of program crashes associated with
mode switches.  One guaranteed failure is to edit a cell in electrical
mode, switch to physical mode and bring up a different cell, and use
the cells panel to clear the original cell.  Then, on switching back to
electrical mode, the old undo history is bogus and causes a fault when
it is cleared.  This has been fixed, the "alternate mode" undo history
is cleared before any symbol is deleted.  There was another bug which
could also habe been trouble, related to context switching before
deleting the undo list, that was also fixed.

All of the suproutines which form the core of the program have been
put into a separate C++ class.  This required a huge amount of editing,
but should be invisible to the user.

Various updates and modifications were made to the extract functions.
Inductor terminals can now be placed on polygons, as well as boxes,
provided:
  1) both terminals must be on the same object (box or polygon)
  2) the midpoint between the two terminals must also be in the
     object (automatic for boxes).
The partitioning for inductors is now shown when the group button is
active.

There is a new '!' command:
  !select what qualifier_or_regex
The values (literal) for what are:
  c[ell]
  l[ayer]
  n[ame]
  m[odel]
  v[alue]
  i[nitc]
  o[ther]
i.e., only the first character of the token is significant.

The qualifier_or_regex is a pattern matching regular expression for all
but the "layer" 'what'.  This is expected to match the cell name or
property value as per 'what'.  All objects with a successful pattern match
are selected.  The layer qualifier consists of the layer name, followed
by the optional tokens
  b[oxes]
  w[ires]
  p[olygons]
  l[abels]
These specify types of objects that will be selected.

Examples:
Select all instances of the cell named "dork"
 !select c dork
Select all instances of cell with name starting with "do"
 !select c do.  (not do*, see man regex)
Select R1-R9
 !select n R[1-9]
Select all polygons and wires on layer M2
 !select l M2 w p
Select everything on M2
 !select l M2

At this point, only the simple constructs described work.  There
are plans to add additional capability to this command.
------------------------------------
The logo command was rewritten to fix various bugs, and has changed
somewhat.  The default action no longer creates a subcell for the
text, but places it directly, implemented with wires.  The minimum
size is determined from the MinWidth design rule specification of the
layer, but some characters may still cause rule violations due to
acute angles.  If the variable LogoToFile is set ("!set LogoToFile"),
a subcell will be used, as before.  The arrow keys change the label
size, as before.  The maximum character size is .4 X .7 cm, minimum
possible size is .8 X 1.4 microns.  Shift-arrows set the
justification, which now works correctly.  Control-arrows set the
angle, as before.  The "RESOLUTION 1000" line is now added to the logo
file (if used).

New feature: virtual terminals

Suppose one has a subcell with physical layout only that one wishes
to include in a full design hierarchy.  It may not be convenient to
create a schematic for the subcell, but it is desired that the connections
to the subcell be included in the LVS checking of the overall design.
It is now possible to assign "virtual terminals" to the subcell.
Virtual terminals are treated like ordinary terminals in connecting to
instances of the subcell, but are ignored when creating netlists for
the subcell itself.

A virtual terminal is created in the subct command by holding the
Control key while clicking on locations in the electrical schematic
(even if the schematic is empty).  They can be placed anywhere except
on top of another terminal, location is not important.  Once created,
they can be moved or deleted like ordinary terminals.

The ptrms command is used to place the corresponding physical terminals
in the appropriate locations, just as ordinary terminals.

Once placed, they will be considered in establishing the connectivity to
instances of the cell, but will be ignored when establishing connections
within the cell.  Thus the cell looks like a "black box" with terminals.
Virtual terminals can be used along with ordinary terminals if only
part of the internal circuit is to be visible from the outside.

In Spice netlists, virtual terminals will appear in the subcircuit
connection list in .subckt and call lines, but will not be connected
in the .subckt definition.  One can use a "spicetext" label to add a
.include line to suck in a circuit definition from a file, for
example, to satisfy the references.  Virtual terminal node numbering
starts at 1 plus the largest number assigned to the existing circuit (or 1
if there is no circuit), left to right.

New command: tname

This command appears in the extrc menu.  It allows arbitrary naming of
the physical teminals which represent connection points of a cell.
If not explicitly named, the names default, as previously, to
"_N", N bieng an integer.  In instances of the cell, the terminal name becomes
a concatenation of the instance name and the parent cell terminal name,
such as "X0_1" (defaults) or "Xbuffer_output" (applied values).

The terminal (node) names are stored in the node property strings.  There
is no longer a requirement that such strings be 8 characters or less.

New command: tref

This command appears in the extrc menu.  It allows a terminal to be bound
to another existing terminal in the same cell by entering the reference
terminal's name.  When the connectivity groups are computed, if the
referencing terminal is not associated, it will take on the associations
of the referenced terminal.  If the referenced terminal is also not
associated, then the two terminals will be grouped into their own
association (wire net).  Note that the terminal layer association, which
is the layer that must be used to make contact to the terminal from outside
of the cell, can be specified when the cell is placed by setting layer-
specific mode.  This referencing is needed for example when two elements
of a cell are connected by a conductor outside of the cell, and it is
desirable to "cheat" and assume that this connection is always made.
There is now a 10'th field in the cell/instance node property for the
reference name.

New feature:
Xic no longer implicitly pops to the top level cell when switching
between physical and electrical modes while in a push.  Instead, the
symbol currently being edited remains the target, but becomes top-level
in the new mode.  If the original mode is returned to without editing
a different cell, the push stack is retained.  If a new cell is edited
in the new mode, through a push or otherwise, the original push
context is lost.  This context is also lost if the "clear" function
in the cells menu is invoked.

New feature: node mapping

It is now possible to use textual node names instead of the integers
assigned to xic.  The present implementation is preliminary.

if the variable UseNodeMap is set (!set UseNodeMap), then node mapping
will be employed when a Spice deck is produced.  The node names used are
one of the set of terminal names connected to each node,  If the node
is connected to a cell connection point (as set with the subct command)
then the node is named using that terminal name.  Otherwise, the node
is named after one of the ordinary terminals, under the following rules.
The rules may be specified with the NodeMapType variable, set to the
following (string) constants;

!set NodeMapType ALPHA
   The node name will be that of the terminal whose name is at the
   beginning of an alphabetically sorted list of connected terminals.

!set NodeMapType RALPHA
   The node name will be that of the terminal whose name is at the
   end of an alphabetically sorted list of connected terminals.

!set NodeMapType PLL
   The node name will be that of the terminal whose physical placement
   is lowest and leftmost in the physical cell.

!set NodeMapType ELL
   The node name will be that of the terminal whose non-symbolic electrical
   placement is lowest and leftmost.

!set NodeMapType SET  (default)
   If a terminal is identified with the SET attribute, its name will be
   used, otherwise a random choice is made.

Remember that subcircuit terminals override the above.

The use of named nodes allows the names of circuit nodes to be predetermined,
rather than set internally by Xic.  In order for this to be true, the terminal
names and the names of all devices and subcircuits must be specified by
the user.

There are situations where a node is not connected to a named terminal,
such as the phase node of the Josephson junction in the supplied device.lib
file.  In this case, the node is given a name "nN" where N is an integer.
The device.lib file can be modified to supply a default name for the
JJ phase node, if desired, then a corresponding terminal will appear.

New command: !terms

Older versions of Xic did not include physical terminals, thus files
from these versions don't directly support the new features.  To
update an old file, the "!terms" command can be issued in the prompt
area.  This will create any missing terminals from the terminals
specified in the device specifications in the device.lib file.  If the
device.lib file is also old, the terminals will have to be added by
hand with a text editor, or a newer device.lib file should be used.
Terminals are added only in the current cell, so the process must be
repeated in any subcells.

WRspice change:

Since we now have the possibility of node names like "R1+" or
"L2-", WRspice has been modified to support special characters in
the argument of v(xxx) constructs.  The xxx can have the form
  Aa...az...z
where A is alpaha, a ia alpha-numeric and z is any character from
"%-^+*/|&~=" (not including quotes).  The token must be surrounded by
parens, white space is ok.  Older versions of WRspice can be used if
the argument is quoted, e.g., v("L1+").
------------------------------------------------------
The cancel button n the save popup in wrspice plots now works correctly.

If the plot is an x-y plot, the save function now works correctly.  Previously,
the "vs" in the command string was interpreted as a vector, which hosed
the action (no plot was saved).

The Berkeley Bsim3v3.1 MOS model has been added to the device library.
Information about this model, including a thick manual, can be found
in the Bsim home page.  This model is becoming a commercial standard.
The model uses level = 8.

The Josephson junction model has been updated.  The previous model, also
used in Jspice3, took as an axiom that the Rn would project through the
origin.  This implied that the ratio of the critical to quasiparticle gap
currents would vary.  In the new model, projection through the origin is
not assumed, and the ratio is fixed.  The default value for this ratio is
Pi/4, from BCS theory.

There is a new JJ model parameter "icfact" to set this ratio, which for
real devices is generally somewhat less that the theoretical value.

Fixed a bug where if the level parameter was "Level" (capitalized), the
parameter would not be recognized.

The iplots can now handle x-y plots.
------------------------------------------------------

This release primarily fixes problems specific to SunOS.

Buf fixes:

Added interlock logic to cells popup buttons to avoid operations when text
input is pending.  Specifically, using the "edit" button when the prompt
to delete empty cells from the last edit call is active would cause
internal corruption.

Under SunOS, the "!pwd" command would crash the system.  This was found to be
due to a faulty function in Sun's C library.  A work-around was installed.

Under SunOS, if one brings up a menu, dismisses it, then brings it up
again, there is a delay of several seconds between when the button
lights up and when the menu actually appears.  The delay is long enough to
be annoying.  A call to the X server to set the location for the new
menu was taking an abnormally long time.  I don't know why this was
happening, but a modified sequence of function calls seems
to have fixed the problem.

When the main window is moved, the small menus, place popup, hardcopy,
and some others are repositioned to their special places in the main window.
Under SunOS/X11R4, this wasn't happening, due to X11R4 not having
the same functionality as R5/6.  The code has been changed to fix this
under SunOS.

The placement of the main menu in Open Windows was too far to the left, fixed.

Notes:

The SunOS binary distribution is compiled with the native (X11R4)
graphics libraries provided by Sun.  These should be compatible with
the newer (R5,6) libraries some users have installed on their systems. 
I have seen only one compatibility problem:  the area under a deleted
window was not refreshed correctly, but this was an R5 Xic under an R4
server, not the reverse.

Some SunOS systems give a warning "libc.so.1.9 is newer than ...). 
This is due to the presence of an older version of the shared C
library.  There does not appear to be any problem with this.  The fix
is to obtain an upgrade to a more recent operating system release from
Sun.

Xic is not happy running under the twm window manager if the
DecorateTransients keyword is given in the .twmrc file.  This puts a
title bar on windows that are not designed to have them, which fouls
up placement.  Also, it is usually preferable if the RandomPlacement
keyword is given, then new windows pop up automatically without the
user having to click first.
------------------------------------------

Bug Fixes:

When reading a GDS file produced from an old version of xic/xic++, the
labels are now correctly sized (resolution100/1000 problem).

Fixed a problem where subcircuit node consistency was sometimes lost if the
subcircuit was edited in a push.

New Feature:

The main menu in electrical mode has a new entry: shape.  Pressing this
button provides a pull-down menu of different outlines that can be
applied to drawings.  These outlines have no electrical significance,
but can be used for illustrative purposes.  In particular, in Symbolic
mode, this facilitates creating symbol representations.  The arcs and
boxes buttons, previously in the main menu, have been moved to the
pull-down menu.

The "sides" button, which sets the number of segments used in arcs,
has been added to the electrical menu.

The current choices in the pull-down menu are:
box
    Same as the old "boxes" button (with the rectangle icon).
poly
    New function, create a polygon just as in physical mode.
arc
    Same as the old "arcs" function.
dot
    Place a dot.
tri
    Place a triangle (buffer symbol).
ttri
    Place a truncated triangle symbol.
and
    Place an AND gate symbol.
or
    Place an OR gate symbol.

Boxes created on the SCED layer will be shown with the fill attributes
assigned to that layer (solid fill by default).  Boxes created on other
layers will be shown as empty fill with a dashed border.  If a fill pattern
or solid border is desired on these layers, a polygon should be used.

Polygons are always shown with the current layer's fill attribute.

Arcs are actually wires, and as such should not be used on the SCED layer.
Although there is no error, arc vertices are considered in the connectivity
establishment, thus adding inefficiency.  If the current layer is SCED
when an arc is created, the arc is created on the next layer instead.
If the arc must be on the SCED layer, the chlyr command can be used to
move it there.

The dot, tri, ttri, and, and or choices work a little differently from the
others.  After selection, a ghost rendering of the shape is attached to the
pointer, and the objects are placed where the user clicks.  The object can be
modified with the arrow keys:
    Up    expand by 2
    Right expand by 10%
    Down  shrink by 2
    Left  shrink by 10%

    Shift-Up  stretch vertically 10%
    Shift-Right stretch horizontally 10%
    Shift-Down  shrink vertically 10%
    Shift-Left  shrink horizontally 10%

    Ctrl-Arrows  cycle trough 90 degree rotations

The file formats and associated code has been changed to support a larger
field for Symbolic cell representation.  Presently, this field is limited to
16KB by GDS (which should be adequate).

The fill button, which brings up the fill pattern editor, has been
enabled in electrical mode.  Thus, electrical mode layers now support
fill patterns.  The following keywords can now appear in the technology
file associated with electrical layers:
    Filled
    AltFilled
    Invisible
    AltInvisible
    Blink

By default, the SCED layer uses solid fill, other layers use empty fill.
---------------------------------
The print format in CIF and native files for the symbolic information now
wraps lines to keep line length below 80 characters.

Switching to symbolic mode no longer fouls terminal nodes without clearing
SF_CONNECT.

info command:
    If the Shift button is pressed while clicking anywhere in a
    drawing window, information on the current cell is given.

---------------------------------

Dots now disabled in symbolic mode.

Ctrl-S word search enabled in cells/files list.

In windows that include the word search capability, which includes the
cells/files listing and the help windows, there are several keyboard
commands which may be useful, or essential for performing more than
one search.  The text contains an invisible cursor, which initially is
at the top of the file.  When a search is performed, this cursor moves
to the matching pattern.  The next (forward) search will search the
text from the cursor to the end of the text, the search does not
"wrap".  A reverse search will search from the cursor location to the
beginning of text.  The Ctrl-A and Ctrl-E keypresses will move the
cursor to the beginning or end of text, respectively.  The list of
useful key bindings is given below.  The text window must have the
keyboard focus.  Unrecognized characters will be sent to the main
window for processing.


   Useful key commands
   Ctrl-A      Beginning of text
   Ctrl-B      Previous page
   Ctrl-E      End of text
   Ctrl-F      Next page
   Ctrl-J      Scroll down
   Ctrl-K      Scroll up
   Ctrl-N      Next page
   Ctrl-P      Previous page
   Ctrl-R      Reverse word search
   Ctrl-S      Forward word search
   Ctrl-V      Next page
   Ctrl-Z      Scroll down
   Up arrow    Scroll up
   Down arrow  Scroll down


When a cell is replaced in electrical mode, either with the replace function
in the copy command of the cells panel or the replace function in the
place popup, the new cell now retains any assigned name given to
the original cell.

If the variable CheckSolitary is set (!set CheckSolitary), then terminals
that have no other connections are reported when creating a Spice deck
or electrical netlist.
-----------------------------------------
Fixed bug: interaction between DRC tests and connectivity calculation
that could crash things hard if a cell was saved after DRC tests were
performed.

The check and bgchk buttons in the drc menu now have the same behavior
as buttons elsewhere in the program, i.e., they allow both draging and
clicking twice to set the search rectangle.
---------------------------------
The placement of the new cell in replace mode now tracks the lower left/
origin buttons in the place pop-up in physical mode.  In electrical mode,
the reference terminal of the replacing cell is set to the same location
as the reference terminal of the replaced cell.

In the cells listing pop-up, pressing the copy button and then not giving
a new cell name brings up the replace prompt if there are cells selected.
Thus, one can now replace cells without making a new copy.

The interlock that prevents devices from replacing subcells and vice versa
has been fixed.

There is a new help html-capable help viewer.  The help windows now provide
cross-referencing through html anchors.  The new help system works with the
existing help database files.

The new viewer has about the same key bindings as the old text-mode viewer,
including the Ctrl-S/Ctrl-R word search capability.  However, the search
now wraps around the end of the file.

The basic format of the help database files is unchanged.  The plain text is
converted to html before being sent to the display in the following manner:
1)  The title text is enclosed in <H1>...</H1>
2)  Each line of text has a <BR> appended.
3)  The subtopics and see-alsos are preceeded with added <H3>Subtopics</H3)
    and <H3>References</H3> lines.
3)  The subtopics and see-alsos are converted to links of the form
    <A HREF="keyword">title</A>
    where the keyword is the database keyword, and the title is the title
    text for the entry.

Note that the text area can contain html tags for various things, such
as images.  This facility will be used in future revisions.  Also note
that text formatting is taken from the help file (the <BR> breaks lines),
and not reformatted at display time.  The help database will be revised
to provide html formatting controls.

The printer control pop-up in the help windows has been enhanced for use
with the html viewer.  There are two new buttons and a new text label.
The postscript button, when active, formats output in postscript.  If not
active, output will be plain text.  The font button produces a drop-down
menu of base fonts for postscript (postscript button active), or output
text type (postscript button inactive).  The label to the right indicates
the current choice.  Choices of postscript fonts are Times, Helvetica,
New Century Schoolbook, and Lucida Bright.  Choices of plain text output
are plain format, "pretty" format, and raw html.  The pretty format adds
ascii enhancements to emphasize header text, etc.

The save button is pretty much redundant, but does offer one unique
feature.  If a block of text is selected, only that block is saved to
a file.  The output is plain text.

Pressing the Ctrl key while creating round objects now adds some useful
constraints.  When defining the radii with Ctrl pressed, the radius is
the pointer position projected to the x or y axis (which ever is closest)
defined from the center.  Ordinarily, off-axis snap points are allowed.
When defining the angles of arcs with the Ctrl key pressed, the angle is
constrained to multiples of 45 degrees.  Ordinarily, the arc angle snaps
to the nearest snap point.
---------------------------------------

By default, Xic uses a large percentage of the system colormap.  If
there are insufficient colormap entries available, Xic will create its
own virtual colormap, which is loaded when an Xic window has the
keyboard focus.  A problem is that some X terminals and emulators
apparently do not support virtual colormaps, or do so improperly.  For
this reason, new options have been added to Xic to limit colormap
usage, and avoid creation of a virtual colormap.

    -C1   use single-plane private color cells rather than dual-plane
    -C    don't use private color cells at all

About colormap usage.

Xic is designed to work with an 8-plane pseudo-color display, as found
on all but a handful of contemporary computers.  It presently does not
work on systems which use an immutable colormap, which includes most
display adapters when set to 16 and 24-bit modes.  These systems will
have to run in "256 color" mode to support Xic.

In pseudo-color modes, the datum at the pixel address is used as an
index into a colormap array, which contains red, green, and blue
components for each entry.  The size of this colormap determines the
number of colors simultaneously available on-screen, which is usually
256.  The beauty of this approach is that ghosting and highlighting
can be very efficient.  Furthermore, on-screen colors can be
dynamically adjusted by changing the colormap entries.

Graphics systems that use 16 bits or more per pixel generally contain
no colormap.  Instead, the datum is split into three components, the
binary values of which control the red, green, and blue intensity. 
For example, the 16 bits are typically allocated into five bits for
red and blue, and six bits for green.  Thus, for each pixel, there are
32 X 64 X 32 combinations of the red, green, and blue values.  This is
important when rendering images, graphics with shading, and the like,
but the technique is highly inefficient for a CAD program such as Xic. 
The highlighting would be ponderously slow, and blinking might
actually be impossible, as all screen modification requires an actual
redraw.

The disadvantage of 256 colors is that this number is rapidly used up
by applications.  What the world needs is 16-plane pseudo-color
displays, but this would require about half a megabyte of high-speed
static RAM, which would be expensive, and the advantages would not be
readily apparent to the Microsoft set.  Under X, this problem is
addressed with virtual colormaps.  If an application can not reserve
sufficient colormap space, the option exists for the application to
create its own colormap, which will be loaded when the application has
the keyboard focus.  The problem is that other windows will be shown
in false colors, as will the application when the focus is outside of
the application.  The color switching can be annoying.

Dual plane cells

By default, and if sufficient colormap space is available, Xic will
allocate "dual plane" color cells for the layer rendering colors. 
These cells contain two pixel values, one representing the color, and
one which is white.  The white pixel is addressed during highlighting,
and having one white pixel per layer ensures that the exclusive-or
mode drawing always produces white highlighting.

If colormap space is short, Xic will allocate single plane cells.  Xic
will also use single plane cells if the -C1 option is given on the
command line.  This of course uses half the colormap space of dual
plane cells.  However, the exclusive-or highlighting is only
guaranteed to be white over the background, and the highlighting can
take any color over the layers.  This can sometimes be difficult to
see.

The colormap usage can be dramatically reduced with the -C option. 
When given, Xic will not allocate any "private" colormap space. 
Instead, it will use cells shared with other applications.  The cost
is 1) the colors may not be quite "right" if the colormap is already
heavily used by other applications, 2) there is no blinking, and 3)
the colors can not be changed.  The benefit is low colormap usage.  A
second copy of Xic running with the same technology file as the first
will use no additional colormap space.  A virtual colormap is never
produced if the -C option is given.  This option is recommended
primarily for users who want to run multiple copies of Xic without the
virtual colormap.


The node mapping capability for Spice output has been revised.
The previous implementation used two variables (set with the !set
command): UseNodeMap and NodeMapType.  These variables are no longer
recognized.  Instead, a new button has been added to the extract menu,
"nodmp", to control node mapping.

When the "nodemp" button is on, node mapping will be performed when
Spice output is created.  A
property is added to the current cell, so the initial state of the nodemp
button represents the state under which the cell was saved.  The
nodemp button brings up a small panel with three buttons: cancel,
mapping, and sorting.  The cancel button removes the panel.  The
mapping button brings up a menu of mapping level choices, labeled 0-3.

When a node is mapped, it receives a new name based on the following
hierarchy:

Level 0 and above:
Any node with a "vcc" device attached will receive the label from the
vcc device.  If there is more than one vcc device connected, one will be
selected randomly.

level 1 and above, for unnamed nodes:
If a physical terminal is given a "Set" attribute by clicking on it
in the tref command with the Shift button down, that terminal will name
the node.  Terminals with the Set attribute are drawn distinctively on-screen.

level 2 and above, for unnamed nodes:
The physical terminals associated with the cell's connection points are
used to name the nodes to which they connect.

level 3, for unnamed nodes:
A physical terminal is selected through the sorting algorithm to use
as the source for the name.

These names are applied in the indicated hierarchy.  Once a node is named,
it is not renamed.  For example, a node receiving a name from a vcc device
is not renamed if another connected terminal has a Set attribute.

The sorting button sets the sorting algorithm as described in the previous
notes.  This has effect only when the mapping parameter is 3.

Nodes that do not receive a mapped name are supplied with an internal
unique name.


The routines in the drc section were incorporated into a C++ class.  This
should be invisible to the user.
----------------------------------------------
The SET attribute of physical terminals, which selects the terminal name
for use as a node name in Spice output, is now set with a new command.
The "setnd" button in the extrc menu displays the terminals (physical mode
only).  Clicking on a terminal gives the SET attribute to that terminal,
while deleting the attribute from other connected terminals.  The
terminals with the SET attribute are drawn distinctively on screen.  Clicking
on a terminal with the SET attribute already set will delete the attribute.

The SET attribute is no longer set by pressing the Shift key while clicking
on terminals in the tname and tref commands.

In the tref command, holding Shift while clicking on a terminal will change
the default reference layer of that terminal to the current layer, which must
have the CONDUCTOR attribute.  This is the means by which a terminal with a
reference terminal can be assigned a layer.

An overflow bug, which caused program crashes as terminals were moved
and at other times, was fixed.  This bug was a headache for a long time.

The partitions of objects divided due to an inductor device being inserted
are now selectable in the group command.

----
A bug that caused program crashes apparently only under Linux when
certain types of electrical information is read was fixed.

The automatic insertion of inductors into physical objects for extraction
has changed.  This is the first step in making this facility more general.

!!! A CHANGE TO THE TECHNOLOGY FILE IS REQUIRED !!!

In order to turn on the inductor insertion facility, the following line
should be added to the layer block of each physical layer that can have an
 inductor.
These layers must also have the Conductor keyword specified.
Add:

  Device ind

Note that "ind" names the inductor device in the default device.lib file.
If the local device.lib file has inductors of a different name, or several
types of inductors, the above line sould be repeated for each inductor
device name.  The xic_tech.hyp (Hypres Josephson technology file)
supplied with this release makes use of this facility, and can be used as
an example.  This line can be added with a text editor, or through the
extrc/adelp command followed by an attri/updat to dump a modified technology
file.  With this modification, Xic should behave as it did previously.
The Device line will eventually have a more complicated syntax allowing
greater facility in extraction.

-----------------------
tilde expansion of script search path entries works correctly now.
-----------------------
Fixed problem with Shift key while making wires.

Help window now supports gif images.  Help text revised.

Problem with help windows reappearing after returning from icon fixed.

Problem with property printing in frgds and frcif fixed.

It is now not possible to move one vertex of a 2-vertex wire on top
of the other vertex.  This used to be possible with the vertex editor
and strch commands, and left a 1-vertex wire, which is a turd.

A condition that would cause seg faults associated with the prpty
menu was fixed.

When editing devices, the new device added to the device.lib file
now has a (RESOLUTION 1000); line, so it is no longer 10X too big.
For historical compatibility, the device.lib file uses 100 units
per "micron", but be advised that 1000 units per "micron" can be
used if the (RESOLUTION 1000}; line is placed at the top of the
device specification.

New script interface function:
  TextCmd(string)
This executes the command in string as if it were one of the "!" commands
in Xic.  The leading ! is optional.  Examples:
  TextCmd("!")              #brings up an xterm
  TextCmd("set ho deedo")   #sets variable 'ho'
  TextCmd("!select c")      #selects all subcells

Fixed drc test that indicated MinMidth errors automatically for single
segment type 0 wires with length less than min dimension.

The !regen command now correctly regenerates lost mutual inductor labels.

Ctrl-H, I, J, M are now mapable as a keyboard macro.
The keys that are NOT mappable:
modifier keys
any ascii symbol from space to ~ without Ctrl key.
These Ctrl keys: a, c, d, e, f, g,  n, p, r, u, v

Esc now terminates a macro without saving it.  Bsp now removes the last
event when defining a macro.  To enter Esc, Bsp, or Enter into the macro,
use Ctrl-Esc, Ctrl-Bsp, Ctrl-Enter.

There is a new !command construct:  if a line starts with !!, the rest
of the line is taken as a script, and executed by the script parser.
This is how to map script interface functions into a macro.  For example,
a macro to reset the current transform:
    Enter keypress to map:  ^Q
    Record actions for ^Q, Return to complete: !!SetTransform(0,0,1)^Return

Previously, the end style in the wires command was changed by pressing
the Ctrl key.  This had the unfortunate side effect of changing end
style whenever Ctrl was pressed for another rreason, e.g., to change
the grid.  This has been disabled in favor of a new "style" command
which replaces the "width" button.  The style button brings down a
menu of selections:  width, flush, round, extnd.  The width choice
performs the width command as previously; it sets the default width if
no wires are selected, or changes the width of selected wires.  The
other choices set the default end style if no wire is selected, or
changes selected wires to the chosen end style if wires are selected. 
All selections depend on the layer button.  If layer is on, only
selected wires on the current layer are changed.  Otherwise, all
selected wires are changed.

The copy/replace function in the cells listing panel now does not add the
current transform when replacing cells.  The replace function in the
place pop-up will add the current tranaform (which was the previous
behavior).

The treatment of any path which is given with a cell to open in the edit
command can now be altered with two new variables:

  NoReadExclusive (boolean)
  When a cell name with a path is opened, the path is stripped from
  the cell name.  If the path is not already in the search path, it is
  added.  Ordinarily, the path is put in front of the search path for
  the duration of the read, so that subcells will be opened from the
  same directory.  If this variable is set, the path is notnecessarily
  moved to the front of the search path.

  AddToBack {boolean)
  A path stripped from a given cell name in the edit command is added
  to the back of the search path, rather than the front.

The behavior is deescribed below for the various permutations:

NoReadExclusive unset
AddToBack unset
  (default behavior)
  The dir is added to the front of the search path during read.
  The "." element of the path, if it exists, is moved to the front
  after the read.  The previous behavior was to leave the dir at the
  front of the path, ahead of ".".

NoReadExclusive unset
AddToBack set
  The dir is added to the front of the search path during read.
  The "." element of the path, if it exists, is moved to the front,
  and the dir is moved to the end after the read.

NoReadExclusive set
AddToBack unset
  If the dir exists in the path, nothing is changed, otherwise the
  dir is added to the front.  After the read, the "." entry, if it
  exists, is moved to the front.

NoReadExclusive set
AddToBack set
  If the dir exists in the path, nothing is changed, otherwise the
  dir is added to the end.

New script functions:
  PathToEnd(path_name, dir)
Path name can be anything, but it is usually one of Path, LibPath,
HlpPath, or ScrPath.  Dir will be appended to the path if it does not
exist in path, or moved to the end if it does.  If the path_name is
not a recognized path keyword, a variable of that name will be created
to hold the path, which will be created if empty.  This can be used to
store alternate paths.

  PathToFront(path_name, dir)
As above, but the dir will be added or moved to the front.

  InPath(path_name, dir)
Returns 1 if dir is in path, 0 otherwise.

If a path is given with a file to open, and that file does not exist,
Xic will open a file of the same name found elsewhere in the search path,
if any.  A new pop-up message window indicates when the opened file is
different from the one specified.

Fixed a strangeness with the text window for the !set command without
args.  It would reappear spontaneously under some conditions after it
was cancelled.

Fixed problem with menus becoming visible with application iconified
in fvwm viewport switch.

The help, cells, fill pattern editor, and file browser windows now accept
keyboard events under fvwm.

The plot marks are now color-coded, so that each mark uses that same
(default) color as the corresponding trace in the WRspice plot.
There are new application resources color2-color17 (class names
Color2-Color17) to set these colors to an rgb.txt entry, as with
the WRspice resources of the same names.

When reading a gds file, there is now a message updated every 100K
on the prompt line indicating bytes read.  Note that it goes through
the file twice, once to build the symbol table and once to actually
read things.  One can now abort the read with Ctrl-C, and a 'y' response
to the resulting prompt.

Terminal locations are now indicated in unexpanded electrical cells.

New variable
  NoHelpDefault (boolean)
  When set, pressing the help button will not bring up the default
  help window.  The user must press a command button or otherwise perform
  an action to get help.

The undo of a vertex move in the vertex editor of the wire and polyg
commands works a little mor smoothly now.

Changes to the subct command.
The terminal names can now be set from the subct command.  This has the
same effect (though quite different methodology) as the tname command in
the extrc menu.  Whenever a new terminal is added, a name is prompted for.
Hit Enter or Esc for the default, or add a short descriptive name.
Non-default names are displayed on-screen while in the subct command.
To change the name of an existing terminal, press Shift and double click
on the terminal (no need to press Shift if in symbolic mode).  The prompt
for the name will appear.
The terminal manipulations in the subct command can now be undone/redone.

The nodmp button has been removed from the extrc menu and placed in the
main menu for electrical mode (which is where it belongs).  The functionality
has been enhanced with a pop-up panel, which allows all mapping functions
to be done from electrical mode.  It is still possible to select and name
terminals from the commands in the extrc menu.

When the nodmp button is activated with a button press, the node mapping
panel appears.  Since this button is set from the saved state in the
current cell, one may have to turn the button off, then on again to bring
up the panel.  The top of the panel has the same level and sorting
buttons as the previous implementation, with the same functionality.
There is a new "point" button that is initially on, and two text windows.
The left text window lists all of the nodes in the current cell and the
current name assignment.  The right text window will display a list of
terminals for a selected node.  Nodes can be selected either by clicking
on a line in the left text window, or if the point button is active by
clicking on a wire or connection point in the circuit (electrical mode
windows only).  The names of the terminals connected to this node will
be shown.  Clicking on one of these names will apply the SET attribute to
that terminal, and if the level setting is appropriate the left listing
will show the new name selection.  When the point button is inactive,
nodes can still be altered by clicking in the text windows, but clicking
in the drawing window has the normal effect.  The panel can be removed
with the cancel button.  When the nodmp menu button is on, Spice output
for that cell will use the node map.

Fixed yet another numerical bug in DRC that gave spurrious error
indications.

The undo of the move and copy button commands now works correctly.

In the move and copy button commands, pressing either Shift or Ctrl
while moving will constrain the move horizontally or vertically.

In the main button operation move/copy, pressing the Ctrl key will
constrain the move horizontally or vertically.

Spice runs now have an asynchronous interface.
-----------------------------------------------------------------
Labels are now shown in true orientation by default.  If the variable
LabelTrueOrient is set, labels will be shown in their actual
orientation (the previous mode).

Bug in the "delete empty cells" prompting that caused faults
was fixed.  One can now respond to the prompt with 'N' to abort,
keeping empty cells (same as Esc), and 'Y' to delete all empty cells with
no further prompting, in addition to 'y' and 'n'.

fixed a bug: if dots on, and the same cell was reread from disk with
"./", there would be a fault.

Fixed a bug: the offsets of wires and polygons in the cell created with
crsym were wrong.

Property numbered 7000-7104 will not be displayed with the "props"
button.  These are internal properties and should not be used.

Font:
It is now possible to change the font used for labels and the logo
command.  For now, there is only one font available at a given time. 
The default font is set internally by Xic, however individual
characters or the whole font will be updated upon startup if a file
named "xic_font" is found along the LibPath, which contains
alternative character specifications.

The font consists of vector specifications for the characters "!"
through "~" in the ascii chart.  These are stored in a compact
scalable form.  The xic_font file consists of character specifications
of the form described below.  For example, the entry for the default
exclamation point (!) appears as:

character !
path 4,2 4,7
path 4,9 4,10
width 2
offset 4

The coordinate system has its origin in the upper left corner.  The
size is limited to 256 X 256, but the basic cell size used by the
default set is 7 X 14.  The Y values increase downward, and X values
increase to the right.  Negative values are not permitted.

Only the first character of the leading keyword is necessary, and this
is case insensitive.  The first line of the block defines the
character.  The order of the following lines is unimportant.  Each
path is a sequence of coordinates which render a part of the
character.  The width is the horizontal space provided for the
character, which should include training space, typically one column. 
The offset is the column which is placed at the end of the preceding
character.  Row and column numbering begin with 0.

The existing font can be dumped to a file with the command

!dumpfont [filename]

if filename is absent, the font will be dumpd to "xic_font" in the current
directory.  Any existing file of the same name is saved with a ".bak"
extension.

Fixed a problem that might cause faults when saving the model.lib file
from the text editor entered from the edit command.

The hardcopies now include the transient objects such as terminals,
rulers, physical properties, and terminals, if they appear in the main
drawing window.  Note that the bounding box of the cell, which sets
the default boundary of the plot, does not include these objects, so they
may be cut off if they extend outside of the cell boundary.  The frame button
can be used to provide a suitable plotting region.

Fixed minor problems with terminal names entrered with the subct command.
Note that if a name is given as blank, "_", "_N", or "_NN", where N is
a digit, the name will always be replaced with the default name, which
is "_" followed by the index number.

Fixed a bug in the logic of the xor command.  In certain cases the new
structures were not being created.

Fixed the break command operating on wires.  This was not working.

There is a new !box2poly command, which converts selected boxes to
polygons.  This is not expected to be useful except for debugging.

The coordinates and dimensions are now given in microns in the info
commands.  If the variable InfoInternal is set, coordinates are given
in internal units, as previously.

Fixed the macro editor so that blank definitions delete the macro, as
the manual states.

There is a new provision for "long text" in 'value', 'initc', and
'other' electrical properties.  This enables a block of text to be
given as a property string.  An example would be a long PWL string for a
value property.  The long text is entered in the Spice output, but is
not printed in the on-screen label.  It is edited with a separate text
editor window.

When editing strings for the properties listed above and the cursor is
in the leftmost column, a small button marked with "L" appears just
above the prompt line.  Pressing this button will set the property for
long text, and open the text editor window for the text.  Enter the text,
then press "Done" to complete the operation.  The property label will
simply say "long text", but Spice output will contain the text entered.

The "long text" labels can be edited with the label editor.  Select a
long text label, then press the label button.  The prompt line will
display "long text" as a hypertext entry.  This entry can be deleted,
but no additional text can be added while "long text" appears.  One can
delete "long text" and enter other text in the usual way.  Pressing
Enter with "long text" displayed will bring up the text editor loaded
with the text.

Pressing Ctrl-t has the same effect as pressing the "L" button when
the "L" button is visible (cursor is in the leftmost position).  If
preexisting text was present when the "L" button is pressed, that text
will be loaded into the long text text editor, but any hypertext
entries will be converted to plain text.

In symbol files, a long text property simply has the token
(||text||) ahead of the property text.  The property text is terminated
with a semicolon (';').
------------------------------------------------------------------
The format button in the hard copy popup now produces a drop-down menu
of driver choices.

Fixed a bug when printing certain properties introduced in 2.2.1, caused
faults when converting gds to xic format.

Fixed a bug in the plot command that caused faults, also introduced in
2.2.1.

The asynchronous spice interface is now the default for all supported
operating systems.  During a spice run, a small popup window appears,
which contains a status message, and a "pause" button.  Pressing pause
will pause the analysis.  It can be resumed by pressing the "run" button
again.  The analysis can also be paused by pressing Ctrl-C in the
controlling terminal (xterm) window.  Ctrl-C over a drawing window
goes to Xic, where it stops redraws and other functions as usual.

If the variable "NoAsyncSpice" is set, the synchronous spice interface
is used.  In this case, there is no popup, status is indicated in the
prompt area.  Pressing Ctrl-C over the controlling terminal window or
over a drawing window pauses the analysis.  Don't press command buttons
or otherwise mess with things during analysis, or bad things
may happen.

The "L" button which allows long text in certain electrical mode properties
now has no title bar under Motif and Open Windows protocol window managers.

Xic would freeze up after a stop signal (Ctrl-Z) if a Spice analysis had been
performed.  This has been fixed.
-----------------------------------------------
The txgds command wasn't working, due to a typo it could never open its
input file.  This has been fixed.

The "long text" capability is now available for all unbound labels in
electrical mode.  This is useful only for "spicetext" labels at this point.
If a label begins with "spicetextN", N an optional sorting integer, the
rest of the label text is added to the Spice output.  Using the "long text"
capability, a whole block of text can be added, not just one line.

The character ';' can now appear in electrical mode properties and
labels.  Previously it was either silently deleted or it wound up in
the file, where it would cause a read error.  The ';' is encoded when
written to a file, a ';' in a label or property string in a file will
still cause an error, but they shouldn't get there unless someone gets
clever with a text editor.  A ';' is converted to a space if it
appears in physical mode properties, as the file is written.

If editing a file, and the file is changed with a text editor and reread
with "./" and the read fails, Xic++ no longer crashes.  But, the cell
will disappear. 

A failed read no longer leaves properties behind which show up in the next
cell read.

When writing CIF with the "strip" button, labels are now saved in a standard
format readable by, e.g., magic.  However, the sizing, justification,
and rotation are lost.


There is a new command:
  !layer layer_name [expression]

If layer_name, which must be a valid layer name (4 alpha-numeric characters
or fewer) does not exist in the physical layer table, it will be created.

The expression, if given, involves layer names and operators as in the
DRC specifications.  The result of the expression is created on layer_name.
Thus, this command provides a means of creating a new layer from geometry
on existing layers.  It operates on the physical part of the current
cell.  Labels are ignored.

Examples:
  !layer new M1
  copy M1 to layer new
  
  !layer new !M1
  add the inverse of layer M1 to layer new

  !layer new I1&I2
  add the intersection areas of I1 and I2 to new

  !layer new R1|R2
  add the R1 and R2 areas to new.

  !layer new M1&(!M0 | !M3)&(!I1 & I2)
  you get the idea...
  
This is now the suggested method of creating an inverse polarity version
of a layer, as it does not have the problems with wire and polygon bounding
boxes that the current xor command exhibits.  However, polygons are
converted to trapezoids, and are presently not relinked back to more complex
polygons, so that the object count may increase substantially in some
cases.  Note that this command (and all '!' commands) can be used in
scripts via the TextCmd() interface function.

If this command is used on a large, complex cell, it may take some time.
There is presently no "working" feedback.

The MinDimension keyword in the technology file, which was provided
for compatibility with KIC, is now ignored.  The current internal value is
derived from the MinWidth design rule, and is no longer printed in
updates.  Previously, the value was read from the tech file, and thus
could be different from the DRC value, which could be confusing.

There is a new command:
  !bloat increment

Increment is a dimension in microns.  The command will operate on
selected objects, and alter the dimensions as described below.  If in layer
specific mode, only selected objects on the current layer are acted on,
otherwise all selected objects are acted on.

Currently, only boxes and wires are affected.  On wires, the width is
changed to width + 2*increment.  On boxes, edges that have no contact
with another object on the same layer are expanded by increment.
Increment can be negative, but an object will be modified only if the
new configuration does not fail the MinWidth design rule test (if there
is one).  Otherwise, the operation is carried out, and DRC errors are
marked in the usual way if interactive DRC is active.  An object is
deselected if it is modified.


Entering "!?" now brings up help about the '!' commands.
----------------------------------
Fixed bug in resistor current expression in plots when resistor is
in a subcell and one end is grounded.

The following are now excluded from macro mapping:
backspace, tab, lindfeed, clear, return, pause, scroll_lock, sys_req,
escape, delete
furthermore, the mapped character is now specifically excluded from
the macro body.  Recursive definitions were bad news.

Fixed a bug: if in a push and switch modes, then push, the context was
incorrectly transformed.

The view in the main window is restored after a mode switch and back
if the original cell is returned to (used to center full view).

Clearing cells no longer produces an access problem for library devices.

The cells listing panel now has a title bar.

NG only
Fixed a bug is crsym wires


----
The global button in the prpty panel is now desensitized when editing
or deleting properties.  Previous the global button state could be
changed while in these commands, but the action would be according to
the global button state when the command was entered.

avoid "hlist Internal: hypertext reference not 0." error message after
prpty panel down and undo of object creation.

The Ctrl key move constraint feature broke the Ctrl-E keyboard
coordinate entry feature.  This has been fixed.  Keyboard entry can be
used for placing a coordinate in (hopefully) all cases which a click
without modifiers is valid.

The files listing in the cells panel now expands tildes in the paths.

NG only?
The chlyr command was broken for wires, fixed.

New variables:
  LogoEndStyle
  Sets the end style used for the character rendering paths in the logo
  command.
  Can be set to "0" for flush end, "1" for rounded end (the default) or
  "2" for extended ends.  

  LogoPathWidth
  Sets the relative path width used in the logo command. can be set to
  "1" trhough "5".  If set, the prompt for this variable in the logo
  command is skipped.

When Caps Lock is active, pressing Shift will lowercase alphabetic
input.  Caps Lock is ignored when the Control key is pressed.


New feature.  When devices and cells are placed, moved, or copied,
feedback is now provided when the cell is positioned to make contact with
existing objects.  In the vicinity of contact, the ghost-drawn object
will snap into position, and a dotted box will be drawn around the object.
This is most useful when the grid spacing is small.  During cell placement,
this feature can be defeated bu pressing the Ctrl or Shift keys.
-------------------------------------------------------------------
Did some cleanup regarding what happens if there are undefined cells, in
particular what happens if a library device is missing.  Tried to fix
situations that can crash.

The electrical properties checking is now performed when input is GDS
or CIF, as well as Xic.  This is now deferred until after the empty
cells prompt (if any) has been responded to.  When a cell is opened
for use as a master, is now also checked.

The search popup used in the text widgets (such as the file browser and cells
listing) now wraps, like the search function in the HTML viewer.  An
attempt was made to make the popup look a little better.

The hardcopy frame box was showing in the plots.  This is no longer true.

The Point command in the DRC menu works a little differently now.  All
previous errors are cleared, and only the errors from the last operation
are reported.

Xic can now read and write 8x16, 16x8, and 16x16 fill patterns to the
tech file.  This hasn't worked ever, but nobody noticed.

--
Fixed macro recording to strip modifier keypresses that don't modify
anything.  These prevented some macros from being deleted.  Also now
prints "space" for spacebar press.

Internal test for zero of "current_win" variable.  This should make it
reasonably safe to push buttons on visible windows when the rest of the
application is iconified.

The vport, cells, tree, help, and text editor windows now retain their original
iconic state after the application is deiconified.  Other windows will
be deiconified (as they all were previously).

Rewrote the class hierarchy for the graphics, and did a lot of cleanup.

If a cell is saved under a new name, the undo/redo list is no longer
cleared.

A warning is now issued when a Spice deck is created and there are
duplicated device or subcircuit names.  This can happen when the names
are assigned by the user.

Fixed an odious bug which caused the undo command to trash the links in
property labels.

Added check for recursion in cell bounding box propagation code.

Fixed bugs in polygon partitioning for extract.  Also fixed layer
assignment of terminals.

Fixed a problem in the xor command related to wires.

The .save lines in spice output are now constructed correctly for
current sources in subcircuits.  This applies to any device which
has a LibSave global property defined in the device.lib file.
----
Fixed a problem with the help system where use of the cancel button
could freeze the application.

Fixed a problem where user function names longer than 7 characters would
craash the program when their button was selected in the user menu.

Changed the startup message a bit.  It now displays the message from
HTML text, which is located in a separate file in the startup directory.
This file, named "xic_mesg" should be placed in the
 /usr/local/lib/xictools/xic/startup directory (or equivalent).

The menu buttons are now all the same size when proportional fonts or
non-standard fonts are used.  The two columns should always appear,
sometimes this was not the case with oddball fonts.

The HPGL hard copy driver was revamped.  The files look correct, but
have not been tested on a real printer.  Feedback would be
appreciated.

There is a new technology file keyword associated with physical and
electrical layers:

    HPGLfilled filltype [ option1 option2 ]

The parameters are those appropriate for the "FT" HPGL directive, as
documented in "The HP-GL2 and HP RTL Reference Guide: A Handbook for
Program Developers" frpm Hewlett-Packard, (ISBN 0-201-63325-6) pages
127-129.  This is summarized below:

   filltype     description                option1         option2
      1         solid, bidirectional       ignored         ignored
      2         solid, unidirectional      ignored         ignored
      3         hatched, parallel lines    line spacing    line angle
      4         crosshatched               line spacing    line angle
      10        shading                    shading level   ignored
      11        (not supported yet)        ignored         ignored

There are 1016 dots per inch and angles are in degrees.  Shading level
is 0-100.  If the HPGLfilled keyword is supplied for a layer and the
filltype and options (if given) are valid, that fill will be used with
the layer in HPGL output.  There is presently no way to assign the layer
color.

This parameter must be added to the technology file with a text editor.
The default is no fill.


There is a new hard copy driver for export to the xfig program.  Xfig
is a free (and very nice) drafting program available over the net.  Through
the transfig program, which should be available from the same place,
output can be further converted to a dozen or so different formats.

To enable the driver, start xic and press the "updat" button in the
attri menu.  Exit Xic, and bring up the technology file
(xic_tech[.xxx]) in a text editor.  Find the line
     "#HardCopyDevice xfig_line_draw_color"
and delete the '#'.  Start up Xic again, and again press "updat".  The
generated technology file has the driver enabled.

There is a related technology file parameter:

    XfigFilled filltype

This parameter goes in the layer blocks for electrical and physical
layers.  The filltype is an integer 1-56, which selects one of xfig's
internal fill patterns.

    0 = No fill
   ...  Values from 1 to 19 are "shades" of the color, from darker to
           lighter, a shade is defined as the color mixed with black.
   20 = Full saturation of the color
   ...  Values from 21 to 39 are "tints" of the color from the color
           to white, a tint is defined as the color mixed with white.
   40 = White
   41 = 30 degree left diagonal pattern
   42 = 30 degree right diagonal pattern
   43 = 30 degree crosshatch
   44 = 45 degree left diagonal pattern
   45 = 45 degree right diagonal pattern
   46 = 45 degree crosshatch
   47 = Bricks
   48 = Circles
   49 = Horizontal lines
   50 = Vertical lines
   51 = Crosshatch
   52 = Fish scales
   53 = Small fish scales
   54 = Octagons   
   55 = Horizontal "tire treads"
   56 = Vertical "tire treads"

This parameter must be added to the technology file with a text editor.
The default is no fill.

Improved the trapezoid merging in DRC.  This increases efficiency, and
reduces the number of polygons produced by the !layer command when inverting.

* Fixed a small bug in the DRC trapezoid clipping routine that would
  produce infrequent errors.
----------------------------------------------
If the first master is selected from the cells panel, the redundant
prompt no longer appears.

Trying to apply a macro to an unknown key, such as the Microsoft
Windows key, no longer crashes the program.

Symbolic cells can now be flattened.  All symbolic geometry is applied
to the symbolic property of the current cell, which is created if necessary.
Ordinary geometry is applied in the standard way.  The symbolic parts will
not be visible except in symbolic mode.

Fixed a bug which affected the replace function with symbolic subcells.

The xic_run.log file is now kept below about 100 Kbytes.  When this size
is exceeded, all but the last 20 lines or so are trimmed.

The mutul command was enhanced.  Clicking on an inductor or the label
of an existing mutual inductor pair makes that pair current, as a
shortcut to using the arrow keys.  Clicking on the label of the marked
pair prompts for a new label, same as entering 'k'.  Clicking on an
unpaired inductor starts a mutual add sequence, same as pressing 'a'
and clicking on the first inductor.  Back out with Tab, as usual.

The symbl button now works sensibly with undo/redo.  After a mode change,
undone/redone objects go to the correct part of the cell database.
The establishment of symbolic mode for a cell that never had a symbolic
property is now an undoable operation.  Certain buttons that can't be used
in symbolic mode are now desentized.  The selection queue and any mouse
operations are cleared on a mode switch.
---
Fixed some bugs related to physical property display and editing.

The label rendering functions now support embedded newline characters.
Newlines can be added in the prompt area by pressing Shift-Enter.
This should probably be avoided for electrical properties.

--
!set SpiceHost hostname
  sets host for remote WRspice, overrides SPICE_HOST in environment
  no default

!set SpiceProg
  sets full path name of WRspice executable, overrides all below
  no environment, no default

!set SpiceExecDir
  sets directory to search for WRspice executable, overrides SPICE_EXEC_DIR
  in environment, default "/usr/local/bin"

!set SpiceExecName
  sets name of WRspice binary, overrides SPICE_EXEC_NAME in environment
  default "WRspice"

When the Shift or Ctrl keys are pressed, an "active grab" is now issued
so that the release event is now always reported back to Xic, even if the
event occurs outside of the Xic windows.  This should prevent the
move constrain feature from getting stuck "on", which happens (for example)
if during a move the Ctrl key is pressed with the pointer in a drawing
window, and released outside of any Xic window.

The move constrain feature now works when dragging.  Note that the Ctrl
key should be pressed after the button press, or a stretch operation will
be started rather than a move.

There is now a companion !desel command  to the !select command.  The
syntax is identical, except that metching objects are deslected.  Both
commands have the following new extensions:

A blank field is now taken as "all".  "!select" without arguments selects
everything in the cell.  "!select c" selects all subcells, etc.  The desel
command works similarly.  For the layer modifier, the literal "all" can
be used to specify all layers (I hope nobody has a layer named "all").
"!select l all b" selects boxes on all layers, for example.

Fixed some strangeness with the HTML viewer scrollbars.
----
Fixed a funny in the red scrollbar in the color popup.

More tests for getting stuck in constrain-move.

The flatn command now takes as a depth 1,2 ... or all.  "1" does what
"0" used to do, but starting with 0 was reportedly confusing.

Fixed a bug that prevented menu buttons with fewer than five character
names from being correctly recognized in stored macros.

Revised some of the core database functions and created a new class.
The new structure should be easier to maintain and debug, and provides
tighter control over when objects are deleted (deleted objects being
used again causes program crashes).

If an old sced file from Jspice3 is listed in the cells listing, it
now has a prefix of just "s".  Previously these were listed as
"xs" with no space to the name, which made it impossible to select the
name or anything in that row to the right.

Wires in a magnified cell that is flattened now have the correct
(magnified) width.

Ditto for wires moved/copied with magnification.

However, if NoWireWidthMag is set (!set NoWireWidthMag), then the wire
width is not changed by magnification.

At the request of those with low resolution monitors and lots of layers,
the layer table can now be shown in two more compact forms.  The change
is made with the !set command.
 !set LayerTable compact
The size of the entries is reduced
 !set LayerTable tiny
The size is further reduced, and there are two rows visible
 !unset LayerTable
Revert to the normal presentation

fixed the shell excape for commands
-------------------------------------------------

Two new ! commands

!mo dx [dy]
   moves any selected objects by dx,dy relative

!co dx [dy]
   copies any selected objects to dx,dy relative

dy is assumed 0 if not given

The ! commands that change the database now terminate any command in progress
before performing any action.

The Alt key can now be used in keyboard macros (for systems with an
Alt key).  This opens up a large number of key combinations (Alt-anything)
for which a macro can be defined.

Fixed a bug in interactive DRC, the rules for nearby objects are evaluated,
not only those for the new object.

The fonts used in labels and the logo command are now separate, though they
default to the same font used previously.  New font characters used in the
logos can be specified in a file "xic_logofont" in the same format as the
"xic_font" file, which is used to specify the label font.  The
!dumplogofont command creates an xic_logofont file of the current logo
font in the current directory.

There is a new boolean variable: EraseBehindProps.  In the props command,
it is sometimes difficult to read the text if the background colors
provide poor contrast.  With this variable set, the background is erased
in the text bounding box.  Note that setting/resseting this variable
does not perform an automatic redraw.

When groups of cells are moved/copied with magnification, the spacing between
the cells is now magnified.

Ditto for labels.

Fixed a bug that caused a file format error in '9' extension lines for
file names that start with a digit, when using "frcif".

The same bug appears in KIC.  KIC files with this problem may have to
be fixed with a text editor: lines like "91234mycell;" must be changed
to "9 1234mycell;" for the cell name to be recognized by Xic.

Fixed a bug: the logo command can now be undone.

After reaching the last error in the next command, it should now be possible
to backtrack with PageUp on operating systems whose streams exhibit
a persistent error condition when the last byte is read.

If the next command is terminated (such as during a push) and later
restarted for the same file, the first error shown will be the last error
displayed before the command was terminated.

While in the next command, entering (number)Ctrl-F will display the
given error number.  One can also enter (-number)Ctrl-F and (+number)Ctrl-F
to move backward or forward by number.

Each insulating layer can now support multiple VIA specifications.
Previously, only one was allowed.
-----------------------------------------------------------------------

Pressing the main menu hardcopy button now actually exits hardcopy mode,
same as pressing the cancel button in the hardcopy panel.

Fixed a subtle bug which affects some systems:
When editing a new cell with the name name as the current cell but from a
full pathname, the undo lists are now cleared before the current cell
is cleared.  Previously they were cleared after, which produced faults
since clearing the lists references the deleted symbol.  On systems with
good memory management, the new symbol always uses the same memory vacated
by the old symbol, so the pointer references were safe.

Fixed a bug in the pnet command which caused premature ending of the list
at a group which has no terminals associated.

New variable: EraseBehindTerms.  When set, the area behind terminals
(in the ptrms command) is erased for legibility, similar to
EraseBehindProps.  The veriable is set/unset with the !set and !unset
commands.

Fixed a couple of problems in polygon partitioning in extract.

In order for a "virtual series device" such as an inductor to be recognized
the "Device ind" must appear in the technology file on each layer
supporting inductance (it must also have the Conductor keyword).
There was a bug (now fixed) that allowed inductors on any Conductor layer
if "Device ind" appeared on any layer.

The inductor partitioning can now handle wires.  Previously, only
boxes and polygons were supported.

Fixed a bug: If a model property is longger than 64 characters, it would
crash the program.

Selected text in the prpty panel now encompasses only the property text,
so that when the string is copied via button2 or whatever X machanism is
in force, only the actual property text is copied, not the label at the
beginning of the line.

The .save lines created for current monitoring now have the correct
order of subcircuit expansion.

Fixed a nasty interaction between the magnification button and
the logo command.
The logo command now ignores the current magnification setting (same
as labels).  Use the arrow keys to change the size.
-----------------------------------

Fixed a problem in the !regen command which sometimes gave an error message
about a missing name property and left the new label unlinked.
To update the labels of an old file produced before the labels became
color coded, use:
  !select l ETC1 l      (select all labels)
  (deselect unbound lables)
  press Delete
  !regen
  !check  (just to make sure...)

The mutual inductors and hypertext entries now survive after a copy
operation from the cells panel.
  
Fixed a bug which caused the "insertion midpoint of XXX and YYY not in
object" error message from extract partitioning to print as rubbish.

Added some event processing to the cells panel.  The popups for copy,
etc. no longer disappear behind the cells panel if it is moved.
Also, the popups are repositioned along with the cells panel if is
moved.

The adgds popup no longer goes to single-line editing mode if it pops up
for a layer without gds properties.  The menu button now pops down the
panel when deselected.

There is no longer a program crash when switching between electrical and
physical modes with the fill editor popped up.

Popups for adgds and adlyr are now popped down during a mode switch, however
the coord, color, info, and fill popups remain up.

The info command from the attri menu has changed a bit.  The popup now
has an "on" button to control info mode.  Pressing the info button in the
attri menu brings up the popup, if not already present, and sets info
mode ("On" button is active).  Info mode is exited by pressing the On
button, and may be restarted by pressing the On button again.  Pressing
the OK button exits info mode if active and removes the popup.  The info
command in the cells popup is unchanged.

The !set command can now be used in the technology file,  The syntax is
the same as when used in the prompt line.  The technology file is
processed after the .xicstart file.  Note that the Set variable = expression
command which also exists for the technology file is completely different.
See the documentation for details.

The behavior when reading in new symbol files which contain symbols with
names already in memory has changed.  Previously, the cell in memory was
silently overwritten by the new cell.  Currently, the default behavior
is to prompt the user before overwriting, twice, for physical and
electrical modes.  This reduces the possibility of inadvertently clobbering
a cell in memory with an unwanted substitution, and also facilitates the
merging of electrical and physical data from different cells.

If the cell name contains a directory separation character, or is the name
of a GDS or CIF file, an attempt is always made to read the file from disk.  
During the read, if a cell in memory would be overwritten, the user
is prompted for permission to do so.  Responses can be
Esc  abort conversion, GDS and CIF only, same as 'n' for native files
y    overwrite this part of cell, physical or electrical
Y    answer 'y' to this and any following prompts for
      (GDS/CIF) this part of cell or (native) all prompts
n    don't overwrite this part of cell
N    answer 'n' to this and any following prompts for
      (GDS/CIF) this part of cell or (native) all prompts

If the boolean variable NoAskOverwrite is set ("!set NoAskOverwrite") the
behavior returns to that of previous releases.

The path manipulations associated with the AddToBack and NoReadExclusive
variables are now applied when opening a cell for placement, as well as
for editing.

One can now select the CIF dialect used for CIF output with the
variable CIFoutStyle.  This can be set to one of "a", "b", "i", or "s",
where a or b indicate Stanford format, i indicates Icarus, s indicates
SIF, and anything else produces the default IGS format.  See the manual
or help for more information.

The writing of CIF and GDS output has been consolidated.
A log file is produced and the keepbadxxx variables are recognized when
saving with the save command, as well as with explicit saves using the cnvrt
menu.  The scale and strip functions remain active only from the cnvrt
menu.
--
Fixed problem in extract where name label coordinates were not being
recognized, requiring replacement after the cell was re-read.

Fixed a problem with the sizing of the text in physical terminals.

The physical property text and physical terminals now scale logarithmically.
Previously, they were fixed size, so they appeared to get smaller as one
zooms in.

Fixed a numerical overflow problem which caused physical property text to
be rendered incorrectly and certain (unlikely) magnifications.
------------------

When moving physical subcells with the terminals visible (from the
ptrms button) the terminal locations are now correctly displayed after
the move.

When movong a physical cell, the label reference as used in the ptrms
command now moves along with the cell.

While in a move or copy operation in physical mode, while the object(s) are
ghost-drawn and attached to the pointer, pressing
Enter causes the reference point to shift to the lower left corner of the
bounding box containing the objects being moved/copied.  Pressing Enter
again shifts to the upper left corner, etc.   Note that this allows objects
that have somehow gotten off grid to be returned to the grid.

The group numbers in the group command are now shown a little larger and
the size is logarithmically scaled for legibility.  Only one group can be
selected.  The selected group number is now printed on the prompt line.

It is no longer possible to assign a name to a device which might conflict
with internal names for that device type.

If a subcircuit terminal moves due to moving of the underlying object,
the new terminal location is now correctly reflected in the instances
of the subcircuit.

The error count and file pointer for the next command in DRC are now
reset properly when a new file is generated.

--------------

There is a new extract keyword "Contact" which defines a layer that
may be in contact with another Conductor layer, and is to be grouped
accordingly in the wire net extraction.  The purpose is to account for
a contact metalization which is applied over the normal wiring layers,
which may itself be used for making connections.  The "Contact"
keyword implies "Conductor", and has the format
    Contact layername [expression]

The expression, if given, must be true in the overlap region between
the object and the objects on layername for contact to be established.

There is now provision for more intelligent handling of the TermDefault
layer, allowing
the layer to be included in paths and groups.  However, it can take quite
a lot of behind-the-scenes computation if the TermDefault layer has
complex patterning, therefor the feature is disabled by default.  To
enable the facility, use the !set command to set the variable
HandleTermDefault.

The grouping works through the creation of an internal layer named "$TDI"
which is an inverse of the TermDefault Layer.  In the group command, and
to establish connectivity for the commands in the extract menu other than
"paths", the inverse layer is created for each cell, and the area over any
subcells is cut out of the inverse.  Note that for the grouping to work
correctly, the
TermDefault patterning must be in the same cell as the layer contacts.
In the paths command, a flat representation of the inverse layer is
constructed for the current cell.  In either case, during grouping the
TermDefault layer is ignored, and the inverse, which is a Conductor,
is used to establish connectivity.

The inverse layer is an internal layer and is never written to a file
during conversion or a save.  By default, the layer is invisible.
The layer should never be edited by the user.

If the HandleTermDefault variable is not set, the previous behavior
applies, namely all contacts to this layer have the same group number.


The !layer command now prompts for a hierarchy depth.  If the response is
greater than zero, then processed objects in the underlying cells are
copied to the
new layer in the current cell, up to the given depth.
If depth is 'a', the entire hierarchy is processed.
Examples:
  Create a new layer XX  which is a flat version of layer M3.  The flat
  rendition appears in the current cell.
  !layer XX M3
  depth = 'a'

  Create an intersection layer XX of M3 and I2 for the current cell and
  first level subcells. 
  !layer XX M3 & I2
  depth = 1

If the depth is 0, the operation can be undone with "undo", otherwise,
the undo processing is skipped for efficiency.

When Xic is busy, in most cases the cursor will now change to a watch
icon.
------------------------------

The strch command from the main menu has new capability.  This is available
only from the menu version of the command, not the Ctrl-button 1 pointer
operation.

After objects have been selected, specific vertices can be selected in
boxes, polygons, and wires.  Vertices can be selected by pressing the Shift
key while dragging with button 1 so that the desired vertices are enclosed
in the displayed rectangle.  The operation can be repeated to select more
 vertices,
which are marked with a small box.  After the vertices are selected, the
vertices can be moved by clicking twice or dragging.

The DRC tests on an object now record all errors associated with the object.
Previously, checking of an object terminated after the first error.

There is a new variable PSlineWidth which can be set to a numeric value
with the !set command.  This will set the linewidth used in the Postscript
line-draw mono and color hard copy drivers. One unit is 1/72 inch.
The default is 0, which means to use the thinnest line available.  This
will have no effect in the bitmap drivers.

The xfig driver now sets join style and end style to round for lines.

The empty space in the physical main menu now has a "reflect x" button.
Note that an x reflection is redundant (though convenient) as the same
effect can derive from a combination of y reflection and a rotation.

The cursor now properly reverts from the watch after a save.

The postscript drivers now use postscript text for labels by default,
not the vector font used on-screen.  This can be overridden, and the
vector font used as in previous versions, by setting the variable
NoDriverLabels with the !set command.  Multi-line labels are always
drawn with the vector font.

The bgchk command was broken in the last release.  This has been fixed.

There is a new prompt line command: !errs
This command can be called when the DRC 'next' command is active.  It deletes
any error indicators, and recreates the errors from the current error
file.  This is particularly useful after a bgchk, as the error indicators
are not normally created.  The !errs command makes all the errors visible,
as with the 'check' command.  The indicators can be cleared with the
DRC 'clear' command.

When using button 2 to set the view in the main window through a drag
from a subwindow, spurrious highlighted junk was sometimes left visible.
This has been fixed.

------------------------------

Fixed a bug which caused erroneous internal node number generation when
'vcc' terminals are present.  Fixed some related small bugs.

Minor rearrangement of the electrical mode main menu for addition of
a "reflect x" button.

Fixed bug in listing of parent cells in info command.

Changed slightly the placement algorithm for subcell labels.  Certain
labels are right justified, so if changed to a longer string, they
won't overlap the device.

The internal name assignment can now handle situations where multiple
device types share the same name key letter, e.g., 'q' for 'npn' and
'pnp'.  Previously, if both npn's and pnp's (for example) were in the
same circuit, the internally assigned names would conflict, since each
type would assign names starting with 'q0'.

If is now possible to assign name properties which conflict with internally
assigned names.  The internal name will be automatically updated so as
to not conflict, by appending "_N", where N is some ine integer.

The source button in the prpty pop-up now implements an important new
feature.  This function also now available through a new !source command
available from the prompt line:

    !source spice_file

If the command is given when the electrical part of the current circuit
is empty,
this command will create a schematic hierarchy from a spice file.  The
function may be used as follows:  Open a new circuit and go to electrical
mode.  Use the !source command or source button to read in a spice file.
The devices and subcircuits referenced in the file will be arrayed in
the drawing, each with the appropriate properties applied.  Named 'vcc'
terminals are placed at each device contact point, which establish
connectivity (wires are not used).  The drawing can be used for simulation
or any purpose just as a schematic entered in the standard way.

Subcircuits are created as needed, though if a subcircuit would overwrite
an existing cell in memory, the operation is aborted.  They must be
written out later with the 'save' command.  If a file exists in the
search path with the same name as a subcircuit, it is ignored, as the
subcircuit cells are created internally.  When writing, therefore,
it is possible to replace an existing cell file, but the previous version
is retained with a '.bak' extension.

Devices are created as needed, and given an assigned name from the Spice
file.

If the command is given and the electrical part of the current cell is
not empty, devices and subcircuits are updated, not created.  Devices in the
drawing with assigned names which match those in the Spice file will have
their properties updated, but no new devices or subcircuits will be
created.  Similarly, if when creating, a subcircuit already exists and is
not empty, its devices will be updated, but no new devices will be created
in the subcircuit.  The update mode allows a drawing to have properties
updated from the Spice file, similar to the previous version of the
'source' button in the prpty pop-up.

The created schematic can be modified by the user to replace the named
terminals with wires and reset the device locations, to make a 'real'
schematic that is aesthetically decent.

The prompting for cells to save when quitting has changed.  Previously,
the user was given the option of saving the current cell under a new
name (if modified).  If the user pressed Esc, the prompting for other
modified cells was skipped, making it too easy to exit with unsaved cells.
Now, the user can save the cell only under its own name, with the same
prompting for the other unsaved cells.  The response can be 'y' (save it),
'n' (don't save it), 'a' (save all), or Esc (don't save anything).

A new prompt line command !sa will initiate the prompting described above.
The is to complement typing "sa" which initiates the save command as if the
save button was pressed.  The save button acts on the current cell only,
and allows a name change.  The !sa command cycles through all unsaved
cells, and saves only under the cell's present name.

---------------------------------------

The xfig driver now uses the Alt colors, as is appropriate for hard copies.
Previously, the normal colors were used.

A bug which caused the !source command to crash on some (actually, most)
Spice files was fixed.

The device placement in the !source command is now always on-grid.
----------------------------------------

There is a new facility for providing a default node name for the last
node listed in a Spice output device line.  This allows the use of a
three-node MOS device, with the substrate node connected automatically.

The feature is enabled by adding the following property line at the top of the
device.lib file:

    Property 21 device_name num_nodes node_name

For example,

    Property 21 nmos 4 NSUB

device_name: name of device (e.g., nmos)
num_nodes:   number of nodes expected by Spice
node_name:   name of node to be added

A Property line should be added for each device which has a default node.
The respective device descriptions in the device.lib file should also be
modified to remove the substrate mode.  A new device.lib file with the
indicated modifications is supplied with this release.

With these modifications, a Spice ouptut deck will contain lines like

    M1 1 2 3 NSUB ...

Also, there will be a line added at the top of the deck:

    .global NSUB

This line tells WRspice to not modify this node during subcircuit expansion.

The user must explicitly add a connection to the global node, usually to
a voltage source.  This is accomplished in Xic by placing a "vcc" terminal,
and modifying the terminal name to the node name (NSUB).

The zoom button now remembers the last entry.

Xic no longer appends ".end" to the end of a Spice deck, since this causes
an error message in Hspice.  WRspice (and Spice3)
ingnore ".end".  It may have to be added by hand if the deck is used with
Spice2.

Fixed a bug which caused named 'vcc' terminals to sometimes not be properly
connected to wires.

Fixed a slight problem with the updating of the device.lib file after
editing a device.

One can now rename the 'vcc' device to other names in the device.lib file.
The default terminal
name is the name given to the device.  It is important that the name
property begin with the character '@'.  For now, a call to the vcc device
is hard coded in the !source command device placement code, so the
supplied vcc device should not be removed from the device.lib file.
------------------------------------

Fixed a bug that caused the labels for moved subcircuit terminals to be
drawn in the wrong location.

Subcircuit terminals can now be placed anywhere (no need to press Ctrl)
when editing a device.

Fixed a memory error which arose when renaming terminals, and prevented
undo/redo of a rename operation.

Fixed a bug: when placing a symbolic subcell, the dotted box that
is supposed to appear when over a contact point wasn't working
correctly.

The subcircuit terminals no longer lose their assigned names when internally
copied, which happens during certain operations such as "undo".

When responding to the prefix prompt when saving a device to the device.lib
file after editing the device, the character '@', which triggers the
behavior of the 'vcc' terminal device, is now accepted.  Otherwise the
prefix must start with an alpha character.

In electrical mode, there are two new layers added to the layer table:
NODE, and TERM.
The label associated with 'vcc' type terminals (terminal devices from the
device menu) now uses the NODE layer.
The TERM layer is normally invisible, and is intended to be used for a
'vcc' terminal device to be used for node naming, but is invisible
after placement (except for the label).

The spin command has changed.
The rotation is defined as previously.  Once this is done, the rotated
boundaries of the selected objects are attached to the pointer, and new
objects can
be placed by clicking.  Ordinarily, the original objects will be deleted,
however if the Shift key is held while clicking, the original objects
are retained.
---------------------------------------------

Fixed a bug in the graphical rendering functions that whould produce
text labels of the default point size if the scale was such that the real
height and width were zero.

The maximum number of layers in physical mode has been changed to 128
from 64.

There is a new variable for the !set command: NoMapDatatypes.  This affects
only the creation of new layers when a GDS file is read.  The default
behavior is to create a separate new Xic layer for each GDS layer/datatype
encountered that is not mapped in the technology file.  With the variable
set, all datatypes on the new GDS layer are mapped to the same (new)
Xic layer.

If a GDS conversion fails due to too many layers, the new layers are now
removed from the layer table.

It is no longer a fatal error to have an undefined cell reference in a
GDS file being read.  A new empty symbol will be created to satisfy
the reference, and a warning message printed.

Info now prints array parameters, if any.

Fixed a bug that would crash the program if the info popup was cancelled
when the gdstx button was pressed and waiting for text.

Modified the internal command stack handling to avoid a problem which could
cause program crashes.

-----------------------------------

Fixed some bugs associated with the prpty menu that caused crashes, for
example, pressing the combination delete - model - desel would crash.

In the prpty menu, with delete active and waiting for input, clicking
on other objects no longer selects them.

Xic now recognizes the situation where two 'vcc' terminals are connected
together, or a 'vcc' terminal connected to ground.  This means, in
particular, that an 'NSUB" vcc source can be tied directly to a gnd
device, without an intervening voltage source, for mos devices.

-----------------------------------

Fixed a bug which could cause the wrong name property to appear in the
prpty popup.

Fixed a bug which caused labels with non-default justification to
not stretch correctly.

Changed the period ('.') character in the default internal label font to
be more legible.

--------------------------------
The subcircuit lablels in the extract/ptrms now use the given name, if any,
rather than the default name.

There was a problem with the cells popup which sould freeze Xic or
crash if the popup was cancelled in the middle of the "overwrite?"
prompts in "edit".  It was also bad news if the files button was pressed
in this case.  The problem was that the popup was destroyed before the
function returned.  The popup is now no longer destroyed, just made
invisible.  This means that it remembers its position and state between
appearances, which is useful.

This means that the cells popup may spontaneously appear after Xic is
de-iconified in old versions of fvwm.  Old fvwm doesn't put windows in
the right place, either, so it is a good idea to upgrade.

----------------------------------------

Fixed a bug: the search function in the cells popup did not turn off
when the button was turned off.

The search results now show the search area coordinates in microns, unless
the InfoInternal variable is set with the !set command, in which case it
uses internal units as before.

The info button in the cells popup now brings up the same popup as the info
button in the attri menu.  Thus, info on particular subcells and objects
is available, as well as subcell info by pointing at entries in the cells
listing.  The info panel can coexist with other commands such as the
show command.

The electrical mode subcircuit terminals displayed with the "terms"
command now show the terminal name, if it is non-default.  The color of
the top-level connection points is now different from the connection
points of subcircuits.

The size of all transient marks is now scaled logarithmically, which
means that they shrink and grow as one zooms out/in.

After a pop, the bounding box of the parent is now recomputed.

In a subwindow, if one switches modes and returns, the original view is
restored.  The previous behavior was to reset the view to show the whole cell.

There is a new command button in the extrc menu: findt.  When pressed,
a popup appears which solicits a terminal name.  After the name is entered,
a subwindow appears with the view centered on the given terminal.
Either physical or electrical mode instantiations of the terminal can
be seen by switching between modes in the subwindow.
------------------------------------------------------

Fixed a bug in !desel with property modifier (one of [nmvio]) that would
sometimes crash the program.

The !select/!desel commands with property modifiers now works in
physical mode.  The cell that is selected/deselected is the physical dual
of the electrical cell containing the property.  The duality must have
been established with the ptrms command (extrc menu).

Note: !select/!desel work with regular expressions, so that a match is
not necessarily exact.  For example, "!select n X4" matches X4, X4_1,
X41, etc.  For an exact name match, put a '$' at the end of the
string, e.g., "!select X4$" ($ signifies end of line in regular expression).

If characters are typed with the cursor in a subwindow, the subwindow
buttons can now be activated.  If there is no match, the main menu and any
popup menus are searched for a match.  The first unambiguous match found
in this search order is activated.

Desensitized buttons are now ignored when searching the menus for a button
that matches typed characters.

The props button in the subwindows is now desensitized when the subwindow
in showing electrical mode. 

The class hierarchy underwent a substantial change:  the window-specific
functions in the main application class were moved to the window
descriptor class.  This should be invisible to the user.

The "last" button is gone, and the "view" command button has been changed.
The view button now produces a drop-down menu of view choices.  In a given
window, the last five views are saved in a list.  Additionally, up to five
views can be saved by pressing Ctrl-N.  These are assigned name letters
A-E.  The drop-down menu entries are
  full         center full view of cell
  prev         cycle view backwards
  next         cycle view forwards
  A-E          if view saved with Ctrl-N, set selected view
The fuctionality of the old "last" command has thus been incorporated, though
now five views are saved rather than just one.

If the view command is "pressed" by a key sequence, the ceneter full view
is shown, as previously (same as for the Home key).

The view list is cleared whever a new cell is displayed, or whenever the
mode is changed for the window.

Ctrl-Shift->right arrow and Ctrl-Shift->up arrow are accelerators for
view-prev
Ctrl-Shift->left arrow and Ctrl-Shift->left arrow are accelerators for
view-next
Ctrl-Shift-a through Ctrl-Shift-e are accelerators for view-a through view-e.

The keyboard accelerators for Home, Numeric Plus, Numeric Minus, PageUp,
and PageDown now work when text input is active.

Modified the "paths" command to use less memory.

If a cell name is selected in one of the info windows, then the selected
text will be used for the buttons in the cells popup that take cells as
input.  This has priority over a selection in the tree popup or cells
selected in the editing windows.  Names can be selected in the info windows
by double clicking on the text.  Note that it is possible to select
text that is not a cell name, which is not recommended to pass to the
buttons which expect a cell name.

In the paths command, the 'h' key toggles the blinking highlighting.
Previously the Ctrl key was used for this purpose, but this interferes
with other usage of the Ctrl key.

The coord popup now carries three decimal places rather than two to match
the internal resolution.

There is a new !area command:  !area [layer]
If layer is not given, the current layer is used (in physical mode), otherwise
layer is a layer name.  This prints the coverage in square microns of the
layer in the current cell and subcells.  This *does not* account for
overlapping objects.

The DRC class has been enhanced.  The following changes have been made:
1)  Added MinArea test
    syntax:  MinArea (area)

    The area of the current object is compared with the given area
    (square microns).  If the object's area is less than the test value
    a DRC error is indicated.  Note that only the current object is tested,
    not any combinations of objects.

2)  Added MaxArea test
    syntax:  MaxArea (area)

    The area of the current object is compared with the given area
    (square microns).  If the object's area is greater than the test value
    a DRC error is indicated.  Note that only the current object is tested,
    not any combinations of objects.

3)  Added MinSpaceFrom test
    syntax:  MinSpaceFrom (expression) (dimension)
    Consider the edges of an object.  For the parts of the edge that are
    covered by the pseudo-layer represented by the expression, construct
    a rectangle projecting outward a distance given by the dimension.
    Each such rectangle must be covered by the pseudo layer or a DRC
    error is indicated.

    This is in many cases redundant with the MinNoOverlap test if applied
    to the pseudo-layer (if the pseudo-layer is an actual layer).
    
4)  The layer argument of the MinSpaceTo, MinOverlap, and MinNoOverlap,
    can now be an expression involving multiple layers, as in the
    Overlap tests.

5)  The dimen popup has been redesigned to acommodate the new features.

------------------------------------------------------

Fixed some minor problems with the display of physical terminals of subcells
that are being moved.

Fixed a bug in DRC related to wires in scaled subcells.  The wire width
was not being scaled.

------
Modified the gdbexec script in the xic_libs distribution.

Fixed a bug that would crash the program in the script debugger, in particular
when a script was saved.

Keys typed with the pointer over the Xic icon (when Xic is iconic) are
now always ignored by Xic.

If Ctrl-E is used to finish a stretch command, the coordinate is now relative
to the location of the reference vertex.  Previously, the reference was
the location where the user clicked.

Fixed a couple of small bugs in the stretch command: the highlighting was
not erased if Esc was pressed, and a Ctrl-E finish, when undone, would leave
the "last" click point at the undone point, not the original reference.

Fixed some minor problems with the array buttons in the place popup.

In the cells popup, the rename and copy functions now exit without selecting
the new name in the text list if the original name was selected by clicking
in the drawing.

The updat command was misspelling the XfigFilled keyword, fixed.

Revamped the automatic connection vertex code, should now reliably create
wire vertices where needed.

Modified the electrical mode connection indicator.  It is now active when
placing and creating wires, and now indicates each connection by drawing
a box around the connection point, rather than drawing a box around the
object.

In the extract functions, it is no longer necessary to explicitly connect
subcircuit terminals.  Subcircuit connections are now automatically
extracted and connected.  It is still necessary to place the terminals
while editing the master for the subcell, though the placement and layer
of the terminal is not important.  The terminal identifies the conductor
group which corresponds to the electrical connection.  It is also necessary
to place the name marker in the physical layout.

In each subcircuit instance, the conductor group for each terminal is
extracted, transformed to parent cell coordinates, and compared with the
parent conductor groups for connectivity.  Connectivity between conductor
groups can be established through
  1) similar CONDUCTOR or TERMDEFAULT layers touching
  2) CONTACT and CONDUCTOR/TERMDEFAULT layers touching
  3) An area of a VIA layer exists, at any level of the hierarchy,
     under which the two via layers exist (one from the parent and one from
     the subcircuit), and any conjunction expression
     is true.

Note that only the subcircuit conductor groups associated with the
subcircuit's terminals are considered, thus connectivity between the
parent conductor groups and non-terminal subcell conductor groups will
not be detected at present.

There has been the rudiments a a new extraction capability added.
This allows devices to be identified in physical layouts through a
specification block in the technology file.  Eventually, this will
enable automated extraction of circuits from physical layouts.  Only
a small portion of the eventual functionality is complete at present.

Devices are specified in the technology file through a block of lines
keyed by the word "Device" and ending with "End".  An example is below:

Device    
Name Resistor
Body R2
Contact + M2 I1B&R2
Contact - M2 I1B&R2
End

There can be no text in the line following "Device".  The Name keyword
specifies a name for the device.  The Body keyword specifies the
"core" feature of the device.  The specification is an expression
involving layer names.  For each contact of the device, there should
be a "Contact" line.  The first token following "Contact" is a name
for the contact.  The second token is a layer name of a conductor
layer which is used to contact the device.  The remainder is an
expression which identifies the contact area.  The block must
terminate with "End".

At present, this capability can only be exercised through a new !find
command:
    !find devname
where devname is one of the names from the device blocks in the technology
file.  All of the indicated devices will be outlined with a highlighting box.

-----


* The new extract code in 2.2.13 was not working correctly.  This has
* been fixed.

Notes on new extraction capability:

In general, files built for the previous extraction algorithm are
*not* compatible with the new algorithm.  The goofy things that were
necessary to make the previous versions work will cause errors.  In
particular, subcells which consist of only wires, or any subcell which
has two or more terminals connected to the same wire net will cause
errors.

Any subcell whose electrical part has no connections is checked for
connectivity, and used to reduce the group numbering in the parent
cell.  Thus, the conductor group extends through via cells, for
example.  Vias and similar wiring cells should have no electrical
terminals, and should not be placed in the schematic.

Connectivity between subcells is recognized only if it involves wiring
in the parent or the subcell level.  A connection made through a
sub-subcell or deeper will not be recognized, unless metal is added at
the subcell level.

-------------

Presssing the "props" button would crash the program, fixed.

There is now a confirmation panel in the cells/clear function when clearing
a top level cell from the database.

The grouping function now automatically identifies the duality between
the physical and electrical subcells.  The cell marker, which is visible
in the ptrms command and previously required placement by the user, is
now automatically placed in the center of the appropriate (hopefully)
cell, if it was not previously over the cell.  The markers can still be moved,
but if you put the marker over the wrong cell, LVS errors will result.

Cell labels that have ambiguous locations will not be placed on a first
pass, and will be arrayed in the upper right corner as before.  Typically,
the user can place one or two of these cells, and the remainder can be
automatically placed by turning ptrms off then on again.

The output from the pnet (physical netlist) command may contain terminals
with names of the form
    $cellname$index$name
These are temporary internal terminal indications which derive from
physical cells without an established dual in the schematic.  The name
is delimited with '$', the first field being the symbol name, the
second field is an arbitrary index counting the number of unlinked
cells of this type, and the third field is the name of the
corresponding terminal in the symbol.  Terminal names of this type appear
when there is no corresponding cell in the schematic, or the
duality is not established, in which case the cell's label marker should
be outside the upper right of the parent cell.

There is a new '!' command: !ptrms l|t [r]

Options can be space separated or grouped.  At least one of l, t must
be given.  If l is given, the cell label markers will be moved to the
default locations to the right of the parent cell.  If t is given, all
device terminals will be undefined and moved to the lower left of the
parent cell.  These actions can not be undone.  If r is given, the
operation is performed recursively on subcells.  The characters c, d
are equivalent to l, t.  This command is used
primarily for debugging purposes.

Fised the paths command so that certain keys, such as numeric keypad +/-,
work.

Two new !set variables:
NoAutoPlaceLabels  (boolean)  When set, subcell label markers are not
    automatically positioned in the extract functions (ptrms).
NoAutoPlaceTerms  (boolean)  When set, device terminals are not automatically
    positioned in the extract functions (ptrms).

New device block keywords:
    Permute name1 name2 ...
    The namew are the names of contacts that can be permuted to enable 
    resolution.  This applies to devices such as resistors which are bipolar.

    Depth depth
    The depth is the hierarchy depth extracted for the device, default is
    0, meaning all device structure should appear is the current cell.  The
    value can be an integer, or 'a' to look at the full hierarchy.

---------------------------------------

The core of the database binning algorithm was modified to provide full
dynamic bin assignments over an arbitrarily large cell size.  This leads
to a major improvement in speed in reading files with large numbers of
objects.  The time to read in my favorite pathological file (Hypres m244,
cell ofc24) went from several minutes to a few seconds.  The cost is
slightly larger memory consumption.

new command: !bincnt [layer]
   This will print (in the xterm window) a table of the number of
   objects in each "bin" in the current cell's database for the given
   layer.  If no layer is given, the invisible layer for subcell
   storage is printed.  The bin array is also displayed transiently in
   the main window.  This is for debugging purposes.

If a cell is selected when the main menu edit button is pressed, the
selected subcell name is now the default name for the "Cell: ?"
prompt.

The main menu edit button now brings up a drop-down menu containing
the last 8 cells opened, plus a "new" entry.  Select "new" to open a
new cell by giving a name on the prompt line.  Typing "ed" "presses" the
edit button as previously.

Previously, writing a file would overwrite the file, even if the
write permission was unset, if the user had write permission to the
directory containing the file.  This has been changed so that permissions
are observed.

Fixed a bug that would cause a memory fault when attempting to place
a subcell with a prepended directory path.

Fixed a text scaling bug in the pcl printer driver that would make the
legend oversized in resolutions less than 300 dpi.  Note that some
printers cannot print a whole page at 300dpi due to printer memory
limits.  There does not appear to be a general way around this, since
the entire image must reside in printer memory before the page is
printed, hence it is not possible to segmentize the print, except by
running the same page through multiple times, which is not expected
to give acceptable results due to poor registration.

If in label command, after pressing DEL for a new label and before
pressing Enter, escaping by any means would cause a memory fault.
This has been fixed.

When a file is written, it is now always written to the current directory,
unless given an explicit path.
Previously, files would be written to the first entry of the search
path, which should be, but is not guaranteed to be the current directory.

When quitting with unsaved files from a gds/cif hierarchy, previously the user
was only able to save individual cells in Xic format.  Now, the prompting
allows saving the hierarchy as gds/cif.

The files list in the cells popup is now updated only when absolutely
necessary, since this can take some time if there are a lot of files.

Fixed bug in the stretch operation that would sometimes prevent the
stretch operation from happening.

Fixed a bug which would sometimes cause a hang during creation of inverted
layers with !layer, or with !set HandleTermDefault.

If a cell is selected when the master button in the place popup is pressed,
the name of the selected cell is the default string for the "Enter name..."
prompt.

Internally generated layers (those whose names begin with '$') are no
longer included in the technology file generated with the updat command.

The coarse and fine grid colors can now be set independently for
hard copy mode.  The new technology file keywords are:
AltFineGrid
AltElecFineGrid
AltPhysFineGrid
AltCoarseGrid
AltElecCoarseGrid
AltPhysCoarseGrid
each has syntax equivalent to the corresponding keyword without the "Alt"
prefix.

The outlining in the show command from the cells popup now blinks.

Xic now supports read-only colormaps as found in 16-bit and larger
color spaces.  This means that Xic now runs under the 16 and 24 ("32
bits" is really 24) bit "true-color" modes available in most recent
graphics cards.  In these modes, a pixel value is decomposed directly
into RGB values, whereas in the "pseudocolor" displays a pixel value
is an index into a mapping of RGB values.  The main difference is that
color changes can be affected instantaneously with pseudocolor
displays by simply changing the colormap entry for a given pixel,
while otherwise the screen would have to be redrawn.  For now,
blinking layers are not supported in true-color modes.

------------------------------------------

A rather crude layer blinking mode has been added for button 3 presses
in the layer table while in "true color" video modes.  While button 3
is held with the pointer over a layer in the layer table, the layer
color will blink in the main window only.  This works by creating two
pixel maps, one with the darker version of the color, and alternating
between them.  This takes a lot of memory and bandwidth.  Note that
if more than one layer has the same color, all these layers will blink.
Blinking is much easier to implement with pseudocolor displays.

There is a new "peek" command in the main menu.  This asks the user to
define a rectanglular area, and then redisplays the area slowly so
that underlying layers can be seen.  The default sleep time per layer is
400 milliseconds.  This can be changed with the PeekSleepMsec variable:
!set PeekSleepMsec time_in_milliseconds, e.g.,
!set PeekSleepMsec 200

--------------------------------

The !layer command has changed.  The assigned-to layer, if it exists,
is now cleared before the operation.  There is now no undo of this
command, ever.  If the depth given is greater than 0, there is a
second prompt:  "Recursively create layer in subcells?".  If the
response it 'y', the new layer is created in subcells to the given
depth.  If the response is 'n', the layer is created only in the
current cell, but uses geometry from the subcells up to the given
depth, in effect producing a flattened layer.

The provided xic_tech files have been modified to incorporate the latest
extraction capability.

New keywords for the Device blocks in the technology file:
  Measure mname mword [contact] [ref_contact]

The Measure keyword allows geometrical information to be extracted from
the device, which is listed with the pnet command in the extrc menu.

  mname    A name for the parameter te be extracted, arbitrary but should
           be unique for the device

  mword    One of the predefined keywords below, specifies what to measure.
           The presently available options are listed below.  Most require
           the following
           two tokens, which are contact names (from Contact lines).

           The "body bounding box" is the rectangular region encompassing
           the Body objects, before any bloat.

           BodyArea    The area of the body bounding box.

           CWidth      The width of the contact, along a line connecting
                       the contact with the ref_contact.

           CNWidth     The width of the contact, normal to the line
                       connecting the contact from the ref_contact,
                       measured at the contact bounding box midpoint.

           CBWidth     The width between the contact and the ref_contact,
                       which lies over the body bounding box.

           CBNWidth    The width of the line normal to the line between
                       the contact and ref_contact, over the body
                       bounding box, passing through the center of the
                       body bounding box.

           Resistance  Extract the resistance value (see below).

           Inductance  Extract the inductance value (see below).

  Any number of Measure lines can appear in a device block

  Spice specification_args 
    The Spice keyword specifies the format for the SPICE output part of
    the listing from the pnet command in the extrc menu.  The specification
    is copied verbatim, except for the following substitutions:

    %c%cname     The cname is a contact name (from a Contact line).  This
                 token is replaced with the group number of the contact.

    %m%mname     The mname is a name from a Measure line.  The token is
                 replaced with the result of that measurement.

    %n%          This token is replaced with a unique index count for
                 the device type.

    Above, cname and mname can be followed directly by '%' and other text,
    for a concatenation function.  For example
        "L=%m%Length%u"  might be replaced with "L=.8u"

  Cmput specification_args
    The Cmput line formats the output used in the cmput command (see
    below).

The pnet command in the extrc menu now (by default) has two additional
fields for the output from each cell.
    Field 1)  The netlist (as before)
    Field 2)  A list of extracted devices, with information about the
              device, including Measure results.
    Field 3)  A list of the SPICE lines for extracted devices which have
              a Spice specification in the Device block.

If NoPnetDevs is set with the !set command, Field 2 (the extracted
device listing) is skipped in the pnet command.

If NoPnetSpice is set with the !set command, Field 3 (the SPICE listing
for extracted devices) is skipped in the pnet command.

 
There is a new function for scripts:
    Layer(string, depth, flat)

  This is very similar to the !Layer command,  The string is of the form
  "new_layer_name  layer_expression", depth is the depth to process (an
  integer), and flat is a flag (0 or not 0).  If flat is nonzero, the
  layer is created in the current cell using geometry to depth.
  Otherwise, the layer is created in each subcell to depth, using
  geometry only from the cell.

The technology file (except in Device blocks) and script files can now
 use backslash line
 continuation, for example the following would be read as one line:

    This a line to be continued, the backslash \
    must be the last character in the line.

Scripts can now be included in the technology file.  These scripts will
appear as buttons in the user menu, as with other scripts.  However,
scripts in the technology file can not be loaded into the debugger.
This should be very useful for including simple technology-specific
commands, such as those that create special extraction layers.  See
xic_tech.scmos for an example.

In the technology file a script is included as follows.  The Script
keyword is followed by the name which will appear in the command button.
This will supersede any script file with the same name.  The script text
must be terminated with the keyword "EndScript".

  Script script_name
  script text
  ...
  EndScript

Xic now contains functionality for accurately calculating resistor values
of arbitrarily shaped resistors.  This is accomplished by partitioning the
resistor into a grid.  Each square of the grid is represented as a lumped
resistance, and the resulting mesh is solved.  The original version called
WRspice to solve the mesh; Xic would produce a (rather large) SPICE file
containing the mesh description, which would be given to WRspice, which
would run an "op" analysis.  The present version incorporates the matrix
solution code within Xic for efficiency.

The resistor solver can be accessed through a new Device block Measure
keyword: Resistance
   For example:
     Device
     Name res
     ...
     Measure value Resistance
     End

By including the "Measure xxx Resistance", all resistances may be
extracted and the values will appear in the output of the pnet command.
When computing the resistance, the layers in the Body specification are
checked for a Resistance specification, and if found, that value is taken
as the ohms per square.  If not found, 1 ohm per square is assumed.

A second way to use this functionality is described below.

The cmput command in the extrc menu has been modified to work with device
parameter extraction.  It now has two basic modes.

If the user clicks on the body area of a device defined in the technology
file, an extraction is performed and the results printed.  The format of
the output is defined in the device block following the Cmput keyword:
    Device
    ...
    Cmput format_spec
    End
The format_spec has exactly the same syntax as the Spice keyword, however the
%n% substitution will always return "0", so is meaningless.  An example
is
    Device
    Name res
    ...
    Measure Resistance Resistance
    Cmput Resistance = %m%Resistance ohms
    End

If the user drags, or presses and holds, the behavior of the command is as
in previous versions, i.e., a ghost rectangle is shown, and the per-square
parameter from the current layer adjusted for the ractangle aspect ratio
is printed.

The peek command now prints the names of the layers found, in addition
to the delayed redraw.  Note that only physical objects are considered,
not labels.

Note (put this somewhere)
The name for Device blocks does not have to be unique.  There can be
multiple descriptions of the same device, which whould be necessary,
for example, if a process has two resistor layers.

Inductance can be extracted, using an algorithm similar to resistance,
i.e., square counting.  This assumes "microstripline" geometry, meaning
a conductor separated from a ground plane by a uniform dielectric.
The Measure keyword is "Inductance".  The inductance per square is
derived from the microstrip parameters for the top conductor layer.

One way to set up inductors for extraction is to define dummy layers
LB and LC.  LB will surround the region of a conductor where inductance
is to be measured.  LC is used to identify contacts (inside LB and on
the conductor).  A Device block using these layers should be added to
the technology file.  See the xic_tech.hyp file provided for an example.


New command: !join
This will combine selected touching objects on the same layer into
polygons.  This can reduce the size of the data file.  Polygons
are limited in vertex count to 600, if a polygon would exceed this
count, multiple polygons are produced.

New command: !split
This is basically the reverse of !join.  Selected polygons and wires
will be converted to collections of boxes and four-sided polygons.

The format for the Conductor keyword in the technology file (in
physical layer blocks only) is
  Conductor [ exclude _expression_ ]
If the keyword "exclude" and a folllowing layer expression are given,
the regions of the current layer under which the expression is true
are clipped out for grouping purposes.  For example, in CMOS technology
a transistor is formed by a strip of CAA (active area) bisected by a
CPG (polysilicon) gate.  If "Conductor exclude CPG" is given in the
CAA layer block, the two pieces of CAA will be given separate group
numbers, which is necessary to keep the transistor source and drain
separate.
-------------------------------

Fixed bug in extracted device contact group recognition.

Manhattan polygons with empty fill are now shown in physical mode with
"fat" line segments, like boxes.

Fixed some odd bugs in the !join command.  The !join command better
handles non-manhattan objects.

Fixed problem in group numbering algorithm.

There is now a capability for setting electrical mode device properties
from extracted parameters from the corresponding physical device.
There are new Device block keywords:
   Model string
   Value string
   Initc string
In each case, "string" is a text line with substitutions similar to the
Spice and Cmput keywords.  These format the property text which is
given to the electrical device.

The new command "exset" in the extrc menu allows settin device properties
from extracted parameters.  In electrical mode, one clicks on or drags
over device symbols, which will have their model, value, and initc properties
reset according to the specifications in the Device block, if given.

In physical mode, clicking or dragging over device bodies will update the
properties of the corresponnding electrical devices.

There is a command line command "!exset" which will reset the properties of
all devices in the current cell.

The duality between electrical and physical devices must be established
for exset to work.

Device keyword: ContactsOverlap
Ordinarily, device contact areas can not overlap.  Giving this keyword
allows overlap, which is necessary for some vertical device structures.

new !set variable: NoPnet
When set, skip the standard netlist output in the pnet command.  If
NoPnetDevs is also set, the output file contains a SPICE listing
derived from the physical layout.

update to xic_tech.hyp, model.lib

The search function in help would crash the program if the "old" Linux
binary was run under a glibc system such as RedHat 5.x.  This is due
to subtle incompatibilities between the shared libraries.  Although
this particular problem was fixed, Linux users should make sure to
grab the "right" binary distribution files.  It is because of problems
such as this (in part) that FreeBSD is recommended over Linux.

-------------------------------------------

!exset was broken, fixed.

There is a new device property for setting the default locations of
the property labels.  It this property does not appear, the internal
default locations are used.  This property allows more control over
label placement, on a per-device basis.  This property should only be
used in devices in the device.lib file.  Presently, the property
can only be added with a text editor by editing the property strings
in the device.lib file.

Property number: 12
Property mnemonic: Labloc
Syntax: 12 pname code [ pname code ] ... ;
    pname is one of the tokens "name", "model", "value", "initc".
    code is an integer, -1 - 15.  If the code is -1, the default placement
    is used.  If code is 0 - 15, the placement and justification are as
    shown below:
       0.  .1
       2.  .3
    .4 ------ 8.
    .5 |    | 9.
    .6 |    | 10.
    .7 ------ 11.
      12. .13
      14. .15
 
The default positions are:
    if (height > width)
       name 5, model and value 9, initc 10
    else
       name 2, model and value 13, initc 14

The device.lib file was modified to change the name property location of
terminal devices.

The blinking selections now show in subwindows in static colormap modes.

For the !source command or the source button in the prpty popup, the
device can now be resolved (p or n type) if the referenced model is not
in the input file if 1) the model is in the model.lib database, or 2)
the model name starts with "n" or "p".

The group command is now available in electrical mode.  When on, the groups
are shown in physical mode subwindows.  If group is entered in electrical
mode, the selection of groups is not available.

The !extract function will now create a schematic, much like the
!source command, from the physical layout.  The schematic will be created
only if the schematic is empty.  Otherwise, the device properties will
be updated.

The background DRC (bgchk) process was not ignoring certain interrupts
such as SIGHUP.  This has been fixed.  When a signal is caught, a message
is now printed in the drcerror.log file.

Bug: rotating a subcell and adjacent objects by multiples of 45 degrees
will often introduce a 1-unit gap, which breaks connectivity.  I haven't
found a way to reliably fix this.  This only happens between objects in
the parent and objects in subcells.  The present algorithm minimizes
but does not eliminate these errors.

There is a new substitution for use in Device block Spice, Cmput, etc
keywords: %e%.  If the electrical dual of the physical device is known,
the %e% and preceding characters are replaced by the name of the electrical
device.  If no dual is known, the behavior is the same as %n%, i.e.,
%e% is replaced by an assigned integer.  Example
   Rp%e% would become R3 if the dual "R3" exists, or would become
   Rp5 if no dual is identified, and this is the sixth resistor found.

The substitution %f% is equivalent to %e%, except that if the dual device
is unknown, the entire token plus any leading white space, is eliminated.
For example, the line "Resistor %f%, ..." would become "Resistor R3, ..."
if the dual is "R3", or "Resistor, ..." if no dual exists.

The example device blocks in the xic_tech.hyp file have been modified
to use %e% instead of %n% in the Spice line, and also have a "p" suffix after
the key letter.  Thus, after !exset, the devices with an electrical dual
will use the dual's name, and those without a dual will have the "p" as
in Rp1, Rp2, etc.

New command: !addcells
This command adds "missing" instances to the current cell, in physical
or electrical mode.  An instance is "missing" if it is referenced in
the opposite mode of the current cell, but does not appear in the
current cell.  Cells are not added if they are empty.  The new
instances are arrayed below existing objects.  For example, suppose
one creates a schematic consisting of several subcells from some
library.  One can then switch to physical mode and use this command to
obtain the physical instances, which can then be moved into place. 
This avoids having to use the place command.  The command can be used
in either mode.

The "mark" button had some problems, at least with a static colormap.
These have been fixed.

NOTE
Something to watch out for.  Assume a subcell in a hierarchy has nonempty
electrical and physical parts.  Suppose that one part is not used as a
subcell/subcircuit in the design.  If the parent cell is written as GDS/CIF,
the output will *not* contain the unreferenced part of the subcell.  The
loss of information can be avoided by using the !addcells command, or
otherwise placing all of the needed subcells.

There is a new command button in the cnvrt menu: imprt.  The purpose
of this command is to copy the electrical or physical part of another cell
into the present cell.  If in physical mode, only the physical part is
copied, and similar for electrical mode.  This command is useful for
merging data if a physical layout and electrical schematic exist in separate
cells.

The target for the copy is always the cell shown in the main window. 
After pressing imprt, the user is prompted for the name of a cell or
file to use as input.  If the name entered matches a cell in memory,
the copy is performed and the command exits.  Otherwise, the name is
expected to be a file.  If the file exists, the internal symbol table
context is switched and the file is opened with an empty temporary
symbol table.  The file can be an xic cell, or a GDSII or CIF
hierarchy.  If the top level cell in the hierarchy matches the name of
the current cell or the file contains only one cell, the copy is
performed, otherwise the user is prompted for the name of a cell in
the hierarchy to copy.  The user can bring up the cells popup to see a
listing.  After using cut/paste or typing the name of a cell at the
prompt, the copy is performed, the temporary symbol table and its
contents are destroyed, and the command exits.

There is no undo capability for this operation.

new variables:
SourceCreate (boolean)
   In the !source command and the source button in the prpty menu,
   ordinarily devices are created only if the cell is empty, existing
   devices have properties updated.  If this variable is set, missing
   devices will be created.
SourceAllDevs (boolean)
   In the !source command and the source button in the prpty menu,
   ordinarily only devices which have fixed (user-specified) device
   names have properties updated.  This is to avoid errors, since the
   internally generated names can change, and may not match those in
   the SPICE file.  If this variable is set, all devices will be
   updated.
NoExsetCreate (boolean)
   Unlike the !source command, the default behavior of the !exset command
   is to create missing devices.  Setting this variable will prevent
   device creation.

Fixed an integer overflow problem in the transform stack which happens
sometimes when operating on 45 degree rotated cells, or on magnified cells.

Made it impossible to get control characters into dialog boxes that are
asking for a file name.

----

The macro-expanded drc rules were being written out to the technology
file during an updat.  Now the unexpanded forms are being written, which is
what should happen.

Fixed a subtle problem when using edit from the cells panel on a
selected name in the listing.  Symptoms are crashes and "cell name too
long" error messages.  After pressing edit, if the "cell modified,
save it?" prompt came up and the user answered 'y', the text was
updated in the listing, trashing the selected name before it was
used.

--------------------------------------

Fixed bug in display of labels in magnified subcells when LabelTrueOrient
is not set.

Added a test for update of a cell bounding box when a cell is opened for
editing.  There are times when the bounding box is incorrect at this point,
if a subcell has changed.

New !set variables:

UsePixmapStore (boolean)
  When this variable is set, the screen refreshes a buffered through an
  in-core pixel map.  The geometry is rendered in the map, and when finished
  the map is copied to the screen.  This is generally faster than drawing
  directly to the screen.

UseDisplayCache (boolean)
  When this variable is set, boxes are cached during rendering, and displayed
  with a multiple object rendering call.  This should be a little faster
  than rendering the boxes individually.

Note about display updates:
  When displaying a large section of a complex design, the "tinyb" button
  in the attri menu should be on.  This prevents expansion of subcells
  that are very small, often speeding the display.  Without "tinyb" or
  a limit on expansion depth, display time can be quite long.

!!! set tinyb in place
--------------------

Changed event handling for button release events to avoid some subtle
problems with some window managers.

Fixed a tiny bug that would put the ghost rectangle in a strange state
if one presses button one in a drawing window, and releases it outside of
the drawing windows.

Fixed the DRC initialization which was searching for "NDRC" from the whole
cell, even if the drc area was tiny.  It now searches only over the drc
area.

Fixed a problem with hardcopy causing an immediate segmentation fault.

Fixed a but in model recognition in the "!source" command.

---------------

Fixed bug in the SetLayerSpecific script command.

The list of known variables printed with "!set ?" is now nicely organized.

Xic no longer dies horribly on systems with both PseudoColor and
TrueColor visuals.  Xic will always use the default visual.

Internal changes to support Microsoft Windows port.

Put back the resolutions of 300 and 400 dpi in the color postscript
bitmap printer drivers.  Note that high resolutions need a lot of
memory, 160K per square inch at 400dpi.

The postscript bitmap hardcopy drivers should now exit gracefully if
the file system is full.  The (partially) created file is deleted.

Insufficent memory is no longer an application-fatal error in the
btimap drivers.

Fixed a bug in the auto-height mode of postscript bitmap drivers which would
affect resolutions other than 72, improperly scaling the y axis.

-----------------------

The info command now prints specifics about the transfromations of
labels.

Fixed a minor bug which caused text labels that were not wider than high
(e.g., "B1") to sometimes be rotated incorrectly.

Document: Using Remote WRspice Services

Xic has the capablity of accessing WRspice which is installed on other
machines in a network.  Sometimes, for reasons of execution speed or
load factor, it is preferable to run Xic on a different machine, perhaps
at a desktop, while WRspice may be licensed to a a machine more suitable
for intensive computational tasks.  This document describes how to install
the WRspice server daemon, and how to access remote WRspice executables
from within Xic.

I.  The WRspiced SPICE server Daemon

A machine wich is used to provide remote access to WRspice must have the
WRspiced daemon running.  This is a program which provides a network
interface to the WRspice executable.  Although the wrspiced program does
not check for the license server,  the machine must be licensed in order
for WRspice services to be made available.

In order for the WRspice services tp be exported, the services database
of the server machine, and all remote machines which will access the
service, must be updated.  This is most commonly done by modifying the
/etc/services file.  A line must be added to this file:

    spice           3002/tcp         # Whiteley Research Inc

The "3002" is the port number dedicated to this service.  If this port is
already in use, another (unused) port can be substituted, but it must
be the same on all local machines.

Once the services database is updated on the server, the wrspiced program
can be run.  The program is supplied with the WRspice executable, and is
generally found in /usr/local/bin.  It is usually advantageous to start
the wrspiced from the boot script, similar to the license server.  On
first time installation, or in general, the program can be started from
the command line.  On most systems, the program must be started by root.

To start the service, simply (as root) type "wrspiced".  In special cases
there are options which can be used.  The full command line is

wrspiced [-l logfile] [-p program] [-m maxjobs]

logfile is the path to the log file, and defaults to /tmp/wrispiced.log
program is the path to the wrspice executable, which defaults to
    /usr/local/bin/wrspice
maxjobs is the maximum number of running jobs which the server can
accommodate at one time, the default is two.
The wrspiced program is also sensitive to the environment variables
SPICE_EXEC_DIR, SPICE_PROG, and SPICE_DAEMONLOG.

Once the wrspiced program is running, remote access to WRspice on
the server should be possible.

II.  Remote Access From Xic

The services database on the machine running Xic should be updated to
include the spice/tcp service (see above).  There are two ways to tell
Xic to look for and use a remote WRspice server:
    1) set the environment variable "SPICE_HOST" to the name of the
       WRspice server before running Xic, e.g.,
       "setenv SPICE_HOST the.server"..
    2) While in Xic, use the "!set" command to set the SpiceHost variable
       to the name of the server, e.g., "!set SpiceHost the.server".
       This overrides any SPICE_HOST given in the environment.

The "run" command in Xic should now connect to WRspice in the usual way,
and all of the facilities of WRspice should be available from within
Xic, just as if the WRspice process was local.

III.  Tips and Troubleshooting

If Xic crashes unexpectedly, a WRspice process can be left on the server
machine.  Although this causes no harm, these processes use system
resources and subtract from "maxjobs" so should be killed.  The processes
can be listed with the command (on the server)

  ps -auxww | grep wrspice

If an unexpected wrspice process is found, the "kill" command with the
listed process number sould be used to kill the process.  Unlike the
license server, the wrspiced server does not periodically purge "dead"
processes.  This can also be used to kill the wrspiced process, if
necessary.

Although the remote machine should be given access to the Xic screen
automatically, the X-windows library routines which support this
appear to not work correctly in some versions of X.  The symptom of
this is that the first time Xic calls the remote WRspice, and error
message is produced indicating that WRspice can't initialize graphics. 
WRspice is still available, however no plots can be produced.  On the
second and subsequent runs, access should be normal.  This problem can
be avoided by issuing the command

    xhost +server

where "server" is the name of the WRspice server machine, from the
command line before starting Xic.  Note that in either case, access is
provided to the server machine EVEN AFTER Xic EXITS.  To turn off
access, issue the command

    xhost -server

If your machine has correctly functioning access control, screen access
from the WRspice server is disabled after running Xic, if it was disabled
initially.


Fixed a problem with orphaned dialog boxes casuing program crashes.

The SetTransform(angle, mirrorY, magnif) script function was broken:
the angle argument was passed to "mirrorY".

The SetTransform(...) function has been modified, mirrorX is now allowed:
  SetTransform(angle, mirror, magnif)
  angle: rotation angle in degrees (as before)
  mirror:  if bit 1 is set, mirrorY
           if bit 2 is set, mirrorX
  magnif:  magnification (set to one if given value <= 0)

Examples:
  Set rotation 180, mirror about X axis:
    SetTransform(180, 1, 1)
  Set rotation 180, mirror about Y axis:
    SetTransform(180, 2, 1)
  Set rotation 180, mirror about X,Y axes:
    SetTransform(180, 3, 1)

The Place() script function got its coordinates mangled, fixed.

Also fixed similar argument bug in Open(), WriteChar(), SetLayerSpecific();

The color and fill popups (in the attri menu) can now be moved by dragging
with button 1.  They will snap back to the default locations if the main
window is reconfigured, though.

A lot of the subwindow placement code was rewritten.  The window placement
should be a little more accurate, and title bars on "transient" windows
should not cause misplacement which obscures the prompt line.

If the width passed to the Window(x, y, width) script command is less
than or equal to zero, a centered-full-view of the current cell is
generated (x, y are ignored in this case).

New script command:
   Expand(winnum, string)
This sets the expansion mode for the display in the window specified in
winnum.  The winnum argument is an integer 0-4, where 0 refers to the
main window, and 1-4 correspond to the subwindows brought up with the
vport command.  The string contains characters which modify the display
mode, as would be given to the expnd command in the menus.
  integer    set expand level
  n          set level to 0
  a          expand all
  +          increment expand level
  -          decrement expand level

-----------------------------

The Help system now uses the same help window for reference text.  The
multi-window mode of previous versions can be restored by setting the
variable HelpMultiWin with the !set command.

New script function:
    Arc(x, y, radX, radY, width, ang_start, ang_end)
This produces a round figure.
    x, y:           center coordinates
    radx, rady:     x and y radii
    width:          width of the arc
    ang_start       starting angle in degrees
    ang_end         ending angle in degrees

If ang_start and ang_end are equal, and width is zero, an elliptical flash is
produced, otherwise a donut figure is produced.  Angles are defined
from the positive x-axis, in a counter-clockwise sense.  The arc is
generated in a clockwise direction.

New script function:
    (integer) Sides(numsides)
This sets the number of segments to use in generating round opjects.  The
function returns the present value for this parameter.  The value is
reset if the argument is in the range (8 <= sides <= 90).

New script function:
    Yank(l, b, r, t)
This function puts the geometry in the specified rectangle in yank
buffer 0.  It can be placed with the Put() function, or the put command.

New script function:
    Put(x, y, bufnum)
This puts the contents of the indicated yank buffer in the current layout,
with the lower left at x, y.  The bufnum is the yank buffer index, which
can be 0-4.  Buffer 0 is the most recent yank or erase, buffer 1 is the
next most recent, etc.

New script function:
    Logo(string, x, y, width, pix)
This creates and places physical text.  The text is positioned at x,y
according to the current justification.  The text will be scaled to
the given width.  The pix argument is 1-5, corresponding to the stroke
width.  A larger value gives a heavier stroke.

New script function:
    Justify(hj, vj)
This sets the justification for text created with the logo and label
commands and corresponding script functions.  The arguments can have the
following values
  hj = 0  left
       1  center
       2  right
  vj = 0  bottom
       1  center
       2  top

New script function:
    Split(x, y, flag, orient)
This will sever selected objects along a vertical or horizontal line through
x, y, if flag is nonzero.  If orient is 0, the break line is vertical,
otherwise it is horizontal.  If flag is zero, the function will return
1 if an object would be split, 0 otherwise, though no objects are actually
split.

New script function:
    CreateSymbol(filename)
This will create a new symbol from the contents of the selection queue.
The cell name is the last component of the filename path (if a path
is given).  The cell will be added to the symbol table, and will be written
to disk.

Fixed bug, in scripts, '#' lines were not ignored as a comment unless
followed by a space.

New script function:
    ChangeLayer()
This function will change the layer of all selected geometry to the current
layer.

New script function:
    PlaceParams(llref, nx, ny, dx, dy)
This function sets the parameters used for instance placement.  If llref is
nonzero, the lower-left corner of the bounding box will be placed at the
reference, otherwise the cell's origin will be placed at the reference,
in physical mode.  This is ignored in electrical mode by cells with
connections assigned.  The remaining parameters define an array for
use in physical mode.  For the unarrayed case, nx and ny should be one.
The dx and dy are the spacing between cells in the array, and are ignored
if the corresponding nx/ny is one.

New script function:
    Replace(cellname, add_xform)
This will replace all selected subcells with cellname.  The same transformation
applied to the previous instance is applied to the replacing instance.  In
addition, if add_xform is nonzero, the current transform will be added.
The function returs 0 if successful, 1 if the new cell could not be
opened.

Fixed a bug in the replace function that would cause wrong positioning.

Fixed bug that sometimes caused an incorrect cell bounding box to be shown.

-------------------

Empty if or else statements in scripts should no longer cause problems.

In scripts, the predefined constants TRUE (1) and FALSE (0) are now available.

Shrinking the main window size to where less than one column of the layer
table is displayed no longer causes an exception.

In scripts, the construct
  if (a = b)
    ...

now works.  Note that this is *assignment*, not to be confused with (a == b).
In the assignent case, the "true" branch is taken if b is nonzero.  Previously,
   if a = b
    ...
would work, the parentheses caused a syntax error.  The parentheses are
optional, but often improve readability.

The manual states that the Strcmp() script function returns +/-1 or 0,
actually the positive or negative values are the lexographic differences
and may not be unity.  This is the same as the C strcmp() function.

Fixed a bug in the script evaluation: forms like
    a = 10
    ShowPrompt("a", a)
would print "10 10".  The string input would be overwritten by an existing
variable of the same (unquoted) name.  This has been fixed.

Fixed (again) the bug in the OldLinux port that crashed the program in
a help search.  This became un-fixed during the Windows NT port.

The execution engine for scripts has been changed to a stack-based
class hierarchy from the previous finite state machine implementation.
The main advantage is that the debugger can now single step through
loops.  Also, the single stepping now bypasses blank and comment lines
and non-executed lines.

The recognition of typed characters to activate menu buttons is now
case insensitive.
------------------------------------

If the kic_error.log file couldn't be opened for some reason, there
was no diagnostic, and errors printed to the screen would contain trash
and the program might even crash.  This has been fixed.  If the
xic_error.log file can not be opened, a warning is shown, and Xic
will continue without logging errors to a file.

If the xic_run.log file can not be opened, a warning message is now
shown.  Xic will continue without history logging.

Fixed bug:  The save file prompt on exit for cif files set the suffix
to "gds".

All cells from a cif/gds hierarchy are now given the file type of
origin.  This means that if you save a subcell from a cif/gds
hierarchy, the default behavior is to save it as a hierarchy in
the same format.  One can save it as a native symbol by giving it
an "xic" extension.

New feature in the push command.  Now, the history of which cells have
been pushed to and popped from is saved.  Say you push into the
hierarchy and pop back.  When the push button is active, pressing the
Enter key repeatedly will cycle through the the last push sequence.
Pressing Shift-Enter will cycle backwards, i.e., pop.  If a subcell is
clicked on, the subcell is pushed to in the usual way, and all past
history "below" the present level is freed.

EDIF (Electronic Desigh Interchange Format) capability has been added.
EDIF files use a Lisp-like format for general CAD data.  The supported
format is 2.0.0.  There are two new command buttons in the cnvrt menu:
toedf and fredf.  The fredf function converts an edif file directly to
Xic files.  The toedf function allow exportation to an edif file.
EDIF files can be read directly with the edit command.  When saving
a cell, extensions "edif", "edi", and "edf" can be used to coerce
EDIF format.

The EDIF functionality is still a work in progress, so beware.  Don't
expect the electrical data to be portable.  The edif-200 format does
not support off-orthogonal rotations.

All date stamps added to files are now in GMT.  The year in GDS
files is now saved as four digits.

The frgds command was not outputting objects on undefined layers.
This has been fixed.

Clicking on objects with no user properties updates now correctly updates
the prpty menu text.

The prpty command has changed.  Previously, each clicked-on object was
shown as selected, cumulatively.  This is a bit distracting.  The new
mode ordinarily shows only the presently marked object.  Previously marked
objects can be visited with the arrow keys as before.  If during a
property addition an alternate object is clicked on, that object is shown
as selected.  While the global button is active, the entire list is shown
selected as before.  The desel command clears the list and any selected
objects as before.
------------------------------------------------------------------

There is a new '!' command: !rename
The purpose of the rename command is to allow modification of all of
the cell names in a hierarchy.  In Xic, every cell name in the
database must be unique.  When combining designs from various sources,
it is necessary to take measures to avoid name clashes.  The !rename
command allows the manipulation of prefixes/suffixes of all of the
cell names in a hierarchy.  For example, each cell name can be
prepended with a unique prefix, say the author's initials.

symtax:  !rename [prefix]|[-s] [suffix]

The prefix and suffix are string tokens.  If two string tokens are
given, the "-s", which implies suffix, can be skipped.  The string
tokens can contain any alphanumeric characters plus '$', '?', '_'. 
String tokens given in this form will be prepended/appended to the
current cell name, and each cell name used in the hierarchy.  The
string tokens can also have the form /str/sub/ which indicates a
substitution.  This causes the "str" if it appears as a prefix/suffix
of a cell name to be replaced by sub.  The sub can be empty (i.e., the
form is /str//) which can be used to undo the previous addition of a
prefix or suffix.  Forms like //sub/ are equivalent to just giving
"sub" as a string.

The Red Hat 5.0 release was not listing files in the cells pop-up when
the files button was pressed.  This is due to a bug in the @#%& Linux
gnu c library, and has been fixed.

The edif read/write has evolved.  Connectivity constructs have been
added to the output, and other changes have been made.  The file format
isn't entirely compatible with the past release.

-------------------------------------

When Xic establishes communications to a remote wrspice server, Xic
would attempt to add the remote machine to the list of those allowed
to write to the screen.  This apparently can not be done reliably,
thus this feature has been removed.  A message now alerts the user if
permission is denied, in which case Xic should be restarted after
giving permission to the remote machine (with the "xhost" command).

The path resolution in the wrspiced daemon was broken, meaning that it
would only work if started from the directory containing the wrspice
binary.  This has been fixed.

There is a new command button in the DRC menu: level.  This allows the
user to set the error recording level.  The choices are
level 0:  record a maximum of one error per object
level 1:  record a maximum of one error of each type per object
level 2:  record all errors found
Previously, all errors of type Overlap, IfOverlap, NoOverlap, MinArea,
MaxArea were recorded, but only one error of types MinWidth, MinSpace,
MinSpaceTo, MinSpaceFrom, MinOverlap, MinNoOverlap was recorded.

There is a new DRC feature: user defined rules.  These allow more complex
tests to be defined.

User defined rules are defined in separate blocks ahead of the physical
layer specification blocks in the technology file.  The rules are referenced
from the layer blocks.

A user defined rule definition has the following form:

DrcTest testname arg1 arg2 ...
Edge Outside/Inside expression
MinEdge dimension
MaxEdge dimension
Test Outside/Inside dimension expression
TestCornerOverlap dimension
Evaluate logical_expression
End

The first line of the block starts with the keyword "DrcTest".  This
is followed by a name for the test, which must be unique among the
keywords recognized in the technology file.  This is the name by which
the test will be referenced.  Following the name are 0 or more
argument tokens.  These can be any alphnumeric text strings, which
represent parameter names.  These are the formal arguments to the
rule, and appear in the lines that follow in the form %token%, which
will be replaced by the actual arguments given in the references to
the rule.

The rule is evaluated at each edge of an object.  Each edge is divided into
segments, depending on specifications.  For each segment, a rectangle is
constructed, extending either into or out of the object.  Tests are applied
to these regions,

The Edge keyword indicates an edge specification.  There can be 0 or more
edge specifications.  Following the Edge keyword is the word "Outside"
or "Inside" followed by a layer expression.  When the edge is evaluated
the regions of the edge where the expression is true are found, either
just inside or just outside of the object.  The default edge is the set
of regions here there is no material of the same layer as the object just
outside the edge, i.e., there is no adjacent object on the same layer.
The results from each Edge specification are and'ed together with the
default edge to determine the segments where tests are performed.
The expression part of the Edge specification can contain substitutions.

The EdgeMin and EdgeMax lines, which are optional, allow setting limits
on the segments used for testing.  If given, an edge segment tested whould
have length greater or equal to the EdgeMin dimension, and less than or equal
to the EdgeMax dimension.  The dimensions appearing after the keywords can
contain substitutions.

There must be one of more lines given which start with the keyword "Test".
These specify the tests which are applied to regions constructed from the
edge segments.  Following "Test" is one of the keywords "Outside" or
"Inside", which determines whether the test area extends outside or inside
the object.  The following token, which can contain a substitution, sets
the length by which the test area extends out of or into the object.
The rest of the line contains an expression, which can contain substitutions,
which is evaluated in the test area.  The expression, and the expression
used in the edge lines, consists of layer names and logical operators.
The test is true if the expression is true somewhere in the test area.
The expression is true if there is a non-zero area where the logical
expression would be "dark".

The optional TestCornerOverlap test is a special supplemental test when
evaluating "MinWidth".  This measures the mutual edge or overlap of
adjacent objects on the same layer.  The width if the mutual edge must
be greater than the dimension (which can contain substitutions).

The final line, which begins with the keyword "Evaluate", specifies
a logical expression involving an array named "test".  The "test" values
represent the results of each of the Test lines.  The index, which is
0-based, corresponds to the order of the test lines given.  Substitutions
are allowed in the expression. 


A rule is implemented by adding a reference to the rule in the layer
block of a physical layer.  The format is

    testname arg1 arg2 ... [string]

The testname is the keyword defined in one of the rule definitions,
This is followed by the actual arguments, which must correspond in
number to the rule arguments.  These are followed by an optional string,
which is arbitrary explanatory text.


Examples:

For initial examples, below are implementations of the built-in rules
which involve edge evaluation.

DrcTest myMinWidth a b
Test Inside %a% !%b%
TestCornerOverlap %a%
Evaluate fail = DRCuserTest(0)
End

DrcTest myMinSpace a b
Test Outside %a% %b%
Evaluate fail = DRCuserTest(0)
End

DrcTest myMinSpaceTo a b
Edge Inside !%b%
Test Outside %a% %b%
Evaluate fail = DRCuserTest(0)
End

DrcTest myMinSpaceFrom a b
Edge Outside %b%
Test Inside %a% !%b%
Evaluate fail = DRCuserTest(0)
End

DrcTest myMinOverlap a b
Edge Inside %b%
Test Inside %a% !%b%
Evaluate fail = DRCuserTest(0)
End

DrcTest myMinNoOverlap a b
Edge Outside !%b%
Test Inside %a% %b%
Evaluate fail = DRCuserTest(0)
End

Layer M1
...
myMinWidth  3.0 M1
myMinSpace  2.0 M1 
myMinSpaceTo 1.0 M2
...


Rule:  Objects on M3 smaller that 10 microns must be separated by .5
microns, Objects larger than 10 microns must be separated by .75 microns.

DrcTest myMinSp1
EdgeMin 10
Test Outside .75 %b%
Test Inside 10 !%b%
Evaluate fail = DRCuserTest(0) & !DRCuserTest(1)
End
DrcTest myMinSp2
Test Outside .5 %b%
Evaluate fail = DRCuserTest(0)
End

Layer M3
...
myMinSp1 M3
myMinSp2 M3
...


Rule:  Objects on M3 must be larger than 1 micron, unless over I1 in which
case the width must be 1.25 microns.

DrcTest myMinW1
Test Inside 1 !%b%
TestCornerOverlap 1
Evaluate fail = DRCuserTest(0)
End
DrcTest myMinW2
Test Inside 1.25 !%b%
Test Inside 1.25 I1
TestCornerOverlap %a%
Evaluate fail = DRCuserTest(0)
End

Layer M3
...
myMinW1 M3
myMinW2 M3
...


There is a new script function: (int) DRClevel(level)
The argument is an integer 0-2 which sets the error logging level for
DRC.


There has been some changes to the ruler facility in the attri menu.
Previously, the ruler endpoints were constrained to fall on coordinate snap
points.  This is no longer true.  If the user clicked twice on the same
point while adding a ruler, the ruler drawing routine aborted, leaving
Xic in XOR drawing mode (which has a bizarre effect on the drawing windows).
This has been fixed.  The gradation is now never less than six pixels
for legibility.  If one zooms out to the point where the ruler scale
is invisible, the ruler will not be shown.


Drc's of large arrays of cells should run much faster.
--------------------------------

The Layer() script function should now work.

There is an additional capability now included in all DRC rules.  The
syntax for a design rule in a layer block is now

    keyword [ Region expression ] ...

Ordinarily, a design rule test proceeds as follows.  For each object (box,
polygon, or wire) each test listed for the layer of the object is run
in sequence.  The Overlap, IfOverlap, NoOverlap tests are applied to
the area of the figure, and the other tests are applied along each
edge.  The MinWidth and MinSpace tests take as a target the same layer
as the object.

If the Region and associated expression are given in the rule specification,
the target area becomes those regions where the expression is true,
within the boundaries of the object.  The target for MinWidth and MinSpace
is the expression.  The rule is basically decoupled from the original layer
of the object.  The Overlap tests are applied to the areas where the
expresson is true, and the other tests are applied to the edges of these
regions.  The original object serves as an overall clipping region for
the tests.  The expression, if given, has no effect on the target layer or
expression in rules taking a target, such as MinSpaceTo.

Examples:

Layer I1
...
MinWidth Region M1 1.0

This limits the M1 regions over I1 to a width of 1.0.


Layer I1
...
MinSpaceTo Region R1&I1B M2 1.2

This rule states that the regions of intersection of R1, I1, and I1B must be
1.2 microns away from regions of M2.  M2 may or may not intersect with the
other layers.

The DRCcheck() script function has been renamed DRCcheckArea(), and
now expects a fifth argument:

    DRCcheckArea(l, b, r, t, fd)

The first four arguments specify the rectangular area to test, as before.
The new argument is either a file descriptor obtained from the Open()
function, or zero.  If a file descriptor is passed, the drc output goes
to the file, otherwise the output os printed on-screen (as before).

A test has been added as part of the DRC corner overlap test to catch
an error condition that was being missed.  If two corner-adjacent figures
are separated by a thin third figure, for example

                     ---------
                     |       |
                     |       |
           |=================|
           |         |
           |         |
           -----------

the existing MinWidth test would not catch the error.  The new test
will flag these errors.

The command !showz [y|n] will turn on/off a transient display of the test
areas during DRC.  This is for debugging, or for the curious.

Fixed a bug in the frcif command which caused labels to be written
incorrectly in the generated files at times.

If a cif or native file was missing a "L" line ahead of the first
geometry, Xic would crash.  This has been fixed.

Fixed some rather serious bugs in the fredf command.

New script functions
(int) DRCcheckArea(l, b, r, t, fd)

This functions replaces the old DRCcheck(l, b, r, t) function.  As with the
old function, DRCcheckArea performs DRC over the rectangular area designated
by l, b, r, t.  The fd is a file descriptor returned from the Open()
function, or 0.  If a file descriptor is passed, output is recorded in the
file.  If 0 is passed, output goes to the error logger which appears
on-screen, as with the old function.  This function returns the number of
errors detected.

(int) DRCcheckObjects(fd)

This function checks each selected ovject for design rule violations.  The
fd argument if a file descriptor returned from the Open() function, or 0.
If a file descriptor is passed, output goes to that file, otherwise
output goes to the on-screen error logger.  This function returns the
number of errors found.

(int) DRCregisterExpr(expr)
This function creates and tags a parse tree of the string argument, which
is a layer expression, for later use.  This avoids the overhead of parsing
the expression on each function call.  The returned value is used by
other functions (currently just the two below).

(int) DRCtestBox(l, b, r, t, ld)

This function tests a rectangular area specified by l, b, r, t for regions
where a layer expression is true.  The ld argument is the tag of a layer
expression returned by DRCregisterExpr().  The returned value is 0 if the
expression is nowhere true, 1 if the expression is true somewhere but not
everywhere, and 2 if the expression is true everywhere in the test region.

DRCtestPoly(num, points, ld)

This function tests a polygon area for regions where a layer
expression is true.  The first argument is the number of points in the
polygon.  The second argument is the name of an array variable
containing the polygon data.  The polygon data are stored sequentially
as x,y pairs, and the last point must be the same coordinate as the
first.  The length of the vector must be at least two times the value
passed for the first argument.  The ld argument is the tag of a layer
expression returned by DRCregisterExpr().  The returned value is 0 if
the expression is nowhere true, 1 if the expression is true somewhere
but not everywhere, and 2 if the expression is true everywhere in the
test region. 

(bool) Bloat(dimen)

Each selected object is bloated by the given dimension, similar to the
!bloat command.  The returned value is 0 on success, or 1 if there was
a runtime error.  This function will return 1 if not called in physical
mode.

(bool) Join()
The selected objects that touch or overlap are merged together into
polygons, similar to the !join command.  The returned value is 0 on
success, 1 if there is a runtime error.  This function will return 1 if
not called in physical mode.

(bool) Decompose()

The selected polygons and wires are decomposed into elemental non-overlapping
trapezoids (polygons) similar to the !split command.  The returned value is
0 if called in physical mode, 1 if not called in physical mode (an error).

SelectLast(types)

This function selects objects that have been created by the script
functions since the last call to Commit() or SelectLast() (which calls
Commit()), according to type.  The type argument is a string whose
characters serve to enable selection of a given type of object:  'b'
for boxes, 'p' for polygons, 'w' for wires, 'l' for labels, and 'c'
for instances.  If this string is blank or NULL, then all objects will
be selected.  Objects that are created using "PressButton()" or
otherwise using Xic input implicitly call Commit(), so can't be
selected in this manner.

AddProperty(number, string)

This function adds the property number and string to all selected objects,
in physical mode.  The function has no effect in electrical mode.

(string) GetProperty(number)

This function returns the string associated with the given property number.
The function searches the properties of selected objects, and will return
the string of the first property found with the given number.  If no such
property is found, NULL is returned.  This is active in physical mode
only.

(int) RemoveProperty(number)

This function deletes all properties with the given number from the selected
objects.  The return value is the number of properties deleted.  This
is active in physical mode only.

// example
SetCurLayer("M1")
Box(0, 0, 5, 5)
Box(3, 5, 8, 10)
SelectLast()
Join()
SelectLast()
Decompose()
SelectLast()
AddProperty(3, "fast and bulbous")
Commit()
string = GetProperty(3)
num = RemoveProperty(3)
ShowPrompt(string, num)
Bloat(-1)

The !bloat command has been changed and enhanced.  Previously, objects
that would shrink below the minimum DRC width would remain unchanged.
This is no longer true; there is no longer any DRC checking.  Now, if an
object shrinks to zero width (or less), the object is deleted.  The
command now handles manhattan polygons (other polygons are ignored).
The command acts on the width of wires, but not the endpoints.  Labels
and subcells are ignored.

The WriteLine script function no longer writes a NULL byte at the end
of each line.


The user-defined test evaluation has has an additional enhancement.
The Evaluate line can have one of the two following forms:

    Evaluate fail = expression

which is the form described in the 2.2.22 release notes, or the new
form

    Evaluate
    script line
    ...
    EndScript

In the second form, there can be no additional text on the line following
"Evaluate".  The following lines contain a script, in the format understood
by the script parser.  This is terminated with the keyword "EndScript".
Substitutions are allowed in these lines.  The script can contain any of
the constructs described in the manual section on the script parser, with
the exception of the "preprocessing" directives; any line with a leading
'#' is ignored.  The script should set a variable named "fail" to signal
a DRC violation.

Within the script, there are a number of predefined
variables available:

objtype               The type of object which is undergoing DRC.  Values
                      are 'p', 'w', or 'b', for polygons, wires, and boxes.

objnverts             This is the number of vertices in the figure being
                      tested.  Boxes and wires are converted to polygons
                      for testing, so this makes sense for all objects.

curvertex             This is the index of the edge currently being
                      tested.  For most tests, this cycles from 0 to
                      objnverts-1.  Edges are skipped due to the
                      edge selection applied if there is no testable region
                      along the edge.  If a test is identified as a
                      "Minwidth" type, i.e., an inside test with the
                      target the same as the source, at most two edges
                      are tested if the figure is a box.

curtest               This takes the following values: 0 if the test is
                      a standard edge test, 1 if the test if a corner test,
                      and 2 if the test is the CornerOverlap test.
                      
Variables defined within the script remain in scope forever, they do not
change between calls.

In scripts, forms like a[j] - b gave a parse error.  This has been fixed.

The Wire() script function was not working.  This has been fixed.

Test order for box:

0 0 left edge
1 0 top edge
1 1 upper left corner
2 0 right edge
2 1 upper right corner
3 0 bottom edge
3 1 lower right corner
0 1 lower left corner

Example:

Rule:  The overlap of M1 surrounding Via must be .5 microns or
greater.  Only two sides maximum can have an overlap of less than 1
micron, the other sides must have 1 micron of overlap.

In the script below, two arrays are defined, to hold the test results.
We assume that only boxes are used for vias, and ignore the corner
tests.  When the final edge (curvertex = 3) is reached, the results
saved in the arrays are evaluated, and the fail flag is set if an error
is indicated.


DrcTest vtest  
Test Outside 1 !M1
Test Outside .5 !M1
Evaluate   
tl[4]
ts[4]
if (objtype == 'b' & curtest == 0)
    tl[curvertex] = DRCuserTest(0)
    ts[curvertex] = DRCuserTest(1)
    if (curvertex == 3)
        if (tl[0] + tl[1] + tl[2] + tl[3] > 2)
            fail = 1
        end
        if (ts[0] + ts[1] + ts[2] + ts[3] > 0)
            fail = 1
        end  
    end
end
EndScript
End

The test is implemented in the Via layer block.  Just the keyword is needed,
since no arguments are passed.

Layer Via
...
vtest


Fixed some small bugs in the single-stepping feature of the script debugger.
-----------------------------------

Fixed more problems with the single step debugger

In scripts, subfunctions are now supported.  This capability has been
around for a long time, and may even have been documented, but it never
worked.  The function must be defined before it is called.

A function definition starts with the keyword "function", followed by
the function name and argument list.  The keyword "endfunc" terminates the
definition.  The function is called just like a built-in function.

The example illustrates how variables are passed, and the scope for
changes.  Strings and arrays can not be redefined in a function, but
elements can be changed.  Use arrays to pass results back to the
calling function.

Example:

function myfunc(a, b, c)
Print(a, b, c)
endfunc

function examp(a, b, c)
# a is a constant, can be redefined within the scope of examp()
a = 2
# b is a string, it is an error to redefine, but can be altered, in
# which case the string is altered in the calling function as well
#b = "b string"   (this produces an error)
b[2] = 'x'
# c is an array, it is an error to redefine, but elements can be
# changed, in which case this is reflected to all users of the array
# c[3]  (redefinition, this is an error)
c[1] = 1.234
myfunc(a, b, c)
endfunc

Print("this is a test")
x = 1
y = "a string"
z[2]
myfunc(x, y, z)
examp(x, y, z)
myfunc(x, y, z)


It is presently not possible to single-step through a function in the
debugger.

In the "repeat n" construct, the "n" can now be an expression.  The
expression is evaluated once only when the block is entered, and the
integer value used as the counter.  The expression value should be
non-negative.

Functions can return a value.  In a function, the construct
    return [expression]
can be used to terminate execution, and the value of the expression
is returned by the function.  The return construct can be used in the
main body of the script, in which case it will break to the outermost
of any enclosing loop, but will not halt execution (use the Halt()
function for this).  The return value is ignored in this case.

If saving a script in edit mode from the debugger, a .bak file is
now written if the file exists.  If saving a script outside of edit
mode, no .bak file is produced if the file name does not already
exist.

A pixel-mapping problem broke the xfig driver when using 16 or more
display plane color modes.  This has been fixed.

The Versatec driver had an array overflow bug.  This has been fixed.

The ard/donut commands have changed slightly.  First, the second radius
can now be zero, so "pie slices" can be created.  Second, previously
the width of the donut or arc was constant, which is geometrically
inconsistent when the figure is elliptical.  Now, the width scales with
the x or y radius, i.e., the inner and outer radii are proportional.

The Arc() script function has changed:

Arc(cx, cy, r1x, r1y, r2x, r2y, ang_start, ang_end)

cx, cy:    center point
r1x, r1y:  radius 1, x and y
r2x, r2y:  radius 2, x and y
ang_start: start of arc angle
ang_end:   end of arc angle

for the angles, 0 is the x-axis, 90 degrees (angles are in degress)
is the y-axis.  The arc segment is drawn in a clockwise sense.

If the two angles are equal, a donut (ring figure) is produced.
If r1x = r2x and r1y = r2y, a solid disk figure is produced.

In scripts which use the previous Arc() function, which used a "width"
parameter instead of r2x, r2y, call the new Arc function with
r2x = r1x + width, r2y = r1y + width.

The nodmp (node mapping) function has been changed.  It is no possible
to give nodes an arbitrary and unchanging name in a direct way.  A lot
of the complexity of the prevuious implementation has been scrapped.

The nodmp button brings up a panel with two text areas as before, with
the left panel listing the nodes, and the right panel listing the device
and subcircuit terminals connected to the selected node.  Nodes can be
selected by clicking on the text in the listing, or by clicking in the
circuit if the "point" button is active.

The two buttons at the top of the node listing have been renamed
"rename" and "remove".  The previous buttons ("level" and "sort") and all
associated functionality are gone.  The "rename" button allows a name
to be given to a selected node.  The "remove" button will delete the name
assignment of the selected node, if it was given previously with the
"rename" button.

The left column in the node listing are the internal node numbers, which
can change arbitrarily if the circuit is modified.  Entries in the second
column are the mapped named, i.e., the names used in Spice and netlist
files.  If the second column entry is blank, the internal node number will
be used.

The entry in the second column will be blank unless:
1:  the node has been assigned a name with the "rename" button
2:  the node is connected ta a 'vcc' type of device
3:  the node is connected to one of the cell terminals
The precedence is in the order listed.  If an entry exists in the
second column, that token will indicate the node.  This will not
change.

Node mapping is performed only when the "nodmp" button is active.  When
the button is inactive, the internal number will be used for all nodes.

Assigned names are stored in a new property of electrical cells.  The
number is 19.  The form in Xic/CIF files is

5 19 0/1 name x y name x y ... ;

The third entry can be 0 or nonzero indicating whether node mapping is
active by default ("0" turns mapping off).  The remainder iof the line
consists of triples consisting of an assigned name and a coordinate
pair.  The coordinates correspond to a device or subcircuit terminal
connected to the assigned node, and serve as the reference to that node.

Note that the previous form of this property was
5 19 level sortmode
will simply turn mapping on with no saved names, so the new version should
be compatible with old files.

As noted above, the node referencing works by association with a device
terminal.  This association persists if the object is moved, and is
transferred to another device or wire if the object is deleted, if possible.
In some cases it may get lost, however, so may have to be reentered.

Remember that terminals correspond to physical device connections.  Some
device connection points, such as for voltage/current sources and the
phase node of Josephson junctions, do not have terminals which are listed
in the right window.

When a node is selected, a small box is shown over all associated
connections (not just the terminals).



the !exset command now works either in electrical or physical mode.
Previously, it would work only in electrical mode, but would fail with
no error message in physical mode.  An optional integer argument is
now accepted which represents the depth into the hierarchy to process.

The paths command now uses that same grouping as the rest of the extract
functions.  Previously, it had its own computation.  The highlighting
now observes the partitioning for devices.

The variables defined in scripts should now be cleared when a new script
starts.  Previously, this was not always the case, so that there would
be a "memory" of previously defined variables, leading to strange
error messages if an array variable was "redefined".

In scripts, the operators ==, !=, <, <=, >, >= have been overloaded
for strings.  If the two operands are strings, the C strcmp() function
is invoked to compare the two strings.

Tn scripts, the == and != operators have been overloaded to allow a
string to be compared with the value 0.  This can be used as a test for
a null string.  Presently, null strings are produced only by the
returns from the Get() function and the GetProperty() function, if there
is no match for the function argument.  If the variable or property
exists but does not have an associated string, these functions return
an empty string.  A null string has no storage; an empty string has
storage, but the first byte is zero. 

In scripts, the + operator has been overloaded for strings to perform
concatenation, similar to the Strcat function.  The expression
s3 = s1 + s2 is equivalent to s3 = Strcat(s1, s2);

The Cwd(dir) script function now defaults to the home directory if
dir is null or empty.  Tildes and now expanded in dir as in a unix
shell.

New script command: (string) Pwd()
This simply returns a string containing the absolute path to the
current directory.

Added a lot of tests for null/empty strings in script functions.

If the Edit() script command is given an empty or null cell name, Xic
prompts for a valid name from the prompt line.

New script function: Clear(name)
If name is not empty, any matching symbol and all its descendents are
cleared from the database, unless they are referenced by another symbol
not being cleared.  If name if null or empty, the entire database is cleared.
This function is obviously very dangerous.

New Extraction
The Extraction subsystem has been very extensively modified.  The goal
is to make the extraction and LVS completely automatic.

The extract system has been almost completely redesigned.  Most of what
is in the current manual is now wrong.


There are three internal operations performed by the extraction system:
grouping, extraction, and association.  These operations are performed
as needed, and have to be performed only once, unless the cell is
modified.  Grouping assigns a group number to each collection of connected
objects.  It identifies connections through vias and contact layers,
and takes into account the operations specifiec in "Device exclude"
directives.  Extraction is the identification of devices and subcircuits,
and establishment of the connections.  This is the most compute-intensive
task, since connections can be made through and between subcells, the
entire cell hierarchy must be processed.  Association provides the linkage
to the elements of the schematic.  During association, a file named
"associate.log" is produced, which contains messages emitted during the
association process.

A major change from previous releases is the absence of the "ptrms"
command.  In the present version, all device extraction is performed
automatically, thus there is no need or provision for placement of
device terminals.  One drawback (presently) is that the "series device"
extraction of inductors is no longer available.  Inductors must be
extracted using special identification layers, through a "Device" block.
The connection terminals to the current cell can be placed with the
tedit command, however this is not usually necessary.  Placing these
terminals assists in the association process, but they will be placed
automatically anyway.

paths:

group:
This command works about the same as before.  It can be called inside of
other commands, in which case it will simply display group numbers.
If called outside of another command, it allows selection of the
groups, and display of the groups and corresponding schematic node on
the prompt lin.

nodes:
New extract menu command: nodes.  This works exactly the same as the group
command, however the corresponding electrical nodes are displayed, not
the conductor group numbers.

When a group is selected it the group/nodes command, a small box is
drawn around all of the connections to the corresponding node in
electrical windows.

tedit:
This command allows physical placement of the connection points of the
electrical part of the cell.  Clicking on a terminal with the Shift button
down allows the terminal to receive a new name.

tshow:
This displays all of the device and subcircuit terminals at their assigned
positions in the physical layout.

tfind:
This command works as before:  It prompts for the name of a terminal,
then brings up a subwindow with that terminal at the exact center.

pnet:
Unlike the previous version, this command now works exclusively with the
physical database.  The netlists and other information is printed in a
file.  Each device and subcircuit, and the connectivity, are determined
exclusively from the physical database.

enet:
This provides a netlist from the electrical schematic, as in earlier
versions.

lvs:
This command produces a file containing comparisons between the physcial
and electrical parts of the cell.  This has been greatly enhanced from the
previous version.  Extracted parameters are shown as well, along with the
corresponding electrical values.

compar:
When this command is active, clicking on a device will show a comparison
of the extracted parameters and the corresponding electrical values for
the device.  If the Shift key is held while clicking on a device, the
values for the electrical device are updated from the extracted physical
parameters.

cmput:
This allows the user to print extracted
device parameters by clicking on a device, and allows the user to
compute the electrical parameters for ghost boxes, by dragging.

addelp:
This command allows viewing and modification of the extraction-specific
parts of layer blocks from the technology file, as before.

%%%%%

Fixed a subtle problem with the !bloat and script Bloat() commands, having
to do with precisely when objects are deleted from the database.  The
consequence was that a !split of a manhattan polygon followed by a !bloat
of the components did not necessarily give the same result as a straight
!bloat.  Now, the deletions are deferred until all objects in the select
list are processed, so results should be consistent.

In the !select and command, the layer name following "[l]ayer"
can be a regular expression, in which case further action is taken on
objects on all matching layers.  The name "all" is still recognized
to indicate all layers, as does ".".


Goto/label now works in scripts at the top level.  In previous versions,
there was a silent restriction that goto and label must ppear only in
an if/while/etc block.
-----------------------------

Enabled hierarchical extraction.

The xfig driver is now internally hard-coded at resolution 1200. 
Previously if was possible to give a different resolution input, which
would only change the drawing size.  Now, attempts to set the
resolution will simply be ignored.

New !set keyword:  !set TeePrompt [filename]
When given, the prompt line messages are copied to the given file name.
If filename is not given, or when the variable is unset, redirection
stops.  The filename can be "stderr" or "stdout" to redirect output
to the terminal window.

New Device block keywords;

Prefix <prefix>
The prefix is used in formulating the device name.  Previously, the
prefix was given explicitly on the output format lines.  Although this
can still be done, the Prefix directive can be used to define a prefix
for the device.

Find [device_name][.prefix][.index]
The will cause a device with the given name and optionally prefix and index to be
searched for in the current device's bounding area, and added to an internal
list.  Any number of Find directives can be applied.  Currently, this is used
only for identifying inductors in a mutual inducotr device.

The % escapes used in the output formatting lines have changed:
  %n%   replaced by the concatenation of the prefix and the index number
  %e%   as above, but if the electrical dual can be determined, use that
        name instead
  %f%   Same as above, except that if the electrical dual can't be
        determined, leave the field blank

Each of the % tokens can take an optional integer after the first %,
which indicates that the token refers to the device in the n'th
find line (0 is the same as no integer).

Example
Device
name mut
Prefix K
...
Find ind
Find ind
Spice %n% %1n% %2n% ...

The Spice line prints the name of the mut device, followed by the names
of the two inductors

In the gnsel command, typing a number followed by Enter will select that
group.

In selections, the layer search order is now top to bottom in physical
mode.  This shouldn't affect operation, except when selecting groups:
the uppermost layer selected will determne the group shown.

The TermDefault keyword in the technology file is deprecated in favor
of the following new keywords:

GroundPlane
(alias) GroundPlaneDark

The layer is given the Conductor attribute, and is treated as a normal
conductor except that when this layer is grouped, the group with the
largest area is assigned to group 0.
This represents a clear-field ground plane.

GroundPlaneClear [MultiNet]
(alias) TermDefault

This represents a dark-field ground plane.  Vias specified to this layer,
where this layer does not appear, are considered as contacts to group 0.
If the MultiNet keyword appears, the inverse of the layer is computed,
and that (temporary) layer is used in the grouping.  This is also done
if the !set variable HandleTermDefault is given.  The temporary layer
is treated as a dark-active ground plane.

Only one of these keywords can appear in the tech file.

Group 0 is only used if a ground plane is specified.

The symtax in the Measure lines in device bolcks has changed.  THIS IS
NOT COMPATIBLE WITH THE OLD FORMAT.

The net format is
   Measure name expression

The name is a unique name for this measurement, used to access the result.
The expression involves the original measure keywords, plus the names
of measure statements defined in the current device block ahead of the
current line.  All of the math functions and operators are available.

The keywords that formerly took arguments are treated as follows.  These
are the length measurement keywords: CWidth, CNWidth, CBWidth, and
CBNWidth, and the two arguments were the names of two terminals used
in the measurement.  Now, these terminals are specified as index numbers,
appended to the keyword, separated with periods.  The index numbering
starts with 0, and corresponds to the occurence of the Contact line
in the block (the Contact lines must appear ahead of the referencing
Measure statement).  For Example:

Contact s CAA (CAA) & ( ! (CPG))
Contact d CAA (CAA) & ( ! (CPG))
Contact g CPG (CAA) & (CPG)
Measure Length CBWidth.0.1
Measure Width CBNWidth.0.1

If the indices are left off, the default is .0.1, so they are optional
above.  If the indices are the same, the second is incremented by one.
If the indices don't point to an existing contact, or are not single
integers, the computation will fail.

This facility allows unit conversion factors to be included in the
measurements, for example.  The native units are microns, so if the
Length is needed in meters, the line could be

Measure Length CBWidth*1e-6

New Device block keyword: LVS
This keyword instructs Xic to perform a parameter comparison as part
of LVS.  The format is

    LVS measure_name [spice_name]

The measure name is one of the names used for a Measure statement in
the device block.  The spice_name, if given, is the token used in
SPICE element lines to designate the parameter, e.g., "l", "w", "area".
This can be blank if comparing to an element value which is given as
a leading number, i.e., resistance, capacitance, etc.

The LVS directives must appear after the referenced Measure line.

Examples

Measure Area BodyArea*1e-12
LVS Area area

Measure Resistance Resistance
LVS Resistance

The BodyArea measurement keyword new measures the actual area of the
device body polygon group.  Previously, the area of the bounding box
was returned.

New measurements:
BodyPerim
  This returns the perimeter length of the device body.
CArea.contact.layer
  This returns the area of the single polygon formed from the polygon
group on layer which intersects
  the contact bounding box.  The contact field is an integer specifying
  the contact.
CPerim.contact.layer
  This returns the perimeter of the polygon described above.

Example:
Contact s CAA (CAA) & ( ! (CPG))
Contact d CAA (CAA) & ( ! (CPG))
Contact g CPG (CAA) & (CPG)
Measure AS CArea.0.CAA
Measure AD CArea.1.CAA
Measure PS CPerim.0.CAA
Measure PD CPerim.1.CAA


The Capacitance keyword in layer blocks now takes one or two real numbers.

Capacitance value1 [value2]

c = value1*area + value2*perimeter
The area is in square microns, perimeter is in microns, value2 defaults to
zero.

Problems:
Permutations of s/d
sharing of s/d
multiple devices
----
Permute should have exactly two args

There is now a mechanism for locating Comment lines in updated technology
files to something close to the original locations.

Some of the technology file keywords start with "PhysAlt..." others with
"AltPhys..." (similar for electrical).  Both prefixes are now
recognized.  "Alt" is always first when the file is written.

The Device keyword is now defunct in layer blocks

Fixed a bug that would crash the program after pressing "quit help" on
certain help windows.

With the help button active, pressing 'h' no longer pops up the help about
keyboard entry, '?' still does so.

Fixed a "used after freed" bug in the drc that would sometimes prevent
catching errors involving polygons, or crash the program.

---
in layer expressions, the layer named "$$" is the subcell layer, i.e.,
it logically consists of boxes covering the areas of each subcell.
This can be used in places where subcell boundaries are needed:
for example,

    !layer new !$$

will create a new layer (new) which covers everything except the subcells
in the current cell.
------------

Major overhaul of the WordPerfect graphics driver.
  Now that WordPerfect for Linux is available (free!, highly
recommended) this driver is actually of interest.
It now supports color, fill patterns, and rotated text.  Also, the
previous driver incorrectly flipped the y axis of the image.

New technoogy file keyword:

  WpFilled number

This keyword can appear in Layer blocks, and instructs the WordPerfect
hardcopy driver to use the indicated built-in fill pattern number (0-63).

The fill patterns are:
0       Hollow
1       Solid
2       Narrow spaced +45 degree lines
3       Medium spaced +45 degree lines
4       Widely spaced +45 degree lines
5       Narrow spaced +45 and -45 degree lines
6       Medium spaced +45 and -45 degree lines
7       Widely spaced +45 and -45 degree lines
8       Narrow spaced vertical lines (shaded)
9       Medium spaced vertical lines
10      Widely spaced vertical lines
11      Interspaced dots or density (least dense)
12      Dots
13      Dots
14      Dots (medium density)
15      Dots
16      Dots
17      Dots (most dense)
18      Narrow spaced horizontal lines
19      Medium spaced horizontal lines
20      Widely spaced horizontal lines
21      Narrow spaced vertical and horizontal lines
22      Medium spaced vertical and horizontal lines
23      Widely spaced vertical and horizontal lines
24      Narrow spaced -45 degree lines
25      Medium spaced -45 degree lines
26      Widely spaced -45 degree lines
27      Partial weave
28      Weave
29      Fine checker board
30      Zigzag (horizontal)
31      45 degree wide line
32      Wide checker board
33      Fine 45 degree bricks
34      Medium 45 degree bricks
35      Wide 45 degree bricks
36      Fine 45 degree bricks
37      Medium 45 degree bricks
38      W 45 degree bricks
39      Horizontal brick thin
40      Horizontal brick medium
41      Vertical brick thin
42      Vertical brick medium
43      Waves
44      Wide vertical zigzag
45      Medium vertical zigzag
46      Movie pattern
47      Skewed brick pattern
48      Interconnected dot pattern
49      Shadow squares horizontal
50      Dot black vertical
51      Vertical slanted thick boxes
52      Vertical cursive black
53      45 degree shingle pattern
54      45 degree wide black arrows
55      Horizontal "T" lines
56      Black box 45 degree dots
57      Corner piece pattern
58      45 degree triangles and dot lines
59      Horizontal heartbeat monitor pattern
60      Vertical lines/horizontal waves
61      Light and dark wave patterns
62      45 degree fill color umbrella pattern
63      45 degree fill color umbrella pattern
255     Use background color for solid fill


New script function:

  (int) CurMode()

This function returns 0 if in physical mode, 1 if in electrical mode.


---

Fixed a bug in the geometry routines that would cause problems with
certain overlapping shapes, such as a round flash over a box.  When the
group was converted to a trapezoid list, pieces were missing.  This
showed up as incorrect resistance values extracted from resistors with
round ends.

Resistor and inductance extraction now take intl account the actualy
shape of the contact, rather than assuming that it is the same as the
contact bounding box.

!select with no arg would cause a fualt, fixed.

Added a couple of special cases:

    !select all   selects all geometry (not subcells) same as !select l
    !select .     select everything (same as no arg)

The !desel command now works with layer regular expressions.


New Device block Keyword:
    Merge [ [v]alue | [a]rea | [m]ultiple | [n]one ]

This specifies how to handle parallel connected instances of the device in 
extraction.  There is one optional argument.
    no arg or starts with v or V     compute value as for parallel resistors
    starts with a or A               sum the body areas and perimeters 
    starts with m or M               use the M Hspice directive.  It is
                                     assumed that all devices have the
                                     same body size.  The CArea and CPerim
                                     are the average (after partitioning,
                                     see below) for the parallel
                                     devices.
    starts with n or N               don't merge (default)

"M" in Initc

When measuring with CArea/CPerim, there is now a test to see whether
the area intersects other device contacts from the same device type. 
If so, the area and perimeter are assumed to be shared between
devices, and are partitioned equally between them.

New measure line escapes.  These can be used in the Spice and Cmput
lines
%model%     - replaced by contents of the Model line
%value%     - replaced by contents of the Value line
%initc%     - replaced by contents of the Initc line


Initc,etc used in cmpar function
Spice used in pnet, !exset
---

Modified the screen updating to avoid multiply redrawing the highlighting.
This caused the highlighting to "flash" several times when for example an
object is deselected.  For some reason, this was especially bad on my
S3-Virge Linux system in 16 bpp mode.  On another system with a standard
S3 card, it was barely noticeable.

In Device block formatting lines, the %m%name reference to a measured
result has been extended to

    %m[g|s[d]|f[d]|e[d]]%name

One of the characters s, g, f, e can follow the 'm'.  The s, f, e can be
fiollowed by an optional digit.

  g  :  Use "best" numeric format (the default)
  sN :  Use SPICE abbreviations, use N decimal places
  fN :  Use fixed point notation, with N places
  eN :  Use exponential notation, N decimals

  If N is not given, default is 5 digits


The dimen panel in the drc menu now uses a drop-down menu for the
rule buttons.

There are three new built-in design rules:

AnyOverlap [Region expr ] expr [string]
PartOverlap [Region expr ] expr [string]
AnyNoOverlap [Region expr ] expr [string]

The AnyOverlap test signals an error if the region or object is not
completely covered by the target.

The PartOverlap test signals an error if the region or object is either
completely covered or completely uncovered by the target.

Tne AnyNoOverlap test signals an error if the region or object is
completely covered by the target.

The returns from the various Overlap tests are summarized in the table
below:

                    total coverage     partial coverage    empty
Overlap              ok                 error               error
IfOverlap            ok                 error               ok
NoOverlap            error              error               ok
AnyOverlap           ok                 ok                  error
PartOverlap          error              ok                  error
AnyNoOverlap         error              ok                  ok
----------------

Fixed bug in the corner overlap drc test that was giving false positives.

Fixed bug: if you push into a cell, pop back, delete the cell, then
push back into it with the enter key, the cell would magically reappear.
for the duration of the push.   Actually, it would appear as long as it
still exists in the undo queue, if it was really deleted the program would
probably fault.  This has been fixed.

The undo/redo history is now saved with cells in the push/pop history
list.  This means that if you push into a cell, make changes, pop,
and push back, the changes can be undone.  The holds for a push/pop
to any level, but when a new cell is pushed to, the new cell replaces
the previous cell at that level in the stack, so undo information below
that level is gone.

Fixed a bug in the hypertext system for references in subcells.
-------------------

New script functions:

(string) GetTechExt()

This returns a string containing the current technology file name
extension.

SetTechExt(string)

This sets the current technology file extension to the string argument.
It alters the name of new
technology files created with the updat button in the attri menu.

New DRC keywords.  These operate differently from the others, in that they
do not operate on a per-object basis, rather they operate on an entire
pseudo-flattened layer.  As such, they can be computationally and memory
intensive.  These tests are performed before the others.

Connected [Region expr] [string]

If given in the layer block, the layer or region description is tested
to see that all objects are mutually connected.  Disjoint groups of
objects are flagged as errors in the top level cell.  The group with
the largest area is assumed to be the "correct" group.

NoHoles [Region expr] [string]

If given in the layer block, the layer or region description is tested
for clear area surrounded by dark area.  Each such area is flagged as
an error in the top level cell.

Fixed bug in the glibc Linux version which caused faults with the
!select command.

Fixed a bug which caused memory problems if a user defined design rule
had a multi-line fail test.

It is now possible to edit and create Region specifications with the
dimen panel in the drc menu.

The dimen panel in the drc menu can now edit references to user-defined
design rules.  The drop-down menu under the rules button contains an
entry "UserDefinedRule".

The dimen panel in the drc menu can now edit user-defined rule blocks,
through the new button with label "edit rule".  This button produces a
drop-down menu containing the names of existing user-defined rules,
plus an entry labelled "new".  Selecting one of the rule entries brings
up a text editor window loaded with the rule block text.  The text can be
modified, and when saved the internal rule will be updated.  This will be
reflected in the technology file created with the updat button in the
attri menu.  Selecting the "new" entry will open an empty editing window,
into which the text of a new rule can be inserted.  Saving the text
adds the new rule to the internal list.

New DRC keyword:

MinEdgeLength [region expr] layer_expr dimen [string]

This test checks the length of the edge where layers intersect.  For each
edge of the object or region, the parts of the edge where layer_expr
exists on both sides of the edge, and the part does not contain the endpoint
of the edge are considered.  If the length of the edge is less than the
minimum dimension, an error is flagged.

Example:

  Rule:  "M3 width must be 3u or greater when crossing over M2"
         "M3 minimum width is 2u"

Layer M2
...
MinEdgeLength M3 2
    

Layer M3
...
MinEdgeLength Region M2 M3 2
----------------------------------

The technology file parser now understands macros.
This new capability is different form the existing "#macro" directive.
  These can be used to
simplify or clarify the constructs.  A macro definition, which can appear
anywhere in the technology file, follows the keyword "Define".  The macro
name is an alpha-numeric token that must start with an alpha, and is
optionally immediately followed by an argument list in parentheses.  The
arguments are arbitrary alphanumeric tokens that start with an alpha and
are separated by commas.  This is the same syntax used in the C language
proprocessor for "#define" lines.  The remainder of the line is the
substitution string.

The macro name search is case dependent, unlike the keywords.

  Define name [text]
  Define name(arg, arg1, ..., argn)  [text_containing_args]

Throughout the text, each line is macro expanded.  The actual arguments
replace the formal arguments (if any) in the substitution text, which
replaces the macro reference.  The macro is recognized as a text token.

Example:

Define  mytext(x)  this is rule number x
...
MinWidth 2 #mytext(1.2)

The MinWidth line expands to

    MinWidth 2 #this is rule number 1.2


The same macro facility has been added to the script interpreter.  This
extends the existing "#define" capability to something closer to the
C language capability.  Each line is now macro expanded before
execution.

Fixed bug in Region handling in DRC that would cause rules to look in
the wrong region.

The technology file now understands the following keywords:
IfDef token
IfnDef token
Else
Endif

The token is tested for existence against the names of macros defined
with the Define keyword.  If the token following IfDef is found, the
lines up the matching Else or Endif are read, otherwise they are
ignored.  IfnDef has the reverse logic.  The Else line (if present)
creates, along with the matching Endif, a block which is read ir
ignored with opposite logic to the initial block (IfDef/IfnDef to
Else).  This feature allows the technology file to be easily reconfigured
by simply changing a Define at the top of the file.  The constructs can
be nested to arbitrary depth.

Example:

Define TightRules
...
Layer M1
IfDef TightRules
MinWidth .4
Else
MinWidth .8
Endif

In the example above, commenting out the Define line (#Define TightRules)
reconfigures the technology file.

When the technology file is updated with the updat command, only the lines
that were actually processed are written, i.e., the IfDef, etc. lines are
stripped.

The xic_tech.scmos file has been rewritten to use new features, and to
more closely follow the MOSIS guidelines.

When the search path is changed with !set Path, the files listing in
the cells popup is now updated.

If a cell is selected in the tree popup when the edit button in the cells
popup is pressed, the selected cell is edited.

The help file syntax now supports a new keyword:
!!INCLUDE filename
When encountered, the text of filename, which is searched for in the HelpPath
if not an absolute pathname, is added to the displayed text of the current
topic.  The keyword should appear in the !!TEXT or !!HTML block.  There is no
nodification of the text from filename.

If the filename is a relative path to a subdirectory of one of the
directories of a directory in the help search path, the subdirectory
is added to the search list.  Thus, an html document and associated gif
files can be placed in a separate subdirectory in the help tree.
The html document can be referenced from the main help files with
a !!INCLUDE directive, and there is no need to explicitly change the
help path.

The html viewer widget was enhanced so as to decently present the
Mosis design rules, which are now included in the help database.
Improvements:
1)  Multiple fonts and anchors are supported in <table> fields.
2)  Links to relative references in the current document are supported.
    Note that this prevents use of help keywords that begin with the
    hash character ('#').
3)  Better memory handling and elimination of an array overrun in the
    image code.

If a terminal name is changed in a cell, the change is now reflected
to all instances of the cell when exiting the subct or tedit commands.
Previously, this was deferred until the connectivity is recomputed before
a write.

If two or more subcircuit terminals are coincident in electrical mode,
the name text is now shown so as not to overlap (terms command).

While editing an Xic cell, if a hierarchy from CIF/GDS/EDIF is
placed, each cell in the hierarchy is now flagged as modified, since
the cells may not exist as Xic files.  When quitting, the user then
has the option of saving the added cells as Xic files.
------------------------

Fixed some funnies in the wire vertex editor.

If using crsym and a subcell is saved as part of the new symbol, and the
current cell is from a CIF/GDS/EDIF hierarchy, the modify flag is set
in the subcell and its descendents so that when quitting the user is
given the opportunity to save the subcell as an Xic file.

The code that checks for modified cells before exiting is more thorough
now, and cells that should be saved as native files are actually saved
as such.

Fixed a bug that affected via contact testing in extraction.

Fixed a bug in the positioning of the popup that appears in the "run"
command in asynchronous mode.

The popup that appears during s WRspice run in asynchronous mode now
removes itself two seconds after the "analysis complete" message.

Fixed a bug that produced a cascade of floating point errors if an
empty cell was DRC'ed.

The special !set variables NoAutoPlaceLabels and NoAutoPlaceTerms no
longer exist, since they are obsolete with the new extraction system.

In extraction there is a new capability for automatically flattening
certain subcells in the extracted netlist.  The cells to be automatically
flattened must have names that begin with a common prefix, such as "$$".
The flattening is enabled by setting the variable PnetFlattenPrefix to the
prefix, e.g.,

    !set PnetFlattenPrefix $$

When a flattenable subcell is found during extraction, all devices and
sub-subcells in the subcell are linked into the parent cell for extraction
and LVS purposes.  References to these cells will disappear from the
pnet and lvs listings, unless the boolean variables PnetListAll is set,
in which case they are listed.

In certain EDA systems, extensive use is made of special cells for mos
devices, for example.  These may be automatically generated or pulled from
some library.  In use, it is more than cumbersome to identify each such
device with a subcell in the schematic.  The facility above allows the
user to avoid this.

The !set variable database now uses a hashed lookup table for speed,
rather than a linearly-searched linked list.

In the !set command, tokens in the string of the form $(setvar) are
expanded to the string associated with setvar, if it exists.  For example,
!set Path $(Path) /new/dir
will append  /new/dir to the end of the existing Path.

In electrical mode, labels with text size longer than a certain length
is not displayed, a small box at the text origin is displayed instead.
The default length is 32 default character size cells.  The label text
can be shrunk (with the stretch command) to make it visible.  The
size threshold can be changed with the variable MaxPrpLabelLen.  This
can be set to an integer greater than 6 with the !set command, and the
units are the width of a default-size character cell.

Note that labels that aren't displayed still occupy the same space,
i.e., they can still be selected over their actual bounding box.
It may be more convenient to convert to a "long text" label.  Select
the label, press the "label" button in the main menu, press Enter, and
press "quit" on the edit window that pops up.

Long labels can also be broken into multiple lines by adding embedded
returns.  These are added with Shift-Enter while the string is being
edited.  Note that this generates newlines in the Spice output, so that
in most cases the extra lines should begin with the "+" continuation
character.

The !exset command (and related) now understands '+' continuation lines
in spice input.

In the format lines in Device blocks, the sequences "\n" will expand
to a return, "\t" will expand to a tab character.
---------------------------

added ToEDIF(), FromEDIF() script functions

Fixed a horrid bug that prevented selection of electrical wires and
generally fouled up electrical mode.

--------------------------

Fixed the GDS reader to cope with a really strange GDS file provided by
a customer:
1)  Datatypes out of the range 0-255 are no longer fatal errors.  These
are now mapped to 0 and a warning is issued.
2)  Xic now checks more carefully to see if anything following the physical
library is actually electrical data, and not something else.

Some minor tweeking to allow the html viewer to view the constructs in the
html version of the manual (which is now available).

Fixed the positioning of the "long text" button when titled so it does not
obscure the prompt line.

Fixed a bug that would crash the program on a script with a bad function
call.

New script function:

    (string) PrintString(arguments)

This works like the Print() function, however it returns a string containing
the text.

Show dynamic highlighting:

    ShowGhost(type)

type
0   Turn off ghosting
1   full-screen horiz line, snapped to grid
2   full-screen vert line, snapped
3   full-screen horiz line, not snapped
4   full-screen vert line, not snapped
5   vector from last point location to pointer
6   box, snapped
7   box, not snapped


Added some built-in scripts to the scmos technology file for creating
transistors and vias.

Fixed a bug that partially broke the handling of parallel devices in
extraction.

Fixed a bug:  Start Xic in physical mode in a directory with a
"device.lib" file, then immediately !cd to some other directory
without a "device.lib" file.  The device library will be inaccessible,
since it was never read in, but its location is expected to be in ".". 
This has been fixed.

Changed the message printing during extraction to improve feedback when
running.

The !select (and !desel) command has an additional capablity for
selecting objects on physical layers.  The complete syntax in this
case is now

!select l[ayer] [ b[ox] | w[ire] | p[olygon] | l[abel]]
    [keyword expression]

The keyword is one of the DRC keywords Overlap, IfOverlap, NoOverlap,
AnyOverlap, PartOverlap, and AnyNoOverlap, and the expression is a
layer expression.  If the keyword and expression are given, the
expression must be true if an object is to be selected or deselected
(with the !desel command).

Example

!select l CAA b Overlap CPG

This will select boxes on CAA that are entirely covered by CPG.

There are two new script functions for traversing the hierarchy of the
current cells.

  (int) InitGen()

The function returns a handle to be passed the the generator function.

  (string) GenCells(handle)

This function returns a string containing the name of one of the cells
in the hierarchy of the current cell.  A different cell is returned
fro each call.  The current cell is returned last.  The null string is
returned after all cells have been returned.

Example:

This script will list all of the cells in the current hierarchy:

i = InitGen()
while ((name = GenCells(i)) != 0)
    Print(name)
end
---------------------------

The parser for native cells and CIF files will ignore the first line of
a file if it begins with the character sequence "#!".  This allows
executable design files to be created.  Add a line at the top of the
file "#! xic" (with a text editor) and make the file executable (with
"chmod +x filename").  Then, typing the file name will start xic loaded
with that file.  Xic command line options can follow "xic" in this line.
The line must end with a <return>, and the actual file data will be read
starting with the next line.

The Spice parser used for the !source and !exset commands now ignores
lines enclosed in .exec/.endc, .control/.endc, and .verilog/.endv. 
Previously, it would attempt to read these as Spice lines, with
unwanted results.

Note that the parser does not (yet) handle parameters, either in .param lines
or parameterized subcircuits.

The Spice parser now handles mutual inductors.

On each cycle of the interactive DRC testing, i.e., after an operation,
the number of errors reported is now limited to 100.

The !join command has been modified to
1) provide user feedback when computing
2) respond to Ctrl-C be aborting
2) break up huge collections of objects into pieces before joining,
   for speed.  The resulting objects can be selected and the !join
   performed again to obtain a slightly more efficient set of
   polygons.

The default color scheme of the menu buttons has been changed.

Added a label to the help pop-up which shows the current database
keyword.
----------------------------

The token "<unknown>" which is returned when there is a bad reference
error in a plot string (for example) has been changed to "_UNKNOWN_"
to avoid the unix redirection characters.

The plot and iplot lists are now cleared of debris before use, so the
"_UNKNOWN_" token should rarely if ever be seen.

Fixed a bug that caused the circuit topology to not be recomputed after
an undo, if the topology was recomputed after the change.  For example
run a circuit            (computes topology if necessary)
delete object, run       (recomputes topology)
undo the change, run     (bug, no recomputation)
This one was nasty, but subtle enough that it has been around for a
long time before being reported.
--------------------------------------------

Fixed a numerical bug which prevented creation of large arcs and donuts.

There is a new internal variable: NoConstrainRound.  When this boolean
is set with the !set command, there is no checking for minimum feature
size of round objects as these objects are being created (they will still
be tested when completed if interactive DRC is enabled).

-------------------------------------------

Fixed a bug the was causing deselected object to not be removed from
the selection list, which generated spurrious error messages.

Minor fixes to colormap handling to prevent (in particular) label
widgets from using the wrong colors when the colormap is nearly full.

-----------------------

Added additional tests for reentrant or otherwise strange polygons.
A polygon that is reentrant overlaps itself.  This can be a problem
since the polygon may be rendered differently on different CAD
systems, as the presentation of the polygon may become ambiguous.
The test is performed by default as polygons are read into Xic from
the input file.  This adds a little overhead.  The test is performed
on physical data only.

New Variable:  NoPolyCheck
    When this boolean variable is set (with the !set command) the
    reentrancy test is skipped during file read.

The info command (in the attri menu) when applied to polygons performs
the reentrancy tests, and a message is added if the condition is found.

New ! commands:

!polycheck [layer ... ]
    This will apply the reentrancy test on all polygons (no arguments)
    or polygons on the layers given in the current cell.  Polygons that
    do not pass are selected.

!polyrev
    This will reverse the order of vertices of all selected polygons,
    i.e., changing the winding from clockwise to counter-clockwise and
    vice-versa.  This should be rarely if ever needed.

The info command now restores the selections on exit that were in effect
when the command was started.

On 256 color systems, the number of "dual-plane" color cells is now
limited to 48.  These cells are allocated before the colors used in
the buttons, etc., and if the colormap is exhausted the widgets will
look funny.  Limiting color usage helps prevent this.
-----------

New technology file keyword:    Technology name
 
    This gives a name to the technology.  The name can be any character
    string token excluding white space characters.

keyword added to default tech files

!layer command
Entering "!layer lname" would clear lname, if the layer lname exists.
The screen was not redrawn.  This was either a bug or an undocumented
feature, but it longer works.  Presently, it creates lname if it doesn't
exist, otherwise nothing is done.

The !layer command can now have a layer name on both sides of the
assignment.  In this case, the existing layer is used in the right hand
side expression.  The contents of the layer are replaced with the
result of the expression.

$tmp layer

Layer expressions can now contain the exclusive-or operator (^).

Constant values are now processed in layer expressions without giving
error messages.  A nonzero constant indicates full occupation, and a
zero constant implies emptyness.  This probably isn't too useful, except
that the way to clear a layer is to set it to zero, e.g., |!layer xx 0".

In the !layer command, the space between the layer name and the expression
can now contain an equal sign, with or without surrounding white space.

Expansion of the syntax for layer expressions.  The following operators
are now accepted:

^    exclusive-or, or x to the y  (x ^ y) if both x and y are numeric.
+    or (same as |), or addition if both arguments are numeric.
*    and (same as &), or multiplication if both arguments are numeric.
-    l1 - l2 is the same as l1 & !l2, or subtraction if both args numeric,
     unary - is legal ahead of a numeric quantity.
/    divide, for numeric data only.

The tokens are interpreted as they would be in an ordinary expression
involving numbers, thus their precedence might not be quite as expected
in layer expressions.  For example

  !layer CAA = !CAA & $$
and
  !layer CAA = !CAA * $$
are not equivalent.  The latter expression is equivalent to
  !layer CAA = !(CAA & $$), since '*' has higher precedence than '&'.  The
correct expression is
  !layer CAA = (!CAA) * $$

Function calls are now supported in layer expressions.  Only the functions
listed below are available.

box(real l, real b, real r, real t)
    This defines a rectangular region from the four real arguments, which
    can be used for clipping or construction in layer expressions.
    The coordinates are given in microns.

bloat(real incr, layer_exp layer)
    This expands the features on the layer by incr (in microns), which
    may be negative.

The !layer command is now optionally undoable.  An additional prompt
asks the user.  If undoable, processing time may be longer and memory
usage is higher.  This required quite a bit of modification to the
undo processing functions.
Any new layers created are not removed from the layer table on undo.

Bug in !layer:  the internal box-merging was being called, which assumes
that the undo feature is active (which it is not).  This has the effect
of possibly creating some redundant boxes, but I don't think that
anything is deleted.  If you quit right afterward, however, the bogus
internal lists may cause a seg fault.

Rewrote the box/wire merging code to handle undoable and non-undoable
situations.

The script Layer() function is still always undoable().

Bug fixed: in the technology file produced with the updat command, the
line feeds were omitted from the script listings. this has been fixed.

New command: !ltab
This command has three forms

    !ltab add layername [layername ...]
    The second word is the literal "add", and the remaining tokens are
    valid layer names.  Layers are created (or extracted from the
    removed list) and added to the end of the layer table.

    !ltab remove layername [layername ...]
    This removes the listed layers from the layer table.  These can be
    reinserted (in reverse order) by pressing "rmove" then "adlyr" in the
    attri menu, then clicking in the layer table.  Removed layers can also
    be added to the end of the layer listing by typing
    "!layer name" or with the "!ltab add" form of this command.

    !ltab rename oldname newname
    This renames the layer named oldname to newname.

Internal and temporary layers (those with names starting with "$") all
use the same colormap pixel in 256 color mode, to conserve colors.

New script functions:

AddLayer(layer_name)
    This adds the named layer to the end of the layer table, much like
    "!ltab add layer_name" and "!layer layer_name".  The string passed
    should contain only one token, unlike "!ltab add".  This returns 0
    on error.

RemoveLayer(layer_name)
    This removes layer_name from the layer table, much like
    "!ltab remove layer_name".  The string passed should contain only
    one name, unlike "!ltab remove".  This returns 0 on error.

RenameLayer(oldname, newname)
    This renames the layer named in oldname to newname, much like
    "!ltab rename".  This returns 0 on error.

The !exset command was broken for depths greater than zero, fixed.

Fixed a bug that would cause annoying crashes related to "vcc" terminals,
in particular, if the label was changed with the prpty pop-up.
--------------------------------

The net names used in the enet output are now the nodemapped names,
if node mapping is used.

Fixed bug - the subcell physical terminal locations were not updated
after association.

ROUTING keyword

Cell terminals that are automatically placed can only attach to
ROUTING layers.

Fixed a few funnies that occurred when placing terminals with the subct
and tedit commands.  In the subckt command after placing a new terminal,
clicking button 1 in the drawing window is the same as pressing Enter
when responding to the name prompt (the hypertext is disabled).

If a cell has terminals but no electrical geometry, the terminals will
not show in the tshow command, and will be printed in the enet listing.
Previously, these were ignored.

New ! command:  setflag name 0/1   or   setflag ?
This allows the flags associated with the current cell to be changed.
You should probably never have (or wnat) to use this.  The second form
of the command brings up a window containing a list of the flag names
and descriptions.

In the !exset/source commands, instead of refusing to place an empty
cell, Xic will now add some dummy geometry to the electrical cell and
place it normally.

Fixed bug in "!exset":  Sometimes extracted devices from a subcell
would be placed in a parent cell, if the subcell has no formal
terminals.  This should no longer happen.

There is a new field at the end of the native-file line for node properties.
This accepts a keyword which specifies the terminal type (same as the
oct bdnet tool).  Valid keywords are

input (default)
output
inout
tristate
clock
outclock
supply
outsupply
ground

The info listing for cells and instances now contains more detailed
information on flags set, and a listing of terminals and terminal
properties.

!!!!! not documented
XICP_ID and XICP_BAG properties.
XICP_NAME property

new popup for pnet/enet

upgraded tp RH 6.0

Fixed a problem with the automatic placement of certain popups under the
Winder Maker window manager.

Fixed placement problems with top-level shell popups in fvwm.

Fixed some potential faults in gds import conversion.

Xic can now act as a drop receiver for drag/drop operations under the
Xdnd, Motif and DND (Offix) protocols.  You should be able to drag files from
many file manager programs into the main window of Xic, and that file
will be loaded into Xic.  This has been tested with the OffiX "files"
program, and GNU "gmc".  It does not work with the "xfm" program, which
does not use an exported drag/drop protocol.

The file nust be a standard file on the same machine.  If it is from a
tar file, or on a different machine, first drag it to the desktop or to
a directory, then into Xic.  (Note: gmc allows one to view the contents
of tar files, etc. as a "virtual file system".  Window Maker and
Enlightenment window managers, at least, are drag/drop aware.)

Note: the visual highlighting is not active with DND protocol.

Started the port to gtk.

Removed the X-specific stuff from xic.cc

setenv XIC_NO_LOCK 1  to eliminate .xic.lock file

see Kaplan.xic for bugs
!! selectable layer order for paths command

converted PopUpHTML to PopUpInfo() with added "is_html" arg

rewrote the pathlist.cc functions
There is now a directory monitor for file listing popup

added expand_path() function, replaces pathfix()

removed DIRC define from global.h, added sCD::PStripPath()

!cd should now reset '.' in files list

added qpath command, old paths command

deleted ClearSavedEvents, work procedure

xtlserv 1.5:
*** avoided linking shared libs that are not used
*** added test for LICENSE file existence, readability, and size

New !set variable: LayerSearchUp (boolean)

In the path and qpath commands, this sets the layer search direction from
bottom to top, rather than the default top to bottom.  This affects the
conductor chosen when the user clicks over more than one conductor.

In the path and qpath command, the GroundPlane layer is only selected
if no other conductor is present where the click occurs.  This is true
whether the layer search is up or down.

In the debugger, if the load input popup is active (load button pressed),
selecting one of the scripts in the Debug menu will load it into the
text area.

The release notes are now kept in /usr/local/lib/xictools/xic/docs.  The
notes for the current release can be perused in Xic by selecting "Release Notes"
in the help menu.  If the location containing the release notes is not
the default given above, there are two ways to tell Xic:
1) set the environment variable XIC_DOCS_DIR to the directory containing
   the release notes.
2) set the variable XicDocsDir to the directory containing the release
   notes with the !set command.

------------------------

Fixed: Closing the fill popup would crash the program.
Fixed: Clicking in the fill popup would mung the screen coordinates display.
Fixed: Highlighting appeared in wrong window of fill popup when dragging
in the pixel editor.

In the fill popup, button3 sets pixels, Shift-button3 erases pixels.

In color popyp, one can now drag the color from the sample area (under the
wheel) to the layer table.

Fixed bug: octread couldn't find cells.

Added search path capability to octread.

Misc small bug fixes:
    dots button logic
    update cells listing after "clear" in cells popup

The basic interface to the Oct system is more or less in-place.  The Oct
system is a VLSI design framework developed at Berkeley.  This
is being updated and refined, and will soon be available for use with
Xic.

The new Oct system will provide a complete design path from Verlog to
GDSII, including Formal verification, fault analysis, auto place/route,
etc.

The Whiteley Research version of Oct will be only partially compatible
with the original.  The differences are
  1) Internal Oct units are now the same as Xic units, i.e., 1000 per
     micron.  Original Oct units are 20 per lambda.  Thus, scaling is
     required between the two versions.
  2) The new Oct is not locked into a specific technology.  There are
     no hard-coded layer names, etc.  The tap (technology access
     package) has expanded capability to provide technology
     information to the tools.  Although the new Oct should be
     backward compatible, the reverse is not true.
  3) The format of the cell storage is different in the new oct.  In the
     original Oct, a cell is a directory, containing one or more "views"
     which are subdirectories, each of which contain files named
     "contents;" and possibly "interface;".  In the new version, a flat
     file format is used, where a file is named "cell:view:c"
     for the contents and "cell:view:i" for the interface.
     
New Oct Capability

The Oct format is one of the "known" formats understood by the edit
command.  The cell name given to edit can have the form "cell:view:facet",
where the view defaults to "physical" if not given, and the facet
defaults to "c" if not given.

New commands:
In the Convert menu
    To OCT:  This will save the current cell *hierarchy* as Oct cells
    in the current directory.
    From OCT:  This will convert the Oct hierarchy given to Xic files
    in the current directory.  Note that this (and the other From ...
    commands in this menu) is deprecated.  The correct way to generate
    Xic cells is to read in the Oct cell and use "To Xic".

!octtech
    This generates the "tap.views" facet in a subdirectory named for the
    technology name.  This the the "technology file" used by the Oct
    system, as generated from the Xic technology file in use.

If a cell was read in as an Oct cell, it is by default written as an Oct
cell when saved.  When saving a cell with Save, only that cell is written.
Only modified cells are prompted for when exiting with unsaved cells.

One can coerce saving an arbitrary cell to an Oct cell by specifying
".oct" as part of the new name to save under.  This new name can have
the form "cell:view".  In this case, the ".oct" suffix is *not* actually
used as part of the file name, unlike similarly used suffixes ".gds", etc.

If no view name is provided for an Oct cell, the view defaults to "physical".
When writing, there are two views generated in this case: "physical" and
"electrical".  The second view contains the schematic information *used
by Xic* for the cell.  It is not used by Oct.

These commands are not expected to be useful until the new Oct is
provided, though they do provide a useful interface to the current
Oct.  The old Oct cells will have to be translated to the new name
convention by hand.

Warning: Do *NOT* overwrite an old Oct cell and expect it to work in the
old Oct system.

Note that when reading an old Oct cell, the dimensions should be scaled
by 50.

Fixed a logic funny in the copy and replace functions of the Cells popup.

Put in a translator for some of the Xt command line options.  The "--"
options are gtk-native, the "-" options are the Xt equivalents.  The
following all work:

set the display
  -d dispname
  -display dispname
  --display dispname

set application name
  -name appname
  --name appname

debugging
  -synchronous
  --sync

The rest of the Xt options will be interpreted as file names.  Other
gtk options are
   --no-xshm             (don't use shared memory with X server)
   --class classname     (set application class name)

------------------------------

The device menu is now properly iconified when the main window is
iconified.

The wrspice plots are now prevented from disappearing behind the Xic
main window.

Fixed two Linux-specific bugs:
   Initiating the fill editor would crash the program.

   Initiating the DRC rule editor would crash the program if started on
   a layer with no rules.

   FreeBSD and Solaris versions were not affected.

   Sorry, but most of the testing was done with FreeBSD.  It was assumed
   that the Linux versions would be as reliable as FreeBSD.  Wrong!

The Linux versions of Xic and WRspice are now linked (statically) with
gtk 1.2.6, rather than the 1.2.1 which is supplied with Red Hat 6.0.
The FreeBSD and Solaris versions already use this library.

If using a pseudo-color display (256 color mode) are there aren't enough
colors available, Xic (and WRspice) will now create and use a private
colormap.  While the application is in focus, the colors of other applications
will be false, and vice-versa.  In 8-bit mode, the colors seen in the
color selection popup will be psychedelic, but the hue sliders will set
the target color correctly.

The "master" function in the files list and elsewhere would cause a
program crash.

---------------------------

Fixed a scrolling bug in the help viewer.  Put the latest cosmetic
fixes to the help viewer in the Linux and Solaris distributions. 
Somehow these weren't in the last release.

Fixed a bug that would cause the program to be unstable after certain
macro evaluations.

Fixed the button logic in the properties editor.  The Edit, Delete, Name,
Model, Value, Init Cnd, and Other buttons now have the correct radio
group logic.

Overhaul of the help database.  The text should be up-to-date with respect
to the gtk version now.

Minor cosmetic changes and and tiny bug fixes.
--------------------------

Fixed color mapping in help window images: If run in 16-bit color mode
on a remote xterm with byte order different from the host, colors
in images would be wrong.

Fixed a bug in the graphical interface involving references to dead
windows.  Bring up the mail client with no help window present and press
help on the mail client.  Move the help window if necessary to overlap
the mail client, then dismiss the mail client.  This would cause a
crash.

--------------------------

An input file with old-style nodes without a terminal definition would
crash the program.  This has been fixed.

The !sced2xic command now fixes old-style subcircuit terminals.

The selection popups for the Dump Phys Netlist and Dump Elec Netlist
commands were not updating the selections properly.

Fixed bug in symbol flag static data, values not printed properly in Info command.

Deleted spurrious printing of cell name selected in the tree popup left
over from debugging.

Adding a terminal with the subct command to an already placed cell should
update the instances correctly now.

------------------------------

If the place popup was deleted with the window manager "delete window"
functions, the program would emit a gtk error message and possibly
crash.  This has been fixed.

Fixed a bug that would delete the first character of a file name internally
in some cases, causing file not found messages.

The place popup is now sensitive as a drag receiver.  If a file name is
dropped on the popup, it will be as if the "New" master menu was
selected for that file.

Similar problem fixed in Print popup.  If the Print popup is deletted with
the window manager, settings won't be remembered the next time.  Use the
"Dismiss" button in the popup if you want settings to be saved for the
next time the Print panel is invoked.

Similar problem fixed in the "Rotation" popup from the Transform Menu.

Similar problem fixed for the device toolbar in electrical mode.  If
the device toolbar os deleted with the window manager, the next time
the toolbar pops up it will be in the default form (pictorial or
alpha), not the last form used.

Similar problem fixed in the text editor and mail client.  If the window
manager is used to delete the window, the window is deleted immediately
and any changes will be lost.  Too bad, but that's why there is a "Quit"
button.

Similar problem fixed in script debugger.  If the window
manager is used to delete the window, the window is deleted immediately
and any changes will be lost.  Too bad, but that's why there is a "Quit"
button.

If a cell contains old-style nodes, it is automatically updated when it
is read into Xic.  The discussion in the 2.4.5 release notes concerning
use of the "!terms" command to update such cells can be ignored.  The
"!terms" command should now be obsolete.  If a cell was changed to
update the node structures, a line indicating this is added to the
"convert_rdXXX.log" file produced when the cell is read.

Added fields to tell if a cell is modified, and its file type of origin,
to the Info command.

Fixed the "Y2K" bug in the date printed in hard copy plots.

-------------------------

Added mutual inductor support, which was missing in the gtk release
(nobody noticed!).  Mutual inductor support now requires a new "mut"
device in the device.lib file.  This has been added to the device.lib file
supplied in this release.  The mutual inductor command is available
by selecting the "mut" device, which appears in both styles of the device
menu.  Unlike other selections, this enters a command where existing
inductors are selected to form mutual inductor pairs, as in earlier
versions of Xic.

Cut and paste of hypertext into the prompt line from the properties
panel should work now.

Selecting a cell name in the Info popup can now be used as input for the
commands in teh cells listing.

The buttons in the cells popup now have the correct radio-group logic.

The buttons in the files popup now have the correct radio-group logic.

Fixed a long-standing bug in the deck command.  The correct SPICE syntax for
.plot lines is
    .plot anal_type vectors ...
The anal_type (tran, dc, etc) was left out.  It is now included, from
the analysis string.  If no analysis string is given, the .plot line
is not included.  If the analysis string starts with "run", the
deck is searched for an analysis string to use, and if found the
.plot line is included.  The line will be found in a "spicetext" line,
but not in a .include file.
-------------------------

Dismissing the rotations pop-up from the Tramsform Menu with the angle set
at other than zero would cause a program crash the next time the user
pressed the Potation button in the transform Menu.

Fixed a bug in the pre-uninstall and post-uninstall scripts in the
rpm dietribution file.
-------------------------

Added a new "!set" variable: UndoListLength (integer)

This variable sets the number of operations saved on the undo list for
the Undo command.  If not set, the number saved is 25.  If set to zero,
the undo list length is infinite.

In the vertex editing mode of the wire and polyg commands, if the number of
operations exceeded the undo list length (25) while in the command, the
program could be unstable.  For example, undoing all of the vertex
modifications would likely cause a crash.  This has been fixed.

Fixed spurrious warning from rpm install.  The install will no longer
reset the xic_tech link to xic_tech.scmos if it previously pointed to
xic_tech.hyp.

Note: This doesn't really matter, but there may be files in
xic/docs and wrspice/docs of the form xic2.4.7-tmp if you installed
from earlier rpms.  These should have
been copied back without the "-tmp" but the rpm script had a bug.

Fixed a timing problem which is triggered when a cell is given on the
command line, and it produces prompting, for example if empty symbols
were found.  After responding to the prompt, the screen would not be
updated, and the prompt would not be erased, and the "keys" box would
forevermore have red text.  The opening of the first cell is now delayed
until all the application setup is complete.

When the prompting for deleting an empty symbol occurred, one would have
to enter 'n' twice, which was confusing since the first time it would
appear that the input was not doing anything.  A single 'n' now does
the job, as it should.

Fixed a problem with spawned processes conflicting with the the gtk
termination function.  In particular, the DRC Check In Background 
function would crash.  Also, the Print function could crash the program
if it terminated abnormally.

This release includes a major new function: the help viewer can now
access web addresses, similar to a web browser.  This should be convenient
for accessing information from the Internet while using Xic.  The
functionality is fairly primitive at present, but it has the capability
of performing the needed functions for the Whiteley Research
web site at www.srware.com, including password authorization and file
downloading.

This functionality is available only if the accessories-1.2
distribution has been installed.  Of course, the computer must be
able to access the Internet.  Presently, there is no support for
proxies.

Internet urls are given as arguments to the !help command.  The prefix
"http://" must be provided with the url.  Thus,
    !help http://www.srware.com
will bring up the Whiteley Research web page.  The links can be followed
by clicking in the usual way.  The urls can be embedded in help text in
the usual way, with an "<a href=...>" tag.

There exists basic support for forms, but much of this has not been
tested.  The "feedback form" in the Whiteley Research web site works,
though.

Image support is limited to gif, xbm, and xpm.  Jpeg, tiff, and other
formats can be supported, and will be included if there is interest.

Holding Shift while clicking on an anchor will download the file,
as in Netscape.  References to files with extensions .rpm, .gz, and
other common binary file suffixes will cause downloading rather than
viewing.

When downloading, the file selection pop-up will appear, pre-loaded
with the file name (or "http_return" if not known) in the current
directory.  You can change the name and the directory of the file
to be downloaded.  Press the "Download" button to start downloading.  
A popup will appear that monitors the transfer, which can be aborted
with the "Cancel" button.

HTML files on a local machine can be loaded by giving the full path
name to the file.  Relative references will be found.  HTML files
will also be found if they are located in the help path, however
relative references will be found only if the referenced file is
also in the help path.

The HTML capability imposes some obvious limitations on the string
tokens which can be used in the help database.  These keywords should
not use the '/' character, or begin with "http://".
---------------------------

If the center mouse button is used to select a link in the HTML help
windows, a new window is brought up containing that link, similar to
Netscape.

The "HelpMultiWin" variable works a little differently.  When set,
pressing a command button in help mode will always bring up a new help
window.  New windows are not created for links, however, since button 2
does thes whether or not HelpMultiWin is set.

If help is started from the toolbar Help Menu, i.e., Xic is in help mode,
Xic will remain in help mode while there is a help window present, or until
Esc is pressed.  Thus, quitting all help windows (with either the Quit
menu button of the window manager functions) will exit help mode.  Pressing
Esc will exit help mode (i.e., command buttons return to normal functions)
without removing the help windows.

Support for HTML forms in the help viewer has been imporved.  Radio
buttons and select menus now work.

The "mailto:" url is now responded to by bringing up the mail pop-up.

script functions

The following new functions are mainly useful for interfacing to HTML
forms, which will be described below.

    (real) ToReal(string)
    The returned value is a variable of type "real" containing the
    numeric value fron the passed argument, which is a string.  The
    text of the string should be parseable as a numeric constant.

    (string ToString(real)
    The returned value is a variable of type string containing a text
    representation of the passed variable, which is expected to be of
    type real.  The format is the same as the C printf function with
    "%g" as a format specifier.

    (real) Defined(variable)
    If a variable is referenced before it is assigned to, the variable
    has no type, but behaves in all ways as a string set to the
    variable's name.  This function returns 1 if the argument has
    a type assigned, or 0 if it has no type.

The following new script functions allow arbitrary shapes to be
ghost-draw and attached to the mouse pointer.

    (real) PushGhost(array, numpts)
    This function allows a polygon to be added to the list of polygons
    used for ghosting with the ShowGhost() function.  The outline of
    the polygon will be "attached" to the mouse pointer.  The return
    value is the number of polygons in the list, after the present one
    is added.  The array is an real array of x-y values forming the
    polygon.  The numpts value is the number of x-y pairs that
    constitute the polygon.  If this value is less than 2 or greater
    than the real size of the array, the real size of the array will
    be assumed.  The second argument is useful when the polygon data
    do not entirely fill the array.

    (real) PopGhost()
    This function removes the last ghosting polygon passed to
    PushGhost() from the internal list, and returns the number of
    polygons remaining in the list.

Modified Functions:

    ShowGhost(value)
    This function turns on/off the ghosting, i.e., the display of certain
    features which are "attached" to the mouse pointer.  If the value
    given is 8, the internal polygon list from PushGhost/PopGhost is
    rendered.  Values 1-7 have the previous functionality.

    The PushGhost/PopGhost functions are useful in scripts where an
    object is created, and the user must click to place the object.
    The object's outline can be drawn and attached to the pointer,
    facilitating placement.  Example:

    array[2000]
    (create some shape in array, nverts is actual size)
    ShowPrompt("Click to locate new object");
    xy[2] 
    PushGhost(array, nverts)
    ShowGhost(8)
    if !Point(xy)
        Exit()
    ShowGhost(0)
    PopGhost()
    (use xy to create object in database)

    (real) Point(array)
    The Point function now returns only if a button is pressed, or the
    Esc key is pressed.  The return value is 0 for the Esc key, 1 for
    button 1, 2 for button 2, etc.  The above example tests the
    return value and exits the script is Esc is pressed.


Forms input to scripts.

HTML forms can now be used as input devices for scripts.  A form may
provide a more convenient interface that a sequence of AskXXX() functions,
and arbitrary text and links into the help system can also be provided
in the form text.

Introduction to HTML forms

Thow interested in learning about forms in HTML should obtain a book
on the subject.  Below is a quick summary of the form=related tags.

An HTML form is a collection of input objects such as toggle buttons,
text areas, and menus which allow the user to provide input.  Within the
form is a "submit" button, which when pressed causes a predefined action
to occur.  In HTML, the form is usually processed by the web page
server (through a cgi script).  In Xic, the form may instead be processed
by an Xic script.

A form starts with a tag of the form
    <form method="post" action="some text">

All but "some text" should be copied verbatim.  In Xic, the "some text"
is of the form "action_local_xic script_path".  The quotes are required,
and action_local_xic should be copied verbatim.  The second word is the
name of an Xic script file.  The ".scr" extension is optional, and if
a directory path is not given, the script should exist in the script
search path.

The opening <form ...> tag is followed by the contents of the form
itself, which can comsist of formatted text, and references to the
following objects.

Every object is given a unique name.  This name is used to access the
data in the script.  Each object may also have a value, which is a string
token passed to identify a choice, i.e., which button of a group is
selected.  This may be different than the label on the button.

Text Boxes
These are one-line entry areas.  the tag is
    <input type="text" name="some_name" options>
The options which are optional, can be:
    size-"n"
    where n is an integer that sets the field width in characters
    maxlength="n"
    where n is an integer which limits the length of input text.

Password Boxes
These are text boxes, except that characters are printed as "*" for
security.  The form is similar to text boxes:
    <input type="password" (same as text box)>

Radio Buttons
These are groups of buttons, one and only one of which is always
selected.  The tag form is
    <input type="radio" name="some_name" value="some_value" option>text
    <input type="radio" name="some_name" value="some_other_value" option>text
    ...

Each radio button in the group has a line of the form above.  The only option
is "checked" (without quotes) which can appear in only one line, and
indicates which button is initially pressed (default is the first button
listed).  Each button should have the same name, and a different value.
The text that follows the tag appears next to the button, an is usually
but not necessarily the same as the value.

Check Boxes
These are toggle buttons.  The tag form is
    <input type="checkbox" name="name" value="some_value" option>text
The only option is "checked" (without quotes) which indicates that the button
is initially pressed.  The text following the tag appears next to the
button, and is usually but not necessarily the same as the value.

Text Blocks
These are multi-line text input areas.  The tag form is
    <textarea name="name" options>default text</textarea>
The options are
    rows="n"
    where n is an integer that sets the height to n characters
    cols="n"
    where n is an integer that sets the height to n characters

Option Menu
This is a menu of selections, shown as a button containing the current
selection.  Pressing the button produces a drop-down menu of choices.
the tag form is
    <select name="name" size="1">
    <option value="value" option>text
    <option value="another_value" option>text
    ...
There is one <option ...> tag per menu entry. The text following the
<option ...> tag will appear in the menu.  The only option is
"selected" (without quotes) which can be given on only one line and
indicates which item is initially selected (the default is the first
item listed).

Selection Menu
This type of menu has multiple lines, which can be selected by clicking.
The menu may be scrollable.  The tag form is
    <select name="name" size="n" option>
    <option value="value" option>text
    <option value="another_value" option>text
    ...
The size in the <select ...> tag is an integer greated than 1, which
indicates the number of lines visible.  If this is less than the number
of <option ...> lines that follow, the menu will be scrollable.  The
option that can appear in the <select ...> tab is "multiple" (without
quotes) which if given allows multiple lines to be selected, otherwise
only a single entry can be selected.

File Selection
    This is a text area with a "browse" button.  When the "browse"
button is pressed, the file manager pop-up appears, and the "OK" button
of the file manager will trasnfer the selected file to the form text area.
The format of the tag is
    <input type-"file" name="name" option>
The only option is size="n" to set the width in characters of the text
area.

Each form must have a submit button.  A reset button, which resets all
objects to their initial state, is also useful.

Submit Button
This is a button which initiates action on the form.  This button is
required if any action is to be taken on the form data.  The tag format is
    <input type="submit" value="message">
The message is the text that actually appears on the button.

Reset Button
This button resets each component of the form to the initial state.  The tag
format is
    <input type="reset" value="message">
The message is the text that actually appears in the button.

The form items can be intermixed with text, images, or other HTML
formatting and objects. To terminate a form definition, one must supply the
tag
    </form>

Example:
    Below is a contrived example of a form

------ file: formtest.html ----------------------------------
<form method="post" action="action_local_xic ./fcb.scr">

password <input type="password" name="pw"><br>
username <input type="text" name="text"><br>
zzz <input type="file" name="zzz"><br>

<input type="radio" name="radioset" value="1" checked>1
<input type="radio" name="radioset" value="2">2
<input type="radio" name="radioset" value="3">3

<p>
<input type="checkbox" name="check1" value="check1">check1
<input type="checkbox" name="check2" value="check2">check2

<p>
<select name="menu" size="3">
<option value="choose1">xchoose1
<option value="choose2">xchoose2
<option value="choose3">xchoose3
<option value="choose1">xchoose1
<option value="choose2">xchoose2
<option value="choose3">xchoose3
<option value="choose1">xchoose1
<option value="choose2">xchoose2
<option value="choose3">xchoose3
</select>

<p>
<select name="opmenu" size="1">
<option value="choose1">choose1
<option value="choose2">choose2
<option value="choose3">choose3
</select>

<a href="mailto:stevew@srware.com">Steve</a>

<p>
<input type="submit">
<input type="reset">
</form>
--------------------------------------------------------------

A decent book on writing HTML documents is "HTML for the World Wide Web",
Elizabeth Castro, Peachpit Press, Berkeley CA 1989, isbn 0-201-69696-7.

Interfacing forms to Xic scripts

If a form has an action which has the form
    "action_local_xic scriptname"
Then, when the submit button is pressed, the script in scriptname
is called, with the following:

The preprocessor variable SUBMIT is defined

A string-type variable is created for each active form element.  The variable
name is that of the "name" field in the form element tag (so these must
be unique).  The value of the variable is from the "value" tag of
the selected button, or the text of a text-entry object.  The variable
is defined only if the text object had text, or if a check button was pressed.

Within the script, one must supply the following logic.

Determine if the SUBMIT preprocessor variable is defined.  If yes, than
the script was called by a form, otherwise the script was called by a button
in the user menu.  Note that this enables the script to initiate showing
the form, as will be seen in the example below.

For each variable, the script must identify if the variable was set, i.e.,
a text entry had text, and possibley convert the text to a numeric value.
The input should also be sanity checked at this point.

Below are the first few lines of an example script.  When the script
is selected in the User Menu, it will display the help wondow containing
its input form.  When the "submit" button of the form is pressed, the
script will be called again, and the data processed.


#ifndef SUBMIT
# SUBMIT is not defined, so we are being called from the User Menu
# pop-up our input form in the HTML viewer and exit
TextCmd("help /usr1/stevew/http/spform.html")
Exit()
#endif

# We are being called from the form (SUBMIT is defined)
# First check to option menu return.  The entries are digits, which must
# be converted from text strings to real values
#
if Defined(opmenu)
    num = ToReal(opmenu)
else
# This should never fail, since the option menu always has a selection
    ShowPrompt("number of turns unknown")
    Exit()
end

# Next check the return from a text entry object.  Exit if the variable
# is undefined (text input empty), or the result is a bad numeric value
#
if Defined(pwidth)
    width = ToReal(pwidth)
    if (width < 0)
        ShowPrompt("Bad input (< 0) for width: ", width)
        Exit()
    end
else 
    ShowPrompt("width unknown")
    Exit()
end

(check other input variables)
(perform calculations/operations)
Exit

This is typical boilerplate for a form-entry script.

* The install scripts in the rpm distribution file were operating on
files under /usr/local, even if --prefix was given on the rpm command
line.  These scripts do things like move the previous executable to
xic.old, and delete old files not used in the new release.  This should
work properly now when --prefix is used. 

Drag/drop into the debug popup with the Open dialog present now works.

When responding to the prompt for variables for the Monitor function in the
script debugger, entering "all" or "*" or "." will monitor all currently
defined variables.
--------------------------------------

Fixed memory problem when the help system received an unknown keyword.

Manual released -----

Help window changes:
The HTML viewer is now a drop receiver.  If a file or url is dragged into
the viewer and dropped, that file or url is read into the viewer, after
confirmation.

The main menu of the HTML viewer has changed.  There is now a File menu,
plus the previous Options menu.

The File menu has two new commands:
The Open command pops up a dialog into which a new keyword, url, or file name
can be entered.

The Open File button brings up the file browser.  The OK button on the file
browser will load the selected file into the viewer (the file should be
a viewable file).  The file can also be dragged into the viewer.

The Options menu contains a new command:
The Set Font button will bring up a font selection pop-up.  One can choose
a typeface from among those listed in the left panel.  The base size can
be selected in the right panel.  Pressing "Set Font" will switch to the
selected font family and redraw the HTML viewer viewing area.
The fixed font used in the viewer is adobe-courier, and is not
changed except for size scaling.  The "filter" page in the popup
can be used to limit the choices.  In particular, if you want a large
font, selecting only "scalable" in "Font Types" eliminates the
ragged-looking bitmap fonts from the selection.
The "Store Font" button will save the current selection, so that
new viewer windows that aren't created by clicking on a link in an
existing window will use the stored font.

A font can also be stored with a new '!' command:

    !helpfont [ foundry-family-size ]

If no argument is given, the default adobe-times-14 font is reset.
Otherwise the argument is expected to be a font, in the format indicated.
There are three fields, separated by '-'.  The first two fields are those
of the X font specifier (see the info window of the font selection pop-up).
The third field is the pixel size of the base font, which is the "Size"
selection from the font selector.


Fixed bug which would foul up positioning of form elements with large
text fonts.

Incorporated a work-around for a problem in the Linux C library that
was causing numerical problems that would show up in design rule checking,
and elsewhere.

Fixed a bug in the Print pop-up that would force the lowest resolution
choice no matter what resolution was selected.  This would happen after a
new output format was selected.

New script functions: PushGhostBox(left, bottom, right, top)
(string) GetCurLayer()

Fixed a problem with the script functions GetButtonStatus(menu, btn) and
PressButton(menu, btn).  First, it should be realized that the string
arguments refer to the internal names.  For the button, this is the
five character or fewer name that is shown in the tooltip that pops up
when the pointer is over the button, and *not* the text label on the
button.  The same applies to the menu name, however there is a problem in
that the internal menu names have not been documented.  For the record, they
are:
     file
     edit
     view
     trns
     attri
     cnvrt
     drc
     extrc
     user
     help

Now, however, the identification is case insensitive and only the first one
or two characters have to match.  Thus "Convert", "c", "crap" would all
select the cnvrt menu, for example.  One character is sufficient, except
for 'e' (extrc and edit).  So, the menu argument can be the menu label,
or the internal name, or some simplification at the user's discretion.
---------------------------------------

Fixed a bug the terminal placement algorithm for extraction.  In very
simple cases, such as a single mosfet, the terminals for the source
and drain nodes would not be placed (they would appear at the drawing
origin).  This had to do with resolving source/drain ambiguity, and
should not happen in more complex circuits, or at least circuits with
devices connected together.

Major internal changes to the HTML viewer.  A new communicaions library
was written, which is now used for all http/ftp transfers (the ftp
protocol is now supported).  The httpget utility in now based on this
library.

A document cache is now maintained.  The cache is located in the user's
home directory under a subdirectory named ".wr_cache".  A file named
"directory" in this directory contains a human-readable listing of the
cache files and the original urls.  The cache files are named
"wr_cacheN" where N is an integer.  The listing consists of a line with
internal data, followed by data for the cache files.  Each such line has three
columns.  The first column indicates the file N.  The second column is 0
if the wr_cacheN file exists and is complete, 1 otherwise.  The third
column is the source url for the file.  The number of cache files saved
is limited, presently to 32.

The url given on the Open command or through the !help command is not
relative to the current page, however if a '+' is given before the
url, it will be treated as relative.  Example:
   You are looking at:  http://www.foo.bar,
   if you enter /dir/file.html, the display will be updated to
   /dir/file.html on your machine.  If you enter
   +/dir/file.html, the display will be loaded with
   http://www.foo.bar/dir/file.html.

There is now a "stop" button which will stop http transfers in progress.

New buttons:
   In File Menu:
     Reload
       This will reload the current page.

   In Options menu:
     Don't Cache
       Turn off caching of pages and images.
     Clear Cache
       Clear the *internal* cache.  The files, however, are not cleared.
    Load Cache
       Load the internal cache from the files that presently exist in the
       cache directory.
    No Images
       Don't display images at all that aren't local
    Sync Images
       Download images as they are encountered.  All downloading will
       be complete before the page is displayed.
    Delayed images
       Download images after page is displayed
    Progressive images
       As with delayed images, but images are displayed in chunks
       as downloading progresses
    Anchor Plain
       Standard blue text for anchors
    Anchor Buttons
       Outline button around anchors
    Anchor Underline
       Underlined blue text for anchors
    Anchor Highlight
       Anchor is highlighted when pointer passes over
    Bad HTML Warnings
       Messages about incorrect HTML format are emitted to standard
       output
    Freeze Animations
       Animations are frozed at current frame
Much work was done to improve the display of web pages (but probably much
more needs to be done).  Url's of web sites that display badly (or worse)
would be appreciated.

The Files Listing pop-up now does a better job of producing columnar
listings after a resize.

More on HTML forms in the HTML viewer.
When the "Submit" button is pressed, a temporary file is created which
contains the form output data.  The file consists of key/value pairs in
the following formats:
    name=single_token
    name="whatever"
There can be no white space around '=', and white space should separate
the pairs.

The action string from the <form ...> tag determines how this file is
used.  The file is a temporary file, and is deleted immediately after use.

If the action string is in the form "action_local_xxxx", then the form
data are processed internally.

If the full path for the action string begins with "http://" or "ftp://",
then the form data are encoded into a query string and sent to the location
(though it is likely an error for ftp).

Otherwise, the file will processed locally.  This enables the output from
the form to be processed by a local shell script or program, which is
why all this matters.  The command given as the action string is given the
file contents as standard input.  The command standard output will
appear in the HTML viewer window.  Thus, one can create nifty HTML
form front-ends for your favorite shell commands and programs.

Gif animations seem to work now.

Jpeg support added, fixed scanline bug in progressive loader.

Xic now remembers the original file name of GDSII, CIF, and EDIF files,
and will use that name (with any path prefix stripped) as the default
name when saving the hierarchy.

Xic can now directly read an write gzipped GDSII files.  These are
compressed files, which are normally created and uncompressed with the
GNU gzip program.  Using the compressed files can conserve disk space.

If a gds file has been compressed with gzip, it will be read into Xic
normally when its file name is given as input to Xic, whether or not
it has the standard ".gz" suffix for gzipped files.  When the file is
later written, it will be compressed if the given file name has the
".gz" suffix.   If the original suffix had a ".gz" suffix, then the
default file name will as well.  The suffix can be added to coerce
compression.

The other files and file formats other than GDSII are not supported
with compression.

DRC changes
After another think through of the logic behind the internal design
rules, some changes have been made to the MinSpaceFrom and MinNoOverlap
tests.  The four related "edge" tests now have the following logic:

"clear" means does not contain any of the target layer given in the rule
"covered" means 100% covered by the target layer given in the rule

MinSpaceTo
For the parts of an edge that are clear just inside the figure, test
outside of the figure the given distance and make sure that these
regions are also clear.

MinSpaceFrom
For the parts of an edge that are covered just inside the figure, test
outside of the figure the given distance and make sure that these regions
are also covered.
*** This has changed ***
Previously, it would read "For the parts of an edge that are covered
just *outside*..."

The result of this change is that the coincident-edge condition is
flagged as an error, where previously it would not be.

MinOverlap
For the parts of an edge that are covered just inside the figure, test
inside of the figure the given distance and make sure that these regions
are completely covered.

MinNoOverlap
For the parts of an edge that are clear just inside the figure, test
inside the figure the given distance and make sure that these regions
are completely clear.
*** This has changed ***
Previously, it would have read "For the parts of an edge that are clear
just *outside*..."

The result of this change is that testing will be done on an edge that
is coincident with an adjacent object on the target layer, where previously
this wouldn't be tested.  This could lead to missed errors.

----------------------------------------

HTML viewer changes

Support added for frames.
Support added for targeted anchors.
More clean-up and polish.

The !set UsePixmapStore function works again

One can now include quote marks in strings in scripts by preceding them
with a backslash. I.e., forms like
   string = "this word is \"quoted\""
should now work

The core database has been rewritten to incorporate a new data structure
which can be vastly more efficient for building the sorted database.
This should make reading in a large design run faster.  The whole application
is now elegantly subclassed from the basic database objects; cells are
containers, and cell objects are database objects.

New script function: (string) TempFile(prefix)
This function creates a unique temporary file name using the prefix string
given, and arranges for the file of that name to be deleted when the
program terminates.  The file is not actually created (use the Open()
command to do this, using the returned string).

There are four new keywords recognized in the .mozyrc file that was described
in the previous release notes.  The mozyrc file is now distributed in the
Xic and WRspice startup directories (usually
 /usr/local/lib/xictools/***/startup).
To change the defaults, you must copy this file into your home directory
as ".mozyrc", and edit it to make changes.

DefaultBgColor color
This sets the background color for pages that do not have a <base> tag,
which includes all of the pages in the help database.  The argument is
one of the HTML color names, or a color in the HTML form #RRGGBB.

DefaultBgImage image
This sets the background image for pages that do not have a <base> tag.
The background color is ignored if also given.  The image argument is a
URL specifying an image.

DefaultFgText color
This sets the default text color for pages that do not have a <base> tag.
The argument is one of the HTML color names, or a color in the HTML
form #RRGGBB.

DefaultFgLink color
This sets the default link color for pages that do not have a <base> tag.
The argument is one of the HTML color names, or a color in the HTML
form #RRGGBB.


The script interpreter line parser has been changed so that multiple
logical clauses can exist on a single line, i.e., forms like
  if (a == b) expression
  else if (something)
should new work properly.  Previously, parsing would stop after the
first logical clause was found, and the rest of the line was ignored,
so that the above lines would be read as
  if (a == b)
  else
This applies to label, repeat, while, dowhile, if, and else clauses.
Parsing stops after goto, statement, end, break, continue, return,
function, and endfunc clauses as before.

However, if the next character is a semicolon (';'), the parser will
continue reading the same line.  Thus, semicolons can be used to
concatenate commands, similar to unix shells.

Fixed a bug in the script evaluator that would cause failure to execute
statements following multiply-nested blocks.

Fixed a bug in the last release that prevented finding html files
in the help database, so that the "spiralform" demo was broken.

Notes about display speed
The UseDisplayCache and UsePixmapStore variables are now set by default,
but can be unset in a startup script.  Setting these variables can
often provide huge increases in drawing speed of large, complex
designs, and the drawbacks seem minimal.

The drawback is more memory usage, which is increased by caching.  A second
drawback with UsePixmapStore is lack of user feedback.  This is partly
alleviated by drawing the first layer when complete, then redrawing the
final layout.  During the drawing time, the screen does not change, i.e.,
in this mode you can't watch the cell being rendered.

There is a size threshold below which UsePixmapStore is turned off.  For
small areas, which are expected to contain relatively few objects, it
is faster not to cache.  The size threshold is currently 500X500 microns.

Performance degrades very rapidly if page swapping is necessary, which
happens when there is insufficient RAM.  If there is disk activity when
drawing a large design (after the first layer is shown), most likely page
swapping is going on, and adding additional RAM would be advantageous.

A new script command "preferences" has been added to the User Menu.  This
provides a graphical interface to the variables that are normally set with
the !set command.

A bug in the extraction that caused failure in LVS with certain circuit
topologies was fixed.

After LVS, if there were errors, the file that pops up was often incomplete
due to a timing error.  This has been fixed.

Changed the !exset command so that it properly updates devices with
names different form the physical dual devices.  This was the original
behavior of this command, but was not true in more recent versions.

The From CIF command works again.  It was broken due to a change made
quite a long time ago.  The command is deprecated anyway and may be
removed, since the To Xic button performs the same function.
----------------------

The Extract Parameter Editor now correctly identifies Routing layers.
Previously, they were printed as "Conductor".

The Extract Parameter Editor now contains an entry for "Routing" in the
Keywords menu.

The main window view size in microns is now printed in the status area.

There is a new print driver, which allows the main window, or a portion of
it, to be saved as a jpeg, gif, tiff, png or similar files.  The type of
file is determined by the extension of the file name provided (the file
name should have one!).  The driver makes use of the Imlib library, which
can convert to several formats internally, and can convert to many more
by making use of "helper" programs that may be on your system.

internal formats:
extension                     format
ppm, pnm, pgm                 portable bitmap (netpbm)
ps                            PostScript
jpg, jpeg                     JPEG
png                           PNG
tif, tiff                     TIFF

I you have the netpbm package installed (available at sunsite) then many
more formats are available, including gif. 

The image file contains data obtained directly from the screen buffer.
If the Frame button is active, the file will contain the framed area
(any part visible on-screen).  Otherwise, the file will contain the
entire main window.  The image size is that shown on-screen.

If the Legend button is active, the image will contain the legend, which
will only be visible if no frame is used.  If Landscape is selected,
the image will be rotated 90 degrees.

It is now possible to define layer presentation attributes specific to
individual hardcopy drivers, and to suppress the use of the "alt"
attributes for individual drivers.  The following keywords are now
allowed in the driver blocks near the end of the technology file:

  LayerName ...
  RGB ...
  Filled ...
  Invisible

The format of each line is the same as would appear in the layer blocks,
however the specification is only used while in hard copy mode, and the
driver containing the specification is active.  The RGB, Filled, and
Invisible lines can only follow a LayerName line, and the LayerName
line must specify a layer already named in a layer block.  The name can
be that of a physical or electrical layer.

When in hard copy mode with a driver containing layer specifications,
and one changes the fill pattern, color, or visibility status of a
layer specified in the driver block, the layer specification in the
driver block will be updated, and not the "alt" layer.  Creating a new
technology file with the "Save Tech" command in the attributes menu
will make the change permanent.

In order to specialize layer presentation to drivers, the LayerName
(at least) line must be added to the technology file with a text
editor.  Once included, the other presentation attributes can be
changed from within Xic.

The driver blocks can contain the new keyword

  NoAlt

which will cause the use of the ordinary screen presentation while that
driver is active in hard copy mode.  There is no text following this
keyword.  If there are layers defined in the driver block, their
attributes will override the screen attributes.

There is a new editing command in the Edit Menu: Erase Under

This command will erase the intersection area of non-selected objects
with selected objects.  The selected objects are not affected.  This
allows non-manhattan holes to be cut in dark areas, for example.
Suppose one needs a circular hole in a ground plane.  Using this command,
the task is simple.  One would create the disk on some arbitrary
layer where the hole is desired, select it, press Erase Under, then
the DEL key to erase the disk object.

If the Layer Specific button (in the side menu) is active, only the
current layer is erased, others are untouched.  Otherwise, all unselected
geometry is affected.

The HTML viewer now handles <form> tags in tables between rows, so it
no longer gags on the www.stockhouse.com web site.

The HTML viewer now wraps text around left and right justified tables.

All of the internal hard copy drivers are now enabled by default.  Drivers
can be disabled, so they don't appear in the Print popup format menu,
by adding the line "HardCopyDevice devname off", where devname is the
internal driver name.  This is the same line that begins a driver
block, with the addition of the "off" keyword ("disable", and "n" are
also recognized).  To determine the driver name, use the Save Tech
command to write a technology file, and examine the driver blocks
in the file.

Fixed a bug: If the Properties menu was up, and was in text-input
mode, and the Run button was pressed, the program would crash.

In the last release, the hardcopy support was broken unless one entered
"unset UseDisplayCache".  This has been fixed.

The Xor command has been rewritten.  The new version does not have
a problem with polygons with overlapping bounding boxes.

A new polygon clipping algorthm was incorporated.  The new algorithm is many
times faster than the old, and probably less prone to errors.  Occasionally
the old algorithm would seg fault for some reason.

This is the third generation of the clipping algorithm.  Both previous
algorithms were horrible complex messes.  I think I have found a simple,
fast way to do this, finally.

There is a new feature installed as part of the Erase command.  If the
Control key is held while the box is completed, the objects under the
box will be clipped to the box, rather than being clipped around the
box.  The parts of the objects that were deleted are added to the
yank buffer.  If Shift is also held, there is no deletion, but the
parts of objects that would be deleted are added to the yank buffer.

Fixed a bug.  Attempting to clear an already clear layer crashed the
program.  This would happen in the !layer command.

There is a new `!' command, which is probably pretty useless except for
debugging: !pnum
Giving this command will transiently show the vertex number of all
polygon vertices, in the main drawing window.


The Edit command can now access the Internet.  The name given to the Edit
command can be in the form of a URL, followed by a subset of the "httpget"
options.  The url must begin with "http://" or "ftp://", and the file
is expected to be suitable Xic input.

For now, only single files can be accessed, which prevents accessing
a native-format cell with subcells, since the subcells will not be
found (unless they happen to exist on *your* machine).

The options that can follow the url are:
  -o filename
     Ordinarliy a temporary file is used for downloading, which is
     destroyed.  The user must save the hierarchy to retain a copy
     on the user's machine.  If this option is given, the downloaded
     file will be saved in the given file and not destroyed.

  -u user
  -p password
    These are the http "basic" authentication user/password.  Note that
    these are not the site login/password, which should be part of the
    url if needed.  Rather, they are for accessing restricted pages
    through an http server which supports basic authentication.

Gad! Fixed a bug that would crrash the program if too many cells were
deleted (such as in Clear).

Fixed bug: the second time the print popup for the HTML viewer appears,
it can cause a program crash.

Postscript printing for the HTML viewer now works again.

Text can now be selected in the HTML viewer.  This can be pasted into
other windows in the usual way.
------------------------

The password form in the HTML viewer works again.

Fixed the presentation of bullet glyphs and rules.

Fixed a bug: initial text typed into the script debugger in edit mode
was sometimes printed red.

Fixed a nasty interaction between the Label and Logo commands, which share
a lot of the same innards.  If in one command and in text mode, pressing
the other button would hang or crash the program.

Added idle procedure for nonsafe command calls.
--------------------------

The background color was not being updated correctly after an expose
event.  This was only apparent when the background to set to some color
(not black), or (most annoyingly) under Solaris 7 CDE when the expose
regions are given a white background.

Radio button form objects were hideously broken, fixed.

If the files list was visible when a ned file was opened for editing, the
files list window would be reshaped incorrectly.

The LVS function now refuses to run if the electrical or physical part
of the current cell is empty.

The HTML viewer should handle colors in 256-color mode better now.  Previously,
colors would often change or disappear when switching between pages.

In extraction, some tweeks were applied to facilitate the case when
device structures are defined in multiple cells, such as when resistor
contacts are in separate cells from the resistor body.  The geometry in
these subcells is now directly considered in grouping, so that group
numbers will be shown for these objects when Show Groups or Show Nodes
is active (whether or not the subcell is expanded).

Some examples were added to the help text for extraction.

One can now open Xic input files from anchor text in the HTML viewer.
The type of file is recognized by the suffix.  These are:
GDSII:  .gds, .str, .strm, .stream  (.gz may follow)
CIF:    .cif
EDIF:   .edif, .edf, .edi
OCT:    .oct
Xic:    .xic
Native (Xic) files are only recognized if they have a .xic extension.
In the case where an Xic file has no extension, or another extension,
it will have to be copied or linked to provide the .xic extension before
it can be accesses through anchor text.  The anchor text is given in the
normal way, e.g.

Click <a href="http://somewhere/lib/cell.gds">here</a> to view the
design.  Click <a href="/usr/joe/library/joecell.gds">here</a> to view
Joe's cell.

The .oct extension is stripped before an OCT file is loaded.

For the HTML viewer, if the first character of an anchor url is '$',
it is processed specially by Xic.  The leading word is replaced with
other text, either an internal path, or an environment variable.  The
internally recognized tokens are:
$HELP            replaced by first component of the help path
$EXAMPLES        replaced by path to examples
$DOCS            replaced by path to docs
$SCRIPTS         replaced by path to scripts
Otherwise, if it matches a variable in teh environment, it is replaced
by the environment variable value.  If no match, it is left alone.

The paths are derived from the first component of the Help path.  If the
HelpPath variable is "/usr/local/lib/xictools/xic/help /blather/help",
the substitution paths are "/usr/local/lib/xictools/xic/examples", etc.

If the first character of an anchor URL is '~', the path is tilde
expanded.  This is done after '$' substitution.  Tildes denote a user's
home directory:
"~/mydir" might expand to "/users/you/mydir", and "~joe/joesdir" might
expand to "/users/joe/joesdir", etc.

-----------------

Fixed a bug: reading in a corrupt gds file would crash the program due
to an error in the error handler.

Fixed a bug: typing "des" would crash the program under Linux.

Fixed a bug: the "Rehash" button in the Debug Menu was not responding to
the keyboard accelerator.
--------------------

Fixed bug in the OCT reader.  File descriptors were being left open.
For large designs, the system would run out of file descriptors, preventing
new files from being opened.

New !set variable: NoMergeBoxes (boolean)
When set, boxes are never merged with neighboring or overlapping boxes.
If set, the Merge On Read button in the Convert Menu will have no
effect on boxes.

Now, the string used as the data in the set command is always $(...) expanded.
Previously, this only applied to input from the prompt line.

A number of new script functions were added.

(integer) Strncmp(string1, string2, n)
    This compares at most n characters in strings 1 and 2 and returns
    the lexicographic comparison: 1 if string1 is greater than string2,
    0 if equal, and -1 if string1 is less than string2.  This is equivalent
    to the C strncmp function.

(integer) Strcasecmp(string1, string2)
    This internally converts strings 1 and 2 to lower case, and returns
    the lexicographic comparison: 1 if string1 is greater than string2,
    0 if equal, and -1 if string1 is less than string2.  This is equivalent
    to the C strcasecmp function.

(integer) Strncasecmp(string1, string2)
    This internally converts strings 1 and 2 to lower case, and compares
    at most n characters.  It returns
    the lexicographic comparison: 1 if string1 is greater than string2,
    0 if equal, and -1 if string1 is less than string2.  This is equivalent
    to the C strncasecmp function.

(string) Strtok(str, sep)
    The Strtok() function is used to isolate sequential tokens in a
    string, str.  These tokens are separated in the string by at least
    one of the characters in the string sep.  The first time that
    Strtok() is called, str should be specified; subsequent calls,
    wishing to obtain further tokens from the same string, should pass
    0 instead.  The separator string, sep, must be supplied each time,
    and may change between calls.

    The Strtok() function returns a reference to each subsequent token
    in the string, after replacing the separator character with a NULL
    character.  When no more tokens remain, a null string is returned. 
    Note that this is destructive to str.
    
    This function is similar to the C strtok function.

    Example:  print the space-separated words

      teststr = "here are\tsome   words"
      word = Strtok(teststr, " \t")
      Print("First word is", word);
      while (word = Strtok(0, " \t"))
        Print("Next word:", word)
      done

PrintLog(fd, ...)
    This works like the Print() function, however output goes to a file
    previously opened for writing with the Open() function.  The first
    argument is the file handle returned from Open().  Following arguments
    are printed to the file in order.

TextWindow(fname, readonly)
    This function brings up a text editor window loaded with the file
    whose path is given in the fname string.  If the integer readonly is
    0, editing of the file is enabled, otherwise editing is prevented.

(string) SetExpand(string, use_env)
    This function expands variable references in the form $(word) in
    string.  The word is expected to be a variable previously set with
    the Set() function or !set command.  The value of the variable
    replaces the reference in the returned string.  If the integer
    use_env is nonzero, variables found in the environment will also be
    substituted.

(string) Glob(pattern)
    This function returns a string which is a filename expansion of the
    pattern string, in the manner of the C-shell.  The pattern can contain
    the usual substitution characters *, ?, [], {}.

    Example:  Return a list of .gds files in the current directory
        list = Glob("*.gds")

(integer) ModifyTerminal(xe, ye, xp, yp, name, lname, type, remove)
    This is a rather complicated function used to add, modify, or remove
    formal terminals of the current cell.  The arguments are as follows:

      xe, ye (real) : The coordinates, in "microns" of the terminal in
                       the electrical schematic.
      xp, yp (real) : The coordinates, in microns, of the terminal in
                       the physical layout.
      name (string) : The terminal's name
      lname (string): Physical layer name associated with the terminal.
      type (string) : The terminal type, one of "INPUT", "OUTPUT",
                       "INOUT", "SUPPLY", "GROUND".
      remove (integer): Non-zero will remove terminal.

    If a terminal already exists which matches the given name, or
    either the physical or electrical coordinates, the existing terminal
    will be updated, or removed if remove is nonzero.

    Otherwise, if remove is zero, a new terminal will be added with the
    given characteristics.  The name, lname, and type arguments can be
    passed 0, in which case a default will be used.

    If the electrical coordinates do not match a "node" where a connection
    can occur, the terminal will be "virtual".

    The function returns 1 if the operation succeeded, 0 otherwise.

(integer) AddCellProperty(number, string)
    This function adds a property to the current cell.  This will only
    be successful in physical mode, and only the physical part of the
    cell receives properties.  The number is an integer property specifier,
    and the string is the property content.  The function returns 1 if
    the operation was successful, 0 otherwise.

RemoveCellProperty(number)
    This function will remove all of the properties with the given integer
    number from the physical part of the current cell.  It will only
    work in physical mode.  The function returns 1 if the operation
    is successful, 0 otherwise.

(integer) GetCellPrpHandle(number)
    Since there can be arbitrarily many properties defined with the same
    number, a generator function is used to read properties one at a
    time.  This function returns a generator index for the property number
    (integer) passed.  This applies only to the physical part of the
    current cell.  This function can be called in electrical or physical
    mode.  The returned value is used by the GetProperties() function
    to actually retrieve the property text.

    Instead of an integer, the string "all" can be passed for the number
    argument, in which case the generator will iterate over all
    cell properties.

(integer) GetPrpHandle(number)
    Since there can be arbitrarily many properties defined with the
    same number, a generator function is used to read properties one
    at a time.  This function returns a generator index for the
    property number (integer) passed.  This applies to the first
    object in the selection queue (the most recent object selected),
    in the physical part of the cell in physical mode only.  The
    returned value is used by the GetProperties() function to actually
    retrieve the property text.

    Instead of an integer, the string "all" can be passed for the number
    argument, in which case the generator will iterate over all
    properties of the object.

(string) GetProperty(handle, number)
    This function is called repeatedly with the handle returned from
    GetCellPrpHandle() or GetPrpHandle(), and a number argument, and
    returns property text.  One property text string is returned per
    call.  A null string is returned when there are no more
    properties.  The number argument will also take the string "all",
    in which case all properties will be returned, not just this with
    a specified number.

    NOTE:  This function is completely different than its previous
    incarnation.

The following changes have been made in the script interpreter.

    The constant EOF is now predefined (to -1).

    The test for zero in if and while now applies to strings, and will fail
    on a null string.

(string) ReadLine(handle)
    This function now returns a null string when the end of file is reached.

(integer) ReadChar(handle)
    This function now returns EOF (-1) when the end of file is reached.

Edit(name, symname)
    The Edit() function now has an additional string argument symname.  The
    purpose of this argument is to resolve the ambiguous situation when the
    file in name contains multiple top level symbols, which can be the case
    for GDSII files.  The symbol name matching symname will be the one
    opened.  If 0 is passed for symname, a pop-up window will appear prompting
    the user to select a cell to edit, which was the previous behavior.

    The name argument can now be passed 0, in which case the user will be
    prompted for a file or cell to open for editing.

(string) PrintStringEsc(args, ...)
    This works exactly like PrintString(), however, special characters
    in any string supplied as an argument are shown in their '\' escape
    form.

The string handling in scripts has changed somewhat.  Whenever a string is
defined as a literal in a script or from the Monitor panel,
it is now filtered through a function which converts the following
escape codes into the actual character value.  The escape codes recognized,
from ANSI C Standard X3J11, are

           \a      Write a <bell> character.
           \b      Write a <backspace> character.
           \f      Write a <form-feed> character.
           \n      Write a <new-line> character.
           \r      Write a <carriage return> character.
           \t      Write a <tab> character.
           \v      Write a <vertical tab> character.
           \'      Write a <single quote> character.
           \\      Write a backslash character.
           \num    Write an 8-bit character whose ASCII value is the 1-, 2-,
                   or 3-digit octal number num.

Whenever a string is printed, in one of the output functions or to the
Monitor panel, the reverse filtering is performed.  When a range is applied
to a string in the script, the indices apply to the string with escapes
substituted, e.g., "\n" counts as one character.

There is a new `!' command:  !script name [ path ]

This function will add name to the list of user-defined function  buttons
in the User Menu.  When the button is pressed, the file indicated by path
will be executed as script text.  The name variable should be the actual
name to appear in the menu.  The path should be a full path to a file,
which can be any file name as long as it contains a script, i.e., the .scr
extension is optional.  A script added that has the same name as a script
in the technology file or the Script path will supersede the previous script
definition.

If no path is given, any command previously added with the !script command
with the smae name is deleted from the User Menu.  This does not affect
scripts defined in the technology file or in the Script path, except that
such scripts will revert to the previous definition.

--------------------------

Fixed a hideous error that would crash or hang the program in the Copy
command from the Cells Listing pop-up.

Fixed a problem with the Solaris and possibly the Linux versions, whereby
the program would abruptly terminate with a message "Alarm Clock" a few
minutes after accessing a web site with the help system.

Fixed a problem in that the after changing print formats in the Print pop-up,
and dismissing the Print pop-up, the "alt" colors and fill patterns whould
be used.

Fixed a problem with the Print pop-up not dealing with print-block layers
and the NoAlt keyword.

Fixed a problem with the Print pop-up:  If a long print was started, and the
user pressed the Print pop-up Dismiss button and then iconized the application,
when the application was un-iconized the Print pop-up would appear, but with
missing features.  Pressing the Print button in this state would crash the
program.
------------------------------

* There is a new capability added: named symbol tables.  The symbol table
is the internal data structure that maps the names of cells in memory
to the cell's data.  Previously, there was only one symbol table, and
all opened cells were kept in the same "space".  In the present release,
the new '!' command

    !symtab [name]

is used to open new symbol tables, or to switch between symbol tables.
The name can be any text word, and it identifies a symbol table.  If
name is not given, the symbol table used will be the default symbol table.
If name is "?", a list of the symbol tables is shown on the prompt line.

When switching between symbol tables, the user is prompted to save any
unsaved cells.  After the symbol table is switched, the default "noname"
cell is opened for editing, in the new symbol table.  The Cells Listing
pop-up will list the cells that have been opened in the new symbol table.

This feature allows cells of the same name to be in the database
simultaneously.

Only the default symbol table is checked for unsaved cells when the program
exits.  It is intended that the named symbol tables not be used for editing,
but for reference purposes. 

If you have different versions of the same cell name in different symbol
tables, they should be written to disk under different names of they will
overwrite one another.

* The layer names in layer expressions in the !layer command can now be
specified as layer_name[.cellname].  The layer_name is an existing layer
name.  If the name of a cell follows a '.' separator, then the geometry
is obtained from the given cell, as if it were overlaid on the current
cell.

The cellname can have the form [$symtab$][cellname], i.e., the name of
the cell can be preceeded by a dollar-sign delimited string token, which
is the name of a named symbol table.  If given, and the name matches an
exsiting symbol table name, the cell is obtained from that symbol table.
If the symbol table name is given, the cell name is optional, and if not
given defaults to the name of the current cell.

If the $symtab$ is given, and the cell is not in this table, it will be
opened from disk into the given table (not the current table).

This is an important new feature that provides another means of importing
geometry from another cell, after supplying the manipulations of the
expression.  The origin of the source cell is taken as the origin of the
current cell.  The source cell must be in memory, or be in a native cell
in the search path.

Examples:
   Suppose you have two versions of a cell, cell and cell_old, and you want
to know if they differ on layer M1.  Open a dummy cell for editing, then
issue
      !layer ZZ = M1.cell^M1.cell_old
Press the Home key to view the entire cell space.  Any geometry shown on
the new dummy layer ZZ is the exclusive-OR of the geometry on M1 of the two
cells, i.e., the difference.  If there is no geometry on ZZ, M1 is the same
in cell and cell_old.

As a variation, suppose that you have done the following:
    !symtab old
    ed oldstuff/mycell
    !symtab
    ed newstuff/mycell

There are two versions of mycell in memory.  To compare the layer M1
in the two cells, one could then
    !layer ZZ M1^M1$old$

Then the ZZ layer, which consists of the exclusive-OR of old and new
M1 in mycell, would be added to the current mycell.  Pressing the Tab
key undoes the addition.

Suppose you want to import the inverse of the geometry on layer VIA from
cell into the current cell, also on layer VIA:
    !layer VIA = !VIA.cell

The VIA layer now consists of the inverse from cell.  Any geometry that
existed on VIA in the current cell before the command is deleted.
The bounding box of the current cell may have been expanded to include
the bounding box of cell.  The area used to create an inversion is the
rectangle bounding all cells referenced in the expression, plus the current
cell.

Suppose you simply want to copy the geometry from layer M2 of cell into the
 current cell:
    !layer M2 = M2.cell
The M2 layer now consists of the geometry on M2 from cell.  The bounding
box of the current cell may have been expanded, in which case some of the
M2 features may be off-screen (press the Home key to see the entire cell).
Any objects previously existing on M2 in the current cell are deleted
before the operation.

Note:  The blinking feature, enabled by pressing button 3 over a layer
indicator in the layer table, flashes the color used by that layer.
If the color is used by other layers, then features on the other layers
will blink as well.

Fixed a bug: After a pring job completes, and the pop-up message appears,
pressing a key would crash the program under some window managers,
including WindowMaker and fvwm.  Pressing the key now deletes the pop-up
as it should under these window managers.

-------------------------------------

Fixed a couple of problems with the imlib hardcopy driver.  The "imlib"
library, which is a "free" library of graphical conversion routines,
looks for a startup file, and a palette file, which are normally installed
when the library is installed.  Without these files, while operating in
256-color mode, the driver will issue an error message and crash the
program.  Unforutnately, these files were not part of the Xic/WRspice
distribution.

Xic and WRspice now link a modified version if imlib, which does not
read a startup file, and the color plaette is defined internally.

The second problem was that the background color in the image was set to
the "system" background color, and not the background used in Xic/WRspice.
The system backaground ie either black or white.  The background color is
now set properly.

The Show command in the Cells Listing popup was sometimes not redrawing the
cell correctly if the cell was rotated or mirrored.  This has been fixed.

When the Open command is used from the text text editor, only the current
file was listed in the file browser pop-up.  All files in the directory
of the current file are now listed, which was the intended behavior.

The HTML viewer now recognizes references to plain-text files, and will print
the context of these files verbatim.  A plain-text file is recognized
by the extension, which is currently one of ".txt", ".doc", ".log",
".scr", ".sh", ".c", ".cc", ".h".

Fixed problem: It was almost impossible to place huge cell arrays (such as
100 X 100) since the ghost-drawing takes too long, so moving the pointer
takes a lot of patience.  For arrays, only one cell is now ghost-drawn,
along with the array bounding box, shown as a dotted line.  Cells are now
shown with an additional diagonal cross for better visibility.

The number of objects ghost-drawn during copy, move, stretch, and put is
now limited to 200 for reasonable update speed.

Fixed some problems which affected editing cells while in symbolic mode.

    - Certain other commands should be disabled while in this mode, some
      weren't being disabled properly.
    - Using Undo would likely crash the program.  This has been fixed.

Found a situation (unfortunately not uncommon) that would fool the "new"
polygon clipping function into painting clear areas on-screen.

The database ordinarily will use spatial binning to store objects.  This
improves parformance, but there are times when it is desired that the
objects written to output be sorted.  If the new variable

    KeepDbSorted (boolean)

is set, binning is not used, so that objects in the database will be
sorted by the upper-left corner of the bounding box, descending in Y
and ascending in X.  This order is maintained when cells are written out,
for each layer.  This variable must be set before the cell is opened.

There may be a performance penalty in setting this variable, though
experimentally it does not seem apparent.

The "preferences" script was updated to include the NoMergeBoxes and
KeepDbSorted variables.

New !set variable: CIFaddBBox (boolean)
When set, each object line (boxes, polygons, wires, labels) n CIF output
 will be followed
by a comment line giving the bounding box of the object, in the form
  "(BBox left,top width height);"
-----------------------------------

Worked on string management during script execution, to avoid core leaks
and to prevent propagating bad references.

Disabled support for the MIT_SHM shared memory extension in the imlib
hard copy driver, since it breaks functionality of the driver with stupid
Microsoft Windows pc "X-servers".

** Make sure this is done!

The hostname specified in the SPICE_HOST environment variable and the
SpiceHost !set variable can have a suffix ":portnum", i.e., a colon
followed by a port number.  The port number is the port used by the
wrspiced program on the specified server, and defaults to 3004 if not
given.

The /etc/services file (or services database) no longer needs to be
modified on client machines that access the SPICE server.  However, it
may be convenient to do so if the SPICE server uses a port other than
the default 3004.  Otherwise, in order to connect to the SPICE server,
clients have to specify a port number ("server_name:portnum") in the
SPICE_HOST variable or equivalent.  Also, en entry in the
/etc/services file may prevent someone else from using the same port
for another purpose.

The wrspiced program takes an additional argument: -t portnum

If portnum is given, that port will be used by the daemon.  Otherwise,
the port obtained from the services database for "spice/tcp" will be used,
and if not found the default 3004 will be used.

It is no longer necessary to modify the /etc/services file (or services
database) on s SPICE host, i.e., in order to run wrspiced.  The port
number can be supplied on the command line, or defaults to 3004.  However,
if an entry for "spice/tcp" exists, that port will become the default.
An entry in the /etc/services file may prevent someone else from using
the port for another purpose, however.  The port that is used must also
be used by the clients.

Note: In Xic, when WRspice connects, a message is printed in the terminal
window similar to

  Stream established to WRpice://chaucer, port 4573.

The "port" in this case is not supposed to be the wrspiced port discussed
above.

The !layer command makes use of a new invention called the "zoid field".
The computations using this new data structure can be *much* faster than
the previous method.  This is applied only to the !layer command, where
one is working with large numbers of objects, and not to DRC where this
is not likely the case for a single operation.

Since there is a lot of new code, there is an escape hatch if a bug is
detected:  !set NoField will cause the !layer command to use the previous
methods.

The status line was indicating mirror X when Mirror Y was set, and vice-versa.

If a label was given a negative width or height, it was shown outside of
its bounding box, unless "!set LabelTrueOrient" was given.  Xic should never
create labels with negative width or height, but such values are legal.

After editing multiple labels (selecting, then using the label command)
the selection highlighting was not shown in 256-color mode after the
edit.

The point-selection logic had a bug.  When one clicks on top of two or
more objects that are already selected, one object is deselected, and no new
objects are selected.  This makes it possible to resolve coincident
objects.  This was not happening.
------------------------

Fixed a bug that crashed the program after producing a Versatec plot.

In the hard copy pop-up, drivers that don't support landscape mode
would incorrectly gray the portrait button instead of the landscape
button.

Fixed a bug: If, in the technology file you define a macro (with Define)
with args, and if the name token appears in the file without args,
the program would crash.

For example, this would crash the program:
...
Define A(x) anything
...
Merge A
...

Now, "A" will be replaced with the text "anything" with the arguments,
if any, left unsubstituted (they have their forms from the definition).
This is not interpreted as an error, and there is now no program crash.

fixed memory problem in Debug/save
fixed memory problem in GdsEditor/text_btn_hdlr
fixed memory problem in ExtractEditor/text_btn_hdlr

The cancel button in the Node Map pop-up would cause a program crash.

There was a problem, peculiar to gtk, just recently noticed.  Gtk
produces special events for double and triple clicks, i.e., clicks that
occur within a certain short period.  These are in addition to the
regular button press events.  These events were causing problems in
the wire command.  If a quick double-click was used to terminate a
wire, an unwanted new wire would be started at the end of the existing
wire (i.e., effectively three clicks were received).  Worse, if
the double-click arrived when Xic was still refreshing the screen,
the program would crash.  These events are now dealt with properly.

When using the "Source" button in the Properties panel, or the
!source command, lines in the spice deck such as

j2 2 3 110

would crash the program.  The "j" keys a JFET device, but there is no
model given on the line.  The lack of a model name caused a crash.

Fixed a couple of bugs in the Show Paths command in the Extraact menu.
First, when the depth pop-up pops down, there was a spurrious event
that was equivalent to clicking on the coordinates 0, 0.  If there
is an object at that point, its path would be selected, but the highlighting
would not appear, unless the screen was redrawn.  The second bug was that
clicking on an object that had been split due to the Exclude keyword
would not find the correct object.  Worse, if such an object was under
coordinate 0, 0 the command would crash the program when the depth
pop-up went down.  Unfortunately, this was the case for the "extest.gds"
example file.  These have been corrected.

Fixed the Show Paths and Quick Paths logic so that the two commands
are mutually exclusive.

Fixed the pop-down logic for various commands the initiate pop-ups,
so that pressing the menu button would pop down the popup.  The pop-up
stayed up in some cases, including the Show Paths and Quick Paths
commands.

When using the Copy button in the Cells Listing, if the name wasn't changed
in the popup, the user is given the chance to apply the replace function
to selected subcells.  If there are no cells selected, the popup would
simply pop down, with not explanation, which is confusing.  Now, if there
are no selections, the pop-up stays up and gives a warning message.
-------------------------------

Merged a lot of code for the NT port, none of which should be active.

Fixed a bug in the Flatten Cells command:  if a hierarchy was scaled
when placed, and the top level was flattened, the subcells became un-scaled.

If using the Quick Paths command in the Extract Menu, and after pressing
Ctrl-C to stop the path identification and with the prompt line asking
for confirmation, one presses another command button, the program would
crash.

If dragging something with the pointer, such as during cell placement,
with multiple windows, changing the view in one of the windows would
leave spurrious copies of the dragged object in the other windows.

If dragging something with the pointer, such as during cell placement,
bringing up a subwindow (from the View Menu) would turn off the ghost
image "attached" to the pointer.

The first subcell in the selection queue (the one most recently selected)
is now named in the parameter line.  This is the cell that would be
used in the commands in the Cells Listing pop-up that accept a selected
subcell.

The Edit function of the Rule Editor in the DRC Menu was broken, by
always inserting "Region ???" into the rule.  Internally, the rule was
not being initialized properly.

The NoHoles and Connected DRC rules now use the zoid field methods so
are much faster.

Fixed a bug in the GDSII reader that could fault on an input layer
with layer number and datatype both zero.

The presence of a "bad" polygon or wire in the database could crash
the program in DRC.  The only known example that could actually be in
the database is a zero-width wire with a single point.  These are
now rejected.

Notes about zero-width wires:
Zero-width wires are accepted into the database if they contain more
than one point.  In physical mode, they probably should not be used,
and they will, of course, fail DRC tests.  They are allowed in the off
chance that the user uses them for annotation purposes.  Such lines
will be invisible, however, unless the layer pattern is outlined or
solid.  In electrical cells, zero-width wires are commonly used for
the connecting lines, and there is no question of their legality in
electrical cells.

----------------------------

Fixed  bug:  If a number of intersecting single-segment zero width
wires were selected, the program would hang when the wires were
deselected.

Fixed bug: the iplot button was not turning off the iplots.  This has
been true since the gtk version was released.

Fixed a major problem, the wire command was broken in the last release
by no longer allowing single-point zero-width wires.  The wire command
creates such an object for the first point.

Fixed a problem that would crash the program if one pressed the OK
button on the File Selection popup while the "OK to overwrite?"
prompt, from a previous OK button press, was active.

---------------------------

Fixed a bug:
Layer inversion with the !layer command could generate spurrious zero-height
polygons.  These could in turn generate floating point errors in subsequent
operations.

New !set variable: Shell (string)
This variable can be set to the name of a command interpreter program
which will be used by the '!' and !shellcmd inputs.  Previously, this
was hard-coded to "/bin/csh".  If the Shell variable is not set, the
SHELL environment is consulted, and if this is not found the default
is now "/bin/sh".  WRspice users can set the shell to "wrspice" for
quick access to the full user interface of that program.

------------------

Had to modify a lot of the networking code for compatibility with
Winsock2.  There should be no visible effect.

In the Logo script function, very large figures would cause an integer
overflow.  this has been fixed.

Changed polygon fill rule to winding rule.  This means that the intersection
part of self-intersecting polygons will be painted.

Fixed a numerical roundoff problem in the layer inversion command that would
cause pieces of the inverted figure to not appear.

The polygon splitting function has been rewritten.  The previous function
did not work correctly for self-intersecting polygons.  This affects the
!split and !layer commands, and others.

Note:
The polygon splitting function decomposes the polygon into horizontal
trapezoids, using the Y coordinate of the polygon vertices as the
vertical division axes.  This will produce a large number of long, thin
sections from polygons with rounded edges.  The !join command can be
used to "glue" the pieces back together.  At some point I may make the
joining be automatic for certain functions (such as in the !layer command).

The Copy command in the Cells Listing pop-up was not copying cells with
a symbolic view correctly.  This has been fixed.

The sizes of name labels of devices in copied cells weren't quite right
due to a scaling problem.  This has been fixed.

There was a problem locating named anchors in the html viewer.  These
should work correctly now.

New feature:  One can use named anchors on help keywords.  This means
that the '#' symbol is now holy, and should not be used in help keywords
unless the named anchor feature is being used.

The named anchors can appear in the !!HTML part of the help database
entries in the usual HTML way, e.g.

!!KEYWORD
somekeyword
...
!!HTML
    ...
    <a name="refname">some text</a>

Then, referencing forms like "!help somekeyword#refname" and
<a href="somekeyword#refname">blather</a> will bring up the "somekeyword"
topic, but with "some text" at the top of the help window, rather than
the start of the document.

The Xor command was not working quite right: no box was being created
when the area defined containd no xorable objects.  The command will
now generate a box in this case.  Also fixed a bug that would crash
the program if a bad polygon was xored.

Added a hierarchical window identification system.  Such a system is
built into the Xt widget set, but is missing from GTK.  In the old Xt
releases, the xic_run.log file could be executed, reproducing the entire
Xic session.  This feature was missing in the GTK releases until now.
There was a partial implementation in the GTK releases, which has been
removed.  Any scripts that use the BtnDown, BtnUp, KeyDown, KeyUp
script functions will have to be updated.  The format and widget names
will not be documented, but they can be determined by looking at the
xic_run.log file.  The new format and names should not change, and will
be used in the Windows release as well, so that scripts should be portable.

------------------------------------

CIF parsing of labels failed if commas were used as separators in the
coordinate list rather than spaces.  This is true for CIF output from
Cadence products.  The parser now accepts commas, spaces or both.

When parsing CIF, the layer name is now matched to the technology file
layers without case sensitivity.  Previously this was case sensitive.
Parsing Xic layer names remains case sensitive.

Fixed a bug which would crash the program during layer inversion under
certain conditions.

In the !layer command, the layer names can now be double-quoted.  Layer
names which are numeric must be double quoted in the layer expression.

New command: !noacute
This command will look at each currently selected polygon.  For vertices
that form an acute angle, vertices will be added so that no angle is
acute, i.e. the sharp point is clipped off.
This command is useful for preprocessing the database for
flash conversion or other functions where acute angles are undesirable.
It does not prevent DRC errors, and in fact may produce them.  It also
produces tiny (order of the layer's minimum dimension or one micron,
if the minimum width for the layer is not given) changes in the layout.
For example, consider a group of five or more polygons, each one of which
is a pie section, that together form a disk.  Running this command will
produce a hole in the center, where the angles are clipped.
Algorithm:
  For each selected polygon {
    For each vertex Vn {
      If the angle between Vn,Vn-1 and Vn,Vn+1 is < 90 degrees {
        Construct a circle around Vn where the radius is the minimum
        of the layer's min dimension or the distance to the nearest
        of Vn-1,Vn+1.
        Find the intersections of the circle with segments Vn,Vn-1 and
        Vn,Vn+1.
        Replace vertex Vn with these two points.
      }
    }
  }
 
--------------

In the Point() script function, buttons 2 and 3 now have their normal
pan/zoom capabilities, and only button 1 causes the Point function to return.
Previously, buttons 2 and 3 behaved like button 1.

FreeBSD 3.5

The NoDRC flags on objects, set with the Set Flags command in the DRC
menu, now survive conversion to GDSII and back.

Fixed a subtle numerical bug in the geometry clipping functions.

The Text Editor pop-up was not resizing the editor window correctly when
the window was resized by the user.  It should work properly now.
------------------

Xic and WRspice now check if the directory used for temporary files exists
and is writable.  If not, temporary files are created in the current
directory.

If the .xicstart file contained a Cwd() command, the .xic.lock file
would be created before the directory change, and would not be removed.
This has been fixed, files are created after the Cwd() is performed.

If the window background colors of physical and electrical windows were
different, Xic would somtimes paint the wrong background color when
repainting a window.

Fixed some bugs in HTML viewer:
 1) crashed on <pre> text containing links
 2) line spacing wrong for <pre> text containing images
 3) problem with layout of nested tables containing images

The HTML viewer will now progressively load gif images.
-------------------------

The Path/LibPath/HelpPath/ScriptPath defines in the supplied technology
files have been commented out.  Since these are set to the default UNIX
paths, the definitions are redundant, and under Windows the definitions
break things because the paths don't include the drive letter, and may not
even point to the actual installation location.  Users are still free
to customize these definitions if necessary.

New command line option: -B
   This option will cause Xic to start without graphics, run commands,
   and exit.  The option can appear in the command line in one of two
   forms:

      -Bscriptfile
      -B-command

   In the first form, the path to a file containing Xic script statements
   immediately follows "-B" with no space.  The statements in the script
   file will be executed after the first input file is loaded.  If no
   input file is given on the command line, the script will be executed
   after the default "noname" cell is loaded.

   In the second form, the "-B" is immediately followed by another '-' and
   one of the command keywords listed below.  After the first cell is loaded
   (or "noname" if no input file was named in the command line) the command
   will be executed.  The recognized commands are listed below.

   The .xicstart file is read and executed (if it exists) before the first
   cell is loaded, and all other initialization is performed in the normal
   sequence.  The commands below are simple shortcuts to common operations.
   If non-default options are required, then these can either be set in
   a .xicstart file, or the first form of the -B option should be used.

   tocif
   The cell hierarchy will be written to a CIF file, whose name
   is the name of the cell suffixed with ".cif".  This file is produced
   if there are no errors.  A conversion log file is also produced.

   togds
   The cell hierarchy will be written to a GDS file, whose name
   is the name of the cell suffixed with ".gds".  This file is produced
   if there are no errors.  A conversion log file is also produced.

   toxic
   The hierarchy will be written out as native symbol files.  This makes
   sense if a GDSII or CIF file is given on the command line.  A conversion
   log file is also produced.

   drc
   Design rule checking is performed over the entire cell, and results
   are written to a log file.

   What other batch commands would be useful?  Suggestions appreciated!

Windows only
   The Check in Background DRC command has been enabled.  It works by
   executing a batch-mode Xic process in the background.  However, the
   entire cell is always checked, any rectangle specification is ignored.

Windows only
   The '!' shell escape now works if the SHELL environment variable has
   been set by cygwin to a form like "//c/bin/sh".  This is converted to
   "c:/bin/sh" internally.

Windows only
   The mozy, xeditor, wrspiced, and xtlserv programs would fail to run
   in some circumstances (when started from a command line without the
   full path name from a disk other than where the executable resides).
   This has been fixed.

Windows only
   Made some changes in the graphics rendering functions to improve speed.
   This improves patterned box rendering speed by about a factor of three.
   Patterned lines are *much* faster, polygons are about 50% faster.

When UseDisplayCache is set (it is set by default) boxes and lines that
would render as one pixel are not thrown out as they used to be.  A separate
pixel list is now maintained for this case.  This increases drawing time
if there are many tiny objects, however the objects are now visible at
all magnifications.  Previously, it was possible that an array of boxes,
for example, would disappear as one zooms out.
   
--------------------------------------

Misc bug fixes in the HTML viewer, nested tables, background colors etc.
Opening a directory now shows a list of files.

environment variable MOZY_HELP_PATH for mozy, xeditor

The mozy and xeditor programs have been put into a source code distribution
which is now available in the "free software" repository.

converted xtlserv to C++

New Feature
It is now possible to extract individual cells and subcells from a GDSII
file, without having to load the whole file.  This capability has been
added to the Files Listing panel (in the File Menu) through the Content
button.  With the Content button active, clicking on the name of a GDSII
file in the list will bring up a panel containing a list of all of the cells
found in that file.  Alternatively, selecting a GDSII file name and then
pressing the Content button will have the same effect.  Only one GDSII
file can be listed at a time.  The Content button applies only to GDSII
files.

The cells listed in the GDSII listing can be selected.  With one of the
cells selected, pressing the Edit or Master buttons in the Files Listing
panel will cause that cell, and its subcells, to be extracted from the
GDSII file and added to the existing database in memory.  The extracted
cell will be placed in edit mode or used as a subcell to place, depending
on whether the Edit or Master button was pressed.  When saved, the extracted
cell will be saved to disk in a new file, and *not* back into the GDSII
file.

Thus, GDSII files can be used as libraries, and extracting bits from a
previous design should be less cumbersome.

Fixed a bug:  Saving a cell with the Save() script function would fail
if the cell name had no type extension.

The Save(), Edit(), ToXXX() and some other script functions now
implicitly call the Commit() function.  Previously, if in a script one
made some deletions and then edited a new cell with Edit() without
calling Commit(), the deletions would never be completed and the
previous cell's database would contain bad references.

Windows Only
The edited cells history list in the Edit menu now works.

Unix/Linux Only
The File Selection panel, which previously used the default GTK file
selector packaged with GTK, has been replaced with an entirely new
panel.  The new panel looks and acts like the panel used in the Windows
releases.
---------------------------------

Added a test for command stack overflow, which is unlikely but would
cause trouble if it happens.  The only way I know of to overflow the
stack is to click the Viewport menu button five times in succesion,
but this has been fixed, too.

Modified DRC so that in error level 1 (the default) testing stops
on an object when one error of each tested type is seen.  The speeds
testing of complex objects like spirals with too narrow pitch.

The maximum number of sides which can be entered using the Sides command
has been increased from 90 to 150.

Several changes were made to improve the mask rendering of round objects.

In the Round and Donut commands in the side menu, if the number of sides
(as set with the Sides button in the side menu) is even, then the figure is
now oriented so that the flat part of the figure is on the top, rather
than placing a vertex at the figure top as was done previously.  Thus,
an 8-sided round object now looks like a stop sign.  This is much easier
to render on a mask.  If the number of sides is odd
a vertex is placed at the top as before.  The Arc command is unchanged.

When an e-beam mask is written, the layout is rendered using a certain
pixel size (known as the "spot size") set by the e-beam equipment.
Typically, this size is 0.1 to 0.5 microns, with smaller sizes providing
higher resolution, but taking longer to write and therefor costing more.
There can be numerical problems in "rasterizing" round objects to the
e-beam grid.  Since the round object is rendered as a collection of
spot-pixels, the feature is not particularly round, but most importantly
the number of pixels used may not be well defined, and therefor the figure
area may not be as expected.  Xic now has features to precondition round
objects to avoid this problem: the SpotSize variable and the !tospot
command.

New Variable: SpotSize [integer]

This variable can be set (with the !set command) to the spot size in use,
specified in milli-microns.  Thus, if the spot size is 0.1 micron, one
would use
    !set SpotSize 100
If the SpotSize variable is unset or set to 0, the feature is
disabled.  The maximum value accepted is 1000.  With the SpotSize
variable set to a positive value, objects created with the Round and
Donut buttons will be created so that all vertices are placed at the
center of a spot, and a minimum number of vertices will be used.  The
Sides number is ignored.  This only applies to figures with all radii
50 spots or smaller, the regular algorithm is used otherwise.  The
object with this preconditioning applied should translate exactly to
the e-beam grid.  This conditioning, with SpotSize set nonzero,
applies only to objects subsequently created with the Round and Donut
commands, and not the Arc command or general polygons.

New Command: !tospot [spotsize]

The !tospot command will apply an algorithm (described below) to all
selected polygons.  This will apply to any polygon.  The spotsize, if
given, is the spot size to use in milli-microns.  Values of 1 - 1000
are accepted.  If not given, the value is taken from the SpotSize
variable.  If this is not set or set to zero, a value will be prompted
for.

The algorithm

The algorithm is intended to translate small objects with many vertices
to a representation which will pass unchanged through e-beam rasterization.
This will in general change the shape of an object, to something close
to that which will be rendered on the mask.

The algorithm uses the following logic:

start:

   Find the bounding box of the figure

   Snap the box edges to the nearest spot boundaries

   If the center of the bounding box has changed, apply the same offset
   to the figure to keep it centered in the new bounding box

   Shrink the box by 1/2 of the spot size

   Clip the figure to the new bounding box

   For each vertex
       Move the vertex to the center of the closest spot

   Remove duplicate vertices

   Save the modified figure in the database

end:

Following application of the algorithm, each vertex of the figure is
centered in an e-beam spot, so it is unlikely that round-off or other
error will cause the figure to change during rasterization.

Comments and Warnings

The algorithm is intended for unconnected, nonconducting objects such
as vias.  It should not in general be applied to wiring objects, since
it will generate small gaps between processed objects which were originally
touching, which will cause the extraction functions to think that the
objects are disconnected.

Although the object is shown on-screen as a polygon, The actual rendered
object will be composed of pixels.  The size of the object on-screen is
therefor one spot-size smaller than the rendered size (since half of the
spot for each edge is not shown).

Applying !tospot to circular objects created with a SpotSize is *not* the
 same as creating the
circular object with the Round or Donut buttons with SpotSize nonzero.
When using !tospot on round objects created without SpotSize set,
it is best to use an even number of sides for round objects.  In particular,
an 8-sided figure is probably the best choice for a "circular" via.



The Open menu button in the help pop-up called the file download dialog
rather than the correct one.

Fixed some problems with the help pop-up called from the Open Files or
Text Editor/Mail Client pop-ups.  There would be problems if button 2
was used to select a link if the originating window was dismissed.

Fixed a bug that would crash the program if help was called from the
Open Files pop-up, and the help files were not found.

-----------------------------------

Fixed bug:  opening a GDSII file with the Content button in the File
Listing pop-up would produce spurrious  overwrite confirmation queries.

(Windows only)
The File Selection pop-up now has most of the features of the GTK (Unix)
version:
  - The tree listing is a drag source for directories, and each entry
    is a drop receiver.

  - The lists are fully monitored and respond to changes immediately.

  - If no file is selected, the Delete and Rename operations apply
    tothe selected directory

The default operation is now "move", but files can be copied by pressing
the Ctrl key when dropping.  Directories, however, are always moved.

(Windows only)
Fixed some problems in forms handling in the HTML viewer and the
preferences script.

Fixed numerical problem in polygon handling that caused spurrious DRC errors, and
tiny gaps after a !split command.

The join command now preserves object boundaries.  Previously, objects could be
split between multiple joined polygons, potentially leading to acute angles in
the boundary.

The !pnum command, which prints polygon vertex numbers, no works on
selected polygons, rather than on all polygons in the current layer.
name changed to !polynum

new command: !polyfix
This removes duplicate and in-line redundant vertices from selected
polygons.

Changes to the !layer command:

The one of the keywords "split" and "join" can follow !layer in the
command invocation.  This determines how the new features on the 
layer are constructed.  With "split", the new features are composed of
individual trapezoids, which was the form produced by this command
in previous revisions.  With "join", the trapezoids are linked into a
minimal number of complex polygons.  This is the current default if
neither of these keywords is given.

The symtax of the !layer command is

   !layer [join|split] Layer [=] expression

The Layer() script command has a similar capability.  The first token
of the string passed the the function that specifies the expression can
be "join" or "split", i.e., "[join|split] layer [=] expression".  The
default is to join.

------------------------------

The logo command has been enhanced.

There is now an alternative font, which renders characters as
Manhattan polygons.  This may be preferred in some situations.  The
alternative font is enabled for the creation of new physical labels by
setting the variable LogoManhattan with the !set command, i.e.,

    !set LogoManhattan

When in this mode, the variables related to the regular rendering,
i.e., LogoEndStyle and LogoPathWidth, are ignored.

A second new feature is the ability to place an image from within the
logo command.  The image must be provided by a file in the XPM format. 
This is a simple ascii bitmap format, commonly used in conjunction
with the X-windows system on UNIX systems.  Other types of bitmap
files can be converted to XPM format with widely available free
software, such as the ImageMagick package.  Several XPM files are
supplied in the help directory for Xic (located by default in
/usr/local/lib/xictools/xic/help), which illustrate the format.

This feature is enabled in the logo command by giving the path of an
XPM file, which must have a ".xpm" suffix, as the text string.  This
will cause the image to be imported such that it can be scaled,
transformed, and placed, just like a normal label.  The background
color (the first color listed in the XPM file) is taken as
transparent.  All other layers found in the XPM file are mapped to the
current layer.  The image is rendered as a collection of Manhattan
polygons.

When the variable LogoToFile is set, the label or image is placed in a
subcell.  The naming of these cells has changed.  The new name
consists of the first 8 characters of the label, followed by an
encoding of the various parameters related to the label.  For a given
label, the file name is unique, which prevents recreating the same
label file in a subsequent session.

The prompting for the path width has been eliminated.  This is set by
the LogoPathWidth variable, as before, to a value from 1 to 5.  When
placing a physical label, pressing the Ctrl-Shift-Arrow keys will cycle
through the path width selections.  This only applies to the default
vector font, not the Manhattan font.

The ghost-rendering in the logo command now accurately shows the
geometry which will be produced.  Previously, only a 1-pixel path
was shown.

When physical text is created (with the logo command) interactive DRC is
now skipped.

Updated to glib-1.2.8/gtk+-1.2.8
-------------------------------------

Fixed some problems with resistor extraction.  Some time ago, the Depth
parameter for the resistor device blocks in the supplied technology files
was changed to 1, allowing resistors with subcell contacts to be extracted.
Unfortunately, this causes resistors that are entirely in subcells to be
extracted in the parent cell as well, which is not good since the resistor
is still in the subcell.  A check has been added to prevent extraction of
devices which are entirely contained in subcells when the Depth is 1 or
more.

Fixed another problem in resistor extraction involving large odd-shaped
resistors whose bounding box contains the end of another resistor.
This confused the extraction, leading to a "Pivot too small" error
from the extractor.  This has been fixed: the extracted contacts are
now ensured to be related to the same resistor body.

These two problems broke extraction example 1 in the help.

Set Root in the Open File popup now expands tildes.

ghost changes in replace mode.

Fixed a bug that would cause incomplete rendering of cells in an array
under some circumstances.
-----------------------------------------
Add state name to Quick Paths command, so status line indicates state
name when active.

Paths and Quick Paths:  Giving no input and pressing Apply in initial
pop-up would exit command but leave menu entry checked.  Menu entry is
now unchecked before exit.

When using double-buffering for redraws, Xic would dump the first visible
layer to screen to provide visual feedback while redrawing.  This seems to
look worse than the problem its trying to fix, most of the time.  Now,
Xic waits until all layers are written to the backing memory until the
memory is dumped to the screen.  The cursor still changes to indicate that
something is happening.

When a Ctrl-C (interrupt) is received during an operation and a confirm
quit dialog appears on the prompt line, button presses are now suppressed,
so new commands can't be started at this point. Previously, a new command
could be started, which would probably get Xic into a funny state or
crash the program.

The Internet browsing function in the help system was badly broken.
It should now work again.

Cookie support has been added to the help viewer for Internet use.  There
is a "No Cookies" button in the Options menu to disable sending and
receiving cookies.  The NoCookies keyword in the .mozyrc can be set to
1 to disable cookies by default, or 0 for the default (enabled) behavior.
With cookies, it is now possible to view the NY Times web site, for
example, which requires registration.  It is also possible to view
some commerce sites that require cookies.  There is no encryption,
so I wouldn't send sensitive info like credit card numbers though.

When moving a wire with non-unit magnification and NoWireWidthMag set,
the ghost drawing is now correct.  Previously, the unmagnified wire was
drawn.

There are two new buttons in the Transforms Menu.  The Clear button
will save the current settings internally and reset all settings to
the default (identity transform).  The Reset button will restore the
settings last saved with the Clear button.  These provide a quick way
to switch the transformation on and off.

Fixed some peculiarities in property merging when objects are merged
after a move or copy.  Also, fixed a problem with the wrong object being
selected in an Undo after a move/copy which results in a merge.

The Info command from the Attributes menu now prompts the user with the
option of dumping info on all selected objects to a file.  This only happens
if something is selected when the Info command is given.  If a 'y' is given
to the prompt, the user is asked for a file name, and is given the option
of viewing the file when the dump is complete.  If a 'n' is given at the
first prompt, the Info command works as before.

The !find command now shows the contact names in the device highlighting.

This was not documented: If the first field of the argument to the !find
command is empty or "all", all extractable devices are sought.  Thus,
"!find all" or "!find ." will show all extractable devices.

Added some bounds checking in the polygon rasterizer for hardcopies which
should prevent segmentation faults which were observed.

The vertex selection mode of the Stretch command from the Edit menu wasn't
working right, particularly for undo/redo.  This has been fixed.

When selecting vertices in the Stretch command from the Edit menu, selecting
a vertex for a second time will unselect it.  Previously, once a vertex
was selected, it could not be unselected.

The Stretch command, both the Edit menu and the basic "Ctrl" keypress
versions, now constrain the stretch angle to multiples of 45 degress if the
Constrain 45 button in the Attributes menu is active.  The Shift key,
which previously constrained the stretch to horizontal or vertical if
held during the stretch, works somewhat differently.  If the Constrain 45
button is acitve, pressing Shift will remove the constraint, and if this
button is inactive, pressing Shift will impose the 45 degree angle
constraint while held.

The Shift key works a little differently in the spin command. 
Previously this would constrain the rotation to multiples of 45
degrees if held, which would also be true if the Constrain 45 button
in the Attributes menu is active.  Now, if the Constrain 45 button is
acitve, pressing Shift will remove the constraint, and if this button
is inactive, pressing Shift will impose the 45 degree angle constraint
while held.

In Move/Copy, while the Ctrl key is held to impose a constraint, the angle
of translation is now constrained to multiples of 45 degrees.  Previously,
the angle was constrained to multiples of 90 degrees.

The Logic for the Shift/Control buttons when creating wires and polygons
has changed.  There are three modes: call them "no45" for no constraint,
"reg45" for constraint to 45 degrees with automatic generation of the
segment from the end of the 45 section to the actual point, and "simp45"
that does no automatic segment generation.  Then the logic is

Constrain 45 (in Attributes menu) not set:
            !Shift      Shift
    !Ctrl   no45        reg45
    Ctrl    simp45      ---

Constrain 45 set:
            !Shift      Shift
    !Ctrl   reg45       no45
    Ctrl    simp45      ---

Note that a button1 click with both Shift and Ctrl held simulates button4
which does nothing.  The new logic allows the Constrain 45 button to be
completely overridden.


/*
When using the vertex editor for polygons and wires, once a vertex has been
selected for moving by holding Shift and clicking on it, the Constrain 45
status can be changed by releasing Shift and pressing Shift again.  If
Constrain 45 is set (in the Attributes menu) this releases the constraint.
If Constrain 45 is not set, this establises the constraint.
*/

The vertex editing mode for polygons and wires has been enhanced.  It is
now possible to select and move more than one vertex from among the
selected polygons or wires.  The vertex translation may be constrained
to multiples of 45 degrees.  The operation is very similar to the
Stretch command in the Edit menu.

Vertex editing mode is enabled for polygons that were selected when the
Polygon command was entered, or for wires that were selected when the
Wire command was entered.  Each vertex of the object is marked with a small
highlighting box.  Clicking on a vertex will delete the vertex.  Clicking
on the edge of a polygon or along a wire, away from an existing vertex, will
create a new vertex.  To move vertices, one or more must be selected.  This
is accomplished by holding the Shift key, and clicking over a vertex, or
dragging over one or more vertices.  This operation can be repeated.
Selecting a vertex a second time will deselect it.  When a vertex is
selected, all vertex marks disappear, except for the selected vertices,
which are marked with a slightly larger highlighting box.  When there are
selected vertices, all vertices can be moved by clicking twice or
dragging.  The vertex nearest the button-down location will be translated
to the button up location, or the next button-down location if the pointer
didn't move.  While moving vertices, holding the Shift key will enable
or disable constraining the translation angle to multiples of 45 degrees.
If the Constrain 45 button in the Attributes menu is set, Shift will
disable the constraint, otherwise the constraint will be enabled.  The
Shift key must be up when the button-down occurs which starts the translation
operation, and can be pressed before the operation is completed to alter
the constraint.

Not documented?  If a box is selected in the Stretch command, and one or
more vertices of the box are selected by holding Shift, the vertices can
be moved as for a polygon, and the box is converted to a polygon.

If a wire end vertex is stretched to be coincident with the end vertex of
another wire on the same layer with the same width, the wires will be merged,
but only if the second wire is not selected.

In Break command, the '/' and '\' keys now switch the break line
orientation.  Previously, the Ctrl key did this.

Misc changes to messages to try and improve clarity.

Fixed the undo/redo logic for the Spin command, which wasn't quite right.

While in the Spin command in the prompt for the angle, pressing the Spin
button would crash the program.  This has been fixed.

The Undo/Redo feature is now disabled in TEXTINPUT mode, i.e., when
prompting for input.  This avoids some potential problems.

Previoulsy Ctrl-Shift-button1 did nothing but update the coordinate
readout, simulating a button4 press.  Now, Ctrl-Shift-Alt simulates
button4 presses, as some commands need both Ctrl and Shift, for
example using the basic pointer move operation in copy mode (Shift)
with translation angle constrained to multiples of 45 degrees (Ctrl).

Fixed a bug that would crash the program if one tried to write an
EDIF file.  This has been there a long time, attesting to the popularity
of EDIF.

Fixed a bug in the gds-text parser that would abort the parse if a blank
font name record was encountered.  These are now accepted.

The Save menu command is disabled while in TEXTINPUT mode.

All commands that use the prompt line text input services, and do not abort
the command in progress are now disabled when the service is in use.  There
are just a few of these: Grid, Save, SaveAs, etc.  Previously, these commands
would do nothing in this case, which could be confusing.

Rulers, Info, Bandwidth, and Allocation buttons moved from the Attributes Menu
to the View Menu.
Grid Moved from View Menu to Attributes Menu (also in subwindows).

There is no longer an emission of "bad html" warnings when the About
button is pressed.

The Add Layer and Remove Layer buttons in the Attributes menu have been
replaced with an Edit Layers button.  This button brings up a pop-up
which contains buttons for adding and removing layers from the layer table,
plus a drop-down menu of removed layers which can be added back.

When the pop-up first appears, the text area will be blank, or will contain
the name of the last removed layer.  The text area can be edited to provide
the name of a new layer to add, or the name of a removed layer can be
selected in the drop-down menu.  After pressing the Add Layer button and
clicking in the layer table, the new layer will be added, to the right
of the layer table entry clicked on.  With the Remove Layer button pressed,
layers clicked on will be removed from the layer table and added to the
list in the drop-down menu.

When layers are removed, the geometry on the layer is not affected, however
it will be invisible on-screen (after the first redraw) and to all commands,
and the geometry will not be included if the cell is updated to disk.

Small logic fixes to the Print popup.

If the Place popup is dismissed without a master defined, Place mode is
exited.

It wasn't documented anywhere, but only one of RESISTANCE, CAPACITANCE, and
TRANLINE could be specified per layer.  This is no longer true, as they
no longer interfere.

Enhanced the Extraction Parameters editor to automatically remove
redundant and inconsistant keywords that are already in the list,
such as previous instances of the keyword.

Enhanced the Conversion Parameter editor to be a little bit smarter
about redundant keywords.
----

Sometimes terminals, and other highlighting would be drawn prematurely
when redrawing the screen.  This has been fixed.

The interrupt (Ctrl-C press) handling has been vastly improved.  It is
now possible to restart drc after an interrupt.  This applies to DRC,
and extraction functions, and certain related functions like the !join
command.

There is a new button in the Extraction Parameters editor popup:
Device Blocks.  Pressing this button produces a drop-down list of Device
Blocks from the technology file, plus three additional buttons:
"New", "Delete", and "Undelete".

The Device blocks are listed in order of their definition, as the
block name followed by the prefix, if any.  Pressing "New" or any of
the Device Block name entries brings up a text editor loaded with the
indicated block, or empty for "New".  The text for the Device Block
can be entered into the editor.  Adding a block with the same name and
prefix (or lack of a prefix) as an existing block will overwrite the
existing block.  Saving with the Save button in the editor will update
and existing block or add a new block to the internal device list. 
The Save button in the editor *does not* save to disk.  The Update
command can be used to generate a new technology file which will
contain the new block, or the Save As button in the editor can be used
to save the block as a file.

Pressing the Delete button will cause the next selection from among the
Device Block names to be deleted.  The name will disappear from the menu,
and it is removed from consideration in extraction.  This can be undone with
the Undelete button.  The Undelete only remembers the last Device Block
deleted.

The block-style fail evaluation construct in user-defined design rules
was not being evaluated.  This should work again.

Some enhancements were made to the Design Rule Editor pop-up.  In the
Rules menu, the User Defined Rule entry now produces a submenu of
currently defined rule blocks.  Selecting one of these entries allows
instantiation of that rule on the current layer.

The Rule Block menu now contains Delete and Undelete entries.  To
delete a rule, press the Delete button, then select a rule from the
Rule Block menu.  That rule will be removed from the menu.  The rule
can be restored with the Undelete menu entry, but only one deletion is
remembered.  When a rule block is deleted, all instances of the rule
(in the layers) are inhibited, but not deleted.  They are cleared when
the backup copy of the deleted rule is deleted, which happens on the
next rule deletion or when the pop-up is dismissed.  If a rule is
undeleted, its instances are uninhibited.

When a rule is edited and saved, the instances of the old rule (of the
same name) are inhibited, but are not cleared.  The old rule instances
are left as an indication of where the previous rule was applied and
what arguments it takes.  To apply the new rule, the old instances
should be deleted by hand, and a new instance created.  If the
inhibited rules are unhibited from the menu, the old rule will be
used, not the new one.  If a technology file is created with the
Update command, the inhibited rules will be included, so that it is
important to delete these if the call to the new rule is different
from the call to the old.

For most pop-ups with a Dismiss button, this button now has the focus
when the pop-up appears.  This means that pressing Enter or the Space
bar will pop down the widget.  The exceptions are the pop-ups that take
text input, in which case the text input area has the focus, and Enter
is ignored.  After text is entered, however, pressing Enter is the same
as pressing the Apply button (or equivalent).
Previously, some random part of a pop-up would have the initial focus,
and pressing the keys would typically have no effect, except for text
input where the text box would have the focus, and Enter would Apply
whatever is in the text box.
Windows version: Enter always calls Apply.

Logic fix in Iplot command.

The Quick Paths command was not working with search depth 0.  This has
been corrected.

Fixed a problem with grouping in the presence of arrayed subcells which are
flattenable (i.e, contain no devices or subcells).
-----------------------------------------------------------

Fixed a problem with help: if a directory was included with !!INCLUDE and
it does not contain .hlp files, it would not be searched.  Thus, the
access to the manuals was broken.  This has been fixed.

Fixed a problem with the help windows: sometimes the scrolling would get
fouled up and a short page would be shown nearly off screen, but the scroll
bar would be gone.

Fixed a problem with the httpget library that prevented parsing urls like
ftp://myname:mypass@hostname/filename

Fixed bug:  The list popup would crash the program rather than appear.  This
is used in the Contents function of the Files Listing, and appears if a GDSII
file is read with multiple top-level symbols defined.

The Point() script function has some funny interaction with other commands,
and would suppress the snap point display after terminating with Esc.

The Point() script function behaves slightly differently.  Previously,
pressing Esc while the operation was active would terminate the script.
Now, the function will return with a value 0.  The value 1 is returned
if the user clicks in a drawing window, as before.

The ShowGhost, Box, Polygon, Arc, Wire, Label, and Logo commands now
support orientation using the current transform.  Previoulsy, objects were
displayed or created using absolute coordinates only, and the current
transform settings were ignored.

There is a new function, UseTransform(), which enables or disables use of
the current transform.  The syntax is

    UseTransform(on_or_off, x, y)

All parameters are numbers.  If on_or_off is nonzero, the current transform
is applied after translating by x, y.  If on_or_off is 0, the current transform
(and the remaining arguments) is ignored.

If UseTransform(1, x, y) has been given, ShowGhost will apply the current
transform to the list of objects to display, using the pointer location
as the translation rather than x, y.  The other functions listed above will
create the object after applying the current transform, using x, y.

In some scripts, it will be necessary to call UseTransform(1,...) twice,
once to enable ShowGhost(), and again after the location for the new object
is obtained.  In particular, if Point() is used to obtain the coordinate,
UseTransform() should be called before Point() (so the ghost drawing will
be accurate) and again with the coordinates returned from Point() before
the new object is created.

The Box() command will actually create a polygon if the current transform
is being used and the rotation angle is 45 degrees or one of the other
non-Mahattan angles.  The Polygon() command will actually create a box
if the rotated figure can be so represented.

Below is an example script that will place boxes on the current layer
where the user clicks.  Note that the size and rotation angle of the
box can be changed while in the script through the Transform menu.


ShowPrompt("Click to place boxes"
PushGhostBox(0, 0, 1, 1)
UseTransform(1, 0, 0)
while (1)
    ShowGhost(8)
    a[2]
    if !Point(a)
        ShowPrompt("")
        Exit()
    end
    ShowGhost(0)
    Box(0, 0, 1, 1)
    Commit()
end
-----------------------------------------------

Audited all commands for the effects of dragging out of the drawing windows
while in the command.  This would get some commands in a funny state.

There is a new command in the View Menu: Cross Section.
This command displays a cross sectional (side) view of the layers under
an arbitrary line.  After pressing the command button, the user is asked
to define a line, which can be done by clicking twice or dragging.
If the line covers any geometry, a subwindow showing the cross sectional
view will appear.  The process can be repeated.  Pressing the Esc key
will exit the command.

All geometry under the line will be shown, without regard to cell hierarchy.

If a layer has the DarkField attribute given, the cross section will show
the inverse of the layer as it appears ordinarily.  Thus a via, which
might appear as a colored square in the main window, will appear as a
via in cross section if the via layer is given the DarkField attribute.
This can be done with the Extraction Parameter editor from the Edit
Extraction command in the Extract Menu, or by adding the DarkField
keyword to the appropriate layer block in the technology file.


There is a new keyword that can be specified in layer blocks in the technology
file, or can be given in the Extraction Parameter Editor from the
Extract Menu.  The keyword, DarkField, indicates that the layer polarity
on the chip is the reverse of that shown on-screen.  This is usually the
case for via layers, for example, which are rendered as small squares to
indicate the contact location, which is actually a hole in an insulating
layer.  At present, the only command that uses this keyword is the Cross
Section command in the View Menu.  Layers with the keyword applied will be
shown as on chip in the cross sectional view.

The keyword has a secondary effect if used in conjunction with the
GroundPlane (or the equivalent GroundPlaneDark) keyword.  The combination
is equivalent to GroundPlaneClear.  Thus, GroundPlaneClear implies
DarkField.

The Imlib print driver has been revised from the original free software
form and ported to Windows.  Thus, the Imlib driver is now available in
the Windows versions of Xic and WRspice.  The revised package, called
IMSAVE, contains only the parts of Imlib specific to supporting screen
dumps, and is available under LGPL from the web/ftp sites.

There is a new command button in the View menu of subwindows:
Dump To File.  When pressed, a file name will be solicited, and the
contents of the subwindow will be dumped to the file.  This uses the
"Imlib" (IMSAVE) driver, and like the version in the Print pop-up
the filename extension determines the file type: jpg, tiff, png, etc.
The main reason for this command is to provide printable output of the
cross section views.  The dumped bitmap will be the same size as the
window.

The "native" support in Imlib/IMSAVE extends to jpeg, tiff, postscript,
png, and ppm.  If you want gif image support, plus many others, install
the "netpbm" free software package.  Imlib/IMSAVE will use this for
conversions if available.  If netpbm is installed, if a file extension
is unrecognized or not given, the output will be in pnm ("portable
anymap") format.

Some documentation

What happens when a cell name clashes with a library device name?

Until one switches into electrical mode, or reads a file with electrical
data, the devices are not defined.  However, any attempt to read a native
file with the same name as a device will find the device, which is an
empty cell in physical mode.

You can edit library devices, if the device name is entered in the edit
command.  Even if there is a file of the same name, and you give a
path, you still always get the library device.  I don't think that there
is any way to open a native-format cell file if the name clashes with
a library device.

If you try to open a "master" in the place command that clashes with a
library device, the open fails.  It should not be possible to place
a cell with a device name in physical mode.

If you try to rename a cell in the Cells pop-up to a name that clashes,
this works if the library device has not been previously referenced.
When you go to electrical mode, that device is foo-bar.
>> No longer possible to rename a cell to a library device.

If you modify a subcell call in a native file with a text editor to a
device name, and rename a native file to the same device name, reading in
the file will not load the device-named file.  The hierarchy in memory
will include the physical part of the named device (empty).

When reading cif/gds/edif, the cells will override devices if the devices
have not been referenced.  If the devices exist, the overwrite prompt
is issued.  Answering 'y' will overwrite the device, unless the new cell
is empty.  If the new cell is purely physical, the device gets the physical
data but keeps the original electrical data.
>>> GDS read will now change the cell name if a clash is detected.
>>> CIF read will now change the cell name if a clash is detected.
Since EDIF really isn't portable, I assume EDIF input comes from Xic,
so there is no checking.

Fixed a problem in the parser that prevented use of local variables in
user-defined script functions.

Fixed a problem that would prevent pasting of selected text from the
help window if the text was in <pre>...</pre> tags.

Fixed a problem with directory listings in the help viewer: subdirectories
were not included in the listings, unless they happened tp be symbolic links.
Also, all entries were put on a single line.

---
Windows 2000 only:  Clicking button 3 in the layer menu (for blinking) would
freeze the system, requiring a hard reboot.

To preview image file: !help xxx.jpg


(Windows only)
The printing interface should almost work now.  Microsoft makes something
as simple as printing into a complex mess.  The programs whould now
obtain a list of available printers from the operating system, one of
which is printed in the "Print Command" entry area.  This area is now
not editable, except in "To File" mode.  Instead, a spin-button to the
right cycles through the available printers.

All formatting is done in the program's printer drivers, and the result
is sent to the printer as "raw" data.  This means that the selected
printer *must* understand the format.  In practice, this means that the
printer selected must be a PostScript printer, and one of the PostScript
formats used, or the printer can be an HP Laserjet, and the PCL format
used, etc.



(Windows only)
A new print driver has been added: Windows Native.  This bypasses the
drivers in Xic/WRspice and uses the driver supplied by Windows.  Thus,
any graphics printer supported by Windows should work.

Fixed bug:  In help mode, if a command was started by holding Shift
that requires point operations, the logic would foul up since button
release events were not delivered.
--------------------------------------------------

BAD HORRIBLE BUG
WindowDesc in hardcopy.cc/xichcgo going out of scope frees attributes
of main window.

It was not possible to set the height to zero in the Print pop-up, so that
the auto-height feature was inaccessible.  This is a bug that has been
around since the switch to GTK.

The labels for the image height and width in the Print pop-up are now
buttons.  When pressed, the entry area for height/width is grayed, and the
auto-height or auto-width feature is activated.  Only one of these modes
can be active.  In auto-height, the image height is determined by the
image width.  Similarly, in auto-width, the width is determined by the
given height and the aspect ratio of the image.

The plot(5) hard copy driver has been removed.  The plot(5) format is
completely obsolete.  I can't even find a display device to test it.
This goes back to the days of Tektronix graphics terminals and VAXes.
But, time to move on...  By the way, "plot" is the name of the package,
and (5) means that is is supposedly described in section 5 of the UNIX
manual.  However, it is not included in any modern UNIX that I know of.

---
all print drivers now handle arcs.

The help system recognizes four new keywords in database files:
  !!IFDEF word
  !!IFNDEF word
  !!ELSE
  !!ENDIF

These keywords can appear in the !!TEXT or !!HTML sections of a help topic,
and may enclose any following !!SEEALSO or !!SUBTOPICS lines.  The keywords
provide context-specific text selection.

The "word" is defined within the application.  Presently the following
words are defined:
  in Xic:                       "Xic"
  in WRspice                    "WRspice"
  in either, under Windows:     "Windows"

For !!IFDEF, if word is defined, the text up to the next !!ELSE or !!ENDIF
will be included, and any text following an !!ELSE up to !!ENDIF is discarded.
If word is not defined, the text up to the next !!ELSE or !!ENDIF
is discarded, and any text following an !!ELSE is included.  The !!IFNDEF
keyword produces the reverse logic.  The constructs can be nested.  A word
that is not recognized or absent is "not defined".  Every !!IFDEF or
!!IFNDEF should have a corresponding !!ENDIF.  The !!ELSE is optional, and
can only follow !!IFDEF or !!IFNDEF.

Example:

!!HTML
    Here is some text.
!!IFDEF Xic
    You are reading this in Xic.
!!ELSE
!!IFDEF WRspice
    You are reading this in WRspice.
!!ELSE
    You are not reading this in Xic or WRspice.
!!ENDIF
!!ENDIF
-------------------------------------------------------------------

If a subwindow was sent a destroy message, the program would crash.  This
happens when the window manager is used to retire the window, rather than
the "Quit" button in the menu.

New layer block keywords (d is a floating-point number).  These apply to
physical layers only.  They are used by a new R/L/C extraction system
under development.


  Thickness d                    specifies the layer physical thickness,
                                 in microns.  This can apply to any layer.

  Only one of the following two  should be used.  These apply to layers with
  the Conductor attribute.
  Rho d                          specifies the layer resistivity in MKS
                                 units (ohm/m^3).

  Sigma d                        specifies the layer conductivity in MKS
                                 units (m^3/ohm).  This is converted to
                                 Rho internally.

  EpsRel d                       specifies the relative dielectric
                                 constant.  Applies to the VIA layers,
                                 and to a passivation layer.  A passivation
                                 layer is a non-CONDUCTOR layer above all of
                                 the VIA layers with a nonzero Thickness
                                 parameter.

  Lambda d                       specifies the superconducting penetration
                                 depth.  Applies to layers with the Conductor
                                 attribute.

New technology file "attribute" keyword
  SubstrateEps                   The relative dielectric constant
                                 assumed for the substrate, default is 11.9.


Windows Only
The states of the buttons in the Attributes menu of subwindows were not
indicating correctly (or indicating at all).

Windows 2000 Only
The small icons used for pop-up windows were randomly mixed up, since
for some reason Windows 2000 sequences these differently.  The icons are
now explicitly saved as resources so should now be correct.

Windows (2000?) Only
When any of the XicTools programs writes a text file, the format
should be the default format of the system, i.e.  DOS format. 
However, on one Windows 2000 installation, the text editor seems to be
creating UNIX format files.  Could it be that Microsoft has finally
abandoned this anachronism in Windows 2000?  If so, fine, but I can't
find any documentation that says so.

The format does not matter to the XicTools programs, but UNIX format
files will not display correctly in some Windows programs such as
Notepad.  Even Microsoft is trying to get away from this ghastly
mistake propagated from the earliest DOS version, where every line is
terminated with two control characters rather than one.  Most newer
Microsoft objects and programs work with either format.

The Text Editor pop-up now has a "Write DOS" switch in the Edit menu.
When set, files are written in DOS format, and when not set files are
written in the modern (UNIX) format.

Windows Only
Added accelerators to all menu items that have accelerators in the
Unix/Linux version.

Windows Only
The Script Debugger basically did not work in previous releases.  It
should work correctly now.
---------------------------------------------------------

If the DRC Rule Editor pop-up was dismissed while waiting for input for
certain rules, the program would crash.  This has been fixed.
**** update mswdimen.cc

In html text, if an anchor reference ends with ".scr", it is taken to be
a script, and is executed when the user clocks on the anchor in a help
window.
    Example:
      in help text:
        Click <a href="myscript.scr">here</a> to execute myscript.

      The script "myscript.scr" must exist somewhere in the script path,
      or be defined in the technology file.

Added menu accelerators:
  Alt-C   DRC/Clear Errirs    ***** alt-r
  Alt-I   DRC/Set Interactive
**Alt-Q   DRC/Query Errors
  Alt-L   Edit/Place
  Alt-P   Edit/Properties


The keyprese buffer now remembers up to 16 characters, though only the
last five are shown.  This allows a key sequence to activate menu items
with five characters or more matched by another menu item, such as the
via_mf{p,m,a} commands in the User Menu.

Consider the two entries in the User menu: spiral and spiralform.  In order
to run spiral by typing the command prefix, type "spiral" then Enter.  This
works for any menu commands where one entrire command is a prefix of
another (I can't find any other examples).

The direction of panning for the left/right and up/down arrow keys has
been switched to work the same as Cadence/Mentor/Avanti.  Sorry Masoud.

There are new provisions for changing the internal color map used for
non-layer colors.  These colors have the following names and defaults:
    "HighlightingColor",       "white",        
    "PromptTextColor",         "maroon",       
    "PromptEditTextColor",     "black",        
    "PromptHighlightColor",    "red",          
    "PromptCursorColor",       "blue",         
    "PromptBackgroundColor",   "AntiqueWhite", 
    "InstanceBBColor",         "turquoise",    
    "InstanceNameColor",       "pink",         
    "InstanceSizeColor",       "salmon",       
    "CoarseGridColor",         "skyblue",      
    "FineGridColor",           "royalblue",    
    "SelectColor1",            "white",        
    "SelectColor2",            "pink",         
    "MarkerColor",             "yellow",       
    "ButtonColor1",            "seashell3",    
    "ButtonColor2",            "thistle3",     
    "Color2",                  "red",          
    "Color3",                  "lime green",   
    "Color4",                  "blue",         
    "Color5",                  "orange",       
    "Color6",                  "magenta",      
    "Color7",                  "turquoise",    
    "Color8",                  "sienna",       
    "Color9",                  "grey",         
    "Color10",                 "hot pink",     
    "Color11",                 "slate blue",   
    "Color12",                 "spring green", 
    "Color13",                 "cadet blue",   
    "Color14",                 "pink",         
    "Color15",                 "indian red",   
    "Color16",                 "chartreuse",   
    "Color17",                 "khaki",        
    "Color18",                 "dark salmon",  
    "Color19"                  "rosy brown",   

Under Unix, these can now be set in an X resource file.  This is a file
named "Xic" (note the first letter is capitalized) located in the user's
home directory.  The file contains lines in the following form:

xic.HighlightingColor: green
xic.MarkerColor: blue
...

or generally

xic.resourcename: colorstring

The resourcename is a name from the list above.
The colorstring can be the name of a color ("red"), or an RGB triple in the
form "#RRRRGGGGBBBB" or "rgb:RRRR/GGGG/BBBB" where R G B are single
hexidecimal digits.

The colors can also be set from within Xic with a new command:

    !setcolor resourcename colorstring

The resourcename and colorstring have the same form as in the resource file.

When Xic starts, the colors are set to default values.  Then, any colors
found in a resource file are updated.  Then, some of the colors may be
modified in the technology file.  Finally, the colors might be changed
in a .xicstart file.

In the Create Cell command in the Edit Menu. the user is now given the
option to replace the selected objects with an instance of the new cell.

New functionality in the Ruler command in the View menu.
1)  The ghost-drawn vector which appears when creating a ruler now indicates
the side which will have the gradations.
2)  The side with the gradations can be toggled by pressing the '/' or '\'
keys.
3)  If Shift is pressed during completion of a ruler, the endpoint will be
the start point of a new ruler, and the calibration in the new ruler will
be an entension of that in the current ruler.
Thus rulers can be "chained" around an object
to measure the periphery.
4) The Redo function now works, i.e., a ruler that was deleted with Undo
can be undeleted.
5) If Constrain 45 in the Attributes Menu is active, the angle is constrined
to multiples of 45 degrees.  If not set, the angle is unconstrained, but
snaps to multiples of 45 degrees when the angle is close.  In either case,
pressing the Ctrl key removes the constraint.
6) The endpoints initially do not snap to grid points.  The period ('.')
key toggles snapping to grid points while in the Ruler command.

New functionality in the Cross Section command in the View Menu
1) If Constrain 45 in the Attributes Menu is active, the angle is constrined
to multiples of 45 degrees.  If not set, the angle is unconstrained, but
snaps to multiples of 45 degrees when the angle is close.  In either case,
pressing the Ctrl key removes the constraint.
2) The endpoints initially do not snap to grid points.  The period ('.')
key toggles snapping to grid of the initial (anchor) point while in the
Cross Section command.
3) The "!set" variable XSectThickness can be used to set the thickness of
the layers in the cross section.  This is an integer 100 - 100000 which
represents the thickness in internal units (1000 units/micron).  If not
set, a value of 500 (0.5 microns) is used.
*** Preferences script
*** TODO - use real thickness from the tech file
*** Gvector in xicfuncs.cc

DrcNoPopup techfile keyword

DRCstate(intr_state, popup_state)  returns interactiveDRC

RemoveLayer works for passed mode only

The Color popup would correctlly remember its previous state, changing
the current layer, background, grid colors, but the buttons would always
indicate "current layer".

Fix a bug involving non-black backgrounds, hard-copy mode, and the
Set Color popup.  Sometimes, the wrong background color was used during
a redraw.

Added a new internal data structure and related functions to handle all
non-layer colors.  Previously, these were handled by various functions
scattered through Xic.  The changes visible to the user are

1) All attributes colors can new be set from a resource file (unix only),
and the technology file.  Within Xic, all attribute colors can be changed
with the !setcolor command, and the grid colors can be changed with the
SetColor pop-up as before.

2) Any color can be defined by a "colorspec" string, which is
   - the name of a color found in the X rgb.txt file (this works for
     Windows, too).
   - Three space-separated numbers, each 0-255, representing the red,
     green, and blue intensity.  E.g., "196 240 235".
   - (Unix/Linux only) other forms recognized by the XParseColor()
     library function, including "#RRRRGGGGBBBB" and
     "rgb:RRRR/GGGG/BBBB.

New ShowGhost() type: 9, same as 5 but does not snap to grid.

Point() return conditioned to match visual when Ghost is on.

5, 9 sensitive to Constrain 45.

No longer exit(1) for X recoverable X errors.

If program exits through the exit() system call from some system library
used by Xic, Xic now cleans up after itself as it does on other errors:
removes .xic.lock file and temporary files, saves modified cells with a
".panic" extension.

In 256-color mode under Unix/Linux, trying to change the color of a
shared pixel, which happens when the colormap runs out of private colors,
no longer produces a fatal error.  The color is changed to the nearest
available color.  The screen is not automatically updated when this happens.

Since the color wheel, etc. in the Set Color popup are psychedelic
gibberish in 256-color mode, these are now hidden when in 256-color
mode (Unix only).  This is less colorful, leaving a big grey area,
but at least it doesn't present something that is confusing and
wrong.  It is interesting to wonder why some expensive Sun workstations have
inferior graphics to a $50 pc card.

----------------------------------------------------------------
variables:  PhysPropTextSize
    TermTextSize
    TermMarkSize
** todo: set in techfile

There is now a set of eight registers that can hold grid parameters.  Thus,
grids can be saved and quickly restored.

Whenever the grid is changed, for example with the Set Grid command in the
Attributes Menu, the previous grid is saved in register 0.  The following
commands save and restore grids:

!sg [regnum]

This will save the grid of the drawing window containing the pointer (or the
main drawing window if the pointer is not in a drawing window) into register
regnum.  The regnum must be an integer 0-7, and is taken as 0 if not given.

!rg [regnum]
This will set the grid of the drawing window containing the pointer (or the
main drawing window if the pointer is not in a drawing window) to the grid
stored in regnum.  The regnum, if given, is an integer 0-7.  If not given,
0 is understood.  A register that has not been saved will return a default
grid style (1 micron, no snapping, solid lines).  In addition, the grid
storage register 0 takes the value of the previous grid.

**todo:  techfile, GridReg n resol snap linestyle

The Grid command in the Attributes Menu of the main window and subwindows
now brings up a pop-up for setting grid parameters.

The Ctrl-G keypress calls a shortened version of the old command line
interface, since this is quicker for simple operations, such as toggling
the grid on and off (just hit Enter).

The input keypress handling has been rewritten and consolidated.
It is now possible to change some of the keyboard mapping.  When the
Key Map command is used to change the mapping of "problem" keys (enter 'y'
to the first prompt) the mapping file generated now contains complete
key and action mapping tables.  This can be modified by the user with a
text editor.  ADD MORE

It is now possible to create keypress macros for just about any key
combination.  The non-mappable keys are Escape, Enter, and the modifier
keys (Shift/Ctrl/Alt).  If a key combination triggers a macro, it will not be
available for any previous built-in function, so keys should be chosen
carefully.

If the prompt editor is active (The red INPUT label is visible) macro
expansion is suppressed.

The macro expansion can also be suppressed for the next key combination
by pressing the macro suppression character first.  The macro suppression
character is the bachquote (`).  The macro suppression character is
eliminated from the keypress buffer after the next key is typed.  For
example, suppose 'd' is mapped to something, but you want to enter a literal
'd' to trigger the Edit command ("edi").  One would type e ` d i, after which
the keypress buffer would contain "edi" triggering the Edit command.

Windows Only
One can now enter a keypress/release that selects a menu item in macros.
Previously, this only worked for pushbuttons, such as in the side menu.

In Windows, menu accelerators have precedence over any macro definition,
i.e., one can't define a macro for these keys.  Further, the accelerators
can't be changed by the user.  Also, the Alt key can't be used, since
Windows processes this key for menus.

In Unix/Linux, the keys assigned as menu accelerators can have a macro
assigned, which will take precedence.  The accelerator can be changed
as well.

New '!' command: !checkgrid [c][o]

This will mark vertices of objects and cells that are off grid.  The
reference grid is the grid currently applied in the main drawing
window.  If there are selected objects, these (only) will be tested. 
Objects or subcells that have an off-grid vertex will remain selected,
other objects will be deselected.  If no testable objects are
selected, all objects will be tested, or all objects on the current
layer if in layer-specific mode.  In either case, cells will be
checked if the 'c' modifier is given.  Objects or cells that have an
off-grid vertex will be selected, and all off-grid vertices will be marked.

Giving the !checkgrid command with the 'o' modifier (or 'n' or '0' (zero))
will erase the marks.

New '!' command: !checkover [filename]

This command creates a report of subcell overlap in the current physical
cell.  The report is written to the given filename, or to a temporary file
if no name is given.  The user is given the option to view the report,
if a filename is given, otherwise the file viewer pops up automatically
for the temporary file, and the temporary file is deleted.

The Lambda keyword in the technology file was not being read correctly.

Under FreeBSD, the asynchronous interface to Spice was broken.

New techfile keywords: GridRegN resol snap linestyle
N = 0 - 7, resol is grid spacing in microns, snap is the snapping number,
and linestyle is a style code.  The GridReg0 is never written out when
saving the tech file.

Various bugs fixed in the Fasthenry/FastCap interface and partition
editor.
-----------------------------------------------------------------------

The Set Color pop-up now has a "Colors" button.  This brings up a listing
of color names and rgb values.  Clicking on a list entry will load that
color into the color selector.  The names are obtained from the system
rgb.txt file under Unix/Linux, or from an internal list in Windows.

The undo/redo runctions were reversed

Windows only, the selecting from the list of cells presented from the
 Contents button in the cells listing popup would not work correctly
unless the list was scrolled all the way to the left.
------------------------------------------------------------------------

The "layer" button now produces a pop-up panel providing a number of
mode switches which control object selection.

Pointer Mode group
 Normal        Previous dual select/modify behavior
 Select        Allows selections only
 Modify        Allows move/copy/stretch only

Area Mode group
 Normal        Previous area selection behavior
 Enclosed      Chosen items must exist completely within the selection box
 All           Any ovjedt that touches the selection box is chosen

Selections group
 Normal        Previous behavior
 Toggle        Reverse the selected/deelected status of all chosen objects
 Add           Select all unselected objects chosen
 Remove        Deselect ann selected objects chosen

Layer Specific button - establishes layer-specific mode

While selecting, and the Selections group is "Normal", when the selection
 is established, the modifier keys are now recognized:
   Shift           Select all unselected objects chosen
   Ctrl            Deselect all selected objects chosen
   Shift-Ctrl      Reverse the selected/deselected status of all objects chosen

I.e., the Toggle/Add/Remove modes can be established transiently with the
modifier keys.

Xic now looks for a xic_keymap.hostname file in the user's home directory.
The search order is
   current directory
   home directory
   Library path

The xic_keymap.hostname file now contains a <Buttons> field which maps the
functions of the mouse buttons.

There is a new feature: "script labels".  This allows the user to create
a label that when clicked on will execute a script.

Script labels are created with the labal button in the side menu, just like
any other label.  The form of a script label is

    !!script [name=word] [path=apath] [text=sometext] [script text...]

The leading token in the label must be "!!script" to indicate that the
label text is executable.  This is followed bu zero or more keyword/value
pairs as shown, followed by the script text that will be executed.  The
keywords have the following interpretations.  The keywords and values
must be separated by '=' with no space.  The value is a single token,
which should be double-quoted if it contains white space.  These are all
optional.

name=some_name
  The script label is rendered on-screen as "some_word" surrounded by a
  box.  If no name is given, the word "script" is shown.

path=some_path
  If this is given, then the script to be executed is given by "some_path"
  and any executable statements in the label are ignored.  The "some_path"
  can be an absolute path to a script file, or can be the name of a script
  file expected to be found in the script search path.

Any remaining text is executed as script commands, if path is not given.
For short scripts, semicolons can be used as command terminators on a songle
line.  Otherwise, a text editor can be invoked on the label string by...

If a script label is selected, it will not execute when clicked on (it will
normally be deselected).  To select a script label, hold Shift while
clicking on the label, or drag over the label (area select).

Don't use this for labels associated with devices in electrical mode,
since it doesn't do anything useful.

Example:
   Suppose that you have a part of a layout that you often zoom in to.
   After zooming in, note the position and estimate the width of the
   drawing window.  You can then create a label such as
     !!script name=zoom Window(x, y, width)
   and place it somewhere convenient.  Replace x, y, width above with
   actual values (in microns).  Then, clicking on the label will
   always zoom to this area.
   

The "long text" feature has been enabled for physical mode labels.

On the right side of the layer table is a new indicator which indicates when
layer-specific mode is in effect.  Clicking on this indicator with button 1
will toggle layer-specific mode.

Fixed bug: If something was moved/stretched/copied with the mouse, then the
operation was undone, then Esc pressed, the interface would get into a funny
state.

The stretch operation works differently now on Manhattan polygons.  Previously,
only vertices could be streched, most likely producing a non-Manhattan polygon
which is not generally what is wanted.  Now, the stretch operation on Manhattan
polygons is similar to the operation as applied to boxes, i.e., the corner
and adjacent vertices are changed so as to keep the polygon Manhattan.
A single vertex can still be stretched on the previous way either by selecting
the vertex in the Edit Menu Stretch command, or by using the vertex editor
in the polyg command.

In Flags dump for subcells in info window, 'm' is now '0'.

There is a new mechanism for changing and obtaining object geometry, through
properties.  There are a number a reserved property numbers which can be
applied to physical objects (this feature applies in physical mode only).
These "properties" are not saved, setting the property will instead change
a geometric property of the object.  Reading the property will provide the
value of the geometric parameter.  These are the reserved numbers:

// XprpType               All objects, returns object type, not settable
// XprpBB                 All objects, returns bounding box component,
//                         settable for objects, not subcells.  When set,
//                         will stretch to object to new value
// XprpLayer              All objects, returns layer name, settable for
//                         objects, not subcells.  Moves object to new layer
// XprpFlags              All objects, returns flags set, settable
// XprpState              All objects, returns state, setable
// XprpGroup              All objects, return group number, settable
// XprpCoords             Polys and wires, return coordinate list, settable
// XprpWwidth             Wires, returns wire width, settable
// XprpWstyle             Wires, returns wire end style, settable
// XprpText               Labels, returns label text, settable
// XprpXform              Labels, returns transform code, settable
// XprpArray              Instances, returns array params, settable
// XprpTransf             Instances, returns transform, settable
// XprpMagn               Instances, returns magnification, settable

The settable reserved properties for an object are listed in the
Properties Editor, along with the "real" properties.  These can be changed
in the same way, which will produce physical changed to the object.

The text editing function for physical properties in the Properties
Editor now has a "long text" capability, to accommodate long and
multi-line strings.
Pressing the L button will bring up a text editor for editing the
text.  The change will be effected when "Save" is pressed in the text
editor.

When Xic asks for input on the prompt line (The red "INPUT" indicator turns
on) the keyboard focus reverts to the main window, so keypresses go to
the prompt line.  Previously, from some windows, the focus had to be
explicitly changed by moving the pointer or clicking.
One known oddity: the twm window manager in focus-follows-pointer mode
does not indicate the focus change in the window title bars.

Fixed a bug in the logic of the interaction of the terms button with the
symbl button.

Changed the dots command to be compatible with symbolic mode.  The dots
button is no longer locked out while in this mode.

Fixed a bug:  If in electrical mode with dots on and one pushes to a
symbolic subcell, then turns off symbolic mode, the program would hang or
crash.  This has been fixed.

Reorganized the Attributes menu, both the main menu and subwindow menus.
The "Grid" button is now "Set Grid".

Script function change:
   The Window() function now takes a fourth argument:
     Window(x, y, width, window_num)
   The forst three arguments are as before: the center coordinates and
   window width.  The window_num argument is an integer 0-4, which
   specifies the window to zoom:
    0    main drawing window
    1-4  subwindows  (number as shown in title bar)
    If the subwindow no longer exists, the operation reverts to the main
    window.  The function returns the window number of the window
    actually zoomed.

New script function:  GetWindow()
    This function returns the window number of the drawing window that
    contains the pointer.  The window number is an integer 0-4:
    0    main drawing window
    1-4  subwindows  (number as shown in title bar)
    If the pointer is not in a drawing window, 0 is returned.

-------------------------------------
EditCell(file, noask, cname) : cname can be a cell name if file is a
GDS archive, does not have to be top-level.
gtkdir.cc dispatch() show_content()
gtkplace.cc (AddMaster(), new_cb())
gtkdir.cc is_symfile(), PopUpLibraries()
gtklist.cc UpdateList() positioning

When giving a cell name as input to the Edit command, or specifying a
cell in the master name popup from the Place popup, one can specify
the name of a GDSII file and (optionally) the name of a cell in the
file as a second token, e.g.,
    Cell?  myfile.gds mycell
If the cell name isn't given, the top-level cell in the archive is opened,
which was the previous behavior.  This does not work for CIF.

the device library has changed.  The first line must be
  (Library somename);
Allows lines like
   Reference name /path/to/file symname

There is a now type of file recognized by Xic: Library files.  Library
files are files which contain references to cells, other libraries, or
cell definitions.  The format fo a library file is as follows:

(Library libname);

Property number string
....

Reference name path [cellname]
...

(Symbol symname);
symbol definition
E

The first line must begin with "(Library ", which designates a library file
to xic.  The name on this line following "Library" is ignored, but by
convention is the file name.  Within the file are three kinds of data fields:
properteries, references, and cells.  Properties are used in the
"device.lib" file (which is a special library file which must exist in
order to use electrical mode), and are described in the description of the
device.lib file format.

References associate a name with a cell, or another library.  For a cell,
name is the name by which the cell will be added to the database.  The
path is a path to the file containing the cell, which can be native (Xic),
or the cell can be included in a GDSII archive.  If the path points to a
GDSII archive, the cellname argument can be set to the name of the cell
in the archive.  Note that this does not have to be the same as name.
Opening "name" will open the cell referenced and add it to the database
as "name".  If cellname is not given, opening a reference to a GDSII file
with multiple cells will cause a pop-up to appear, allowing the user to
choose which cell to open.  In this case, the cell will be opened under its
own name.

If path points to a library, then cellname, if given, indicates which
reference or cell in the library to open.  The cell will be opened as
name.  If cellname is not given, a pop-up will appear allowing the user to
choose which library element to open.

Cells can be defined within libraries by including the native-format
body in the library file.  The first line of the cell must start with
(Symbol ".

Thus, there are two methods of organizing cells: the previous method
of using separate directories along a search path, and through
library files.

The Files Listing panel indicates libraries with an "L" code.  These can
be examined with the "Contents" button.

In the Edit command and when specifying a master cell to the Place command,
entering a library name or path will cause a pop-up to appear containing
a list of library references and cells.  Clicking on a cell name chooses
that cell.  One can also give the cell name as a second token following
the library name or path, in which case the cell is opened directly (unless it
too is a library).

If one attempts to open a file with an extension that is reserved for the
supported file formats (.gds, .cif, etc) other than ".xic" and the file
is not found, the open will fail.  Previously Xic would create a cell
of that name.

New '!' command: mklib [gdsfile] [-a] [-l]|[-u]
This command will create or append to a library file
adding references to cells in
the current hierarchy, or to cells in the GDSII file gdsfile if given.
If [-a] is given, the library entries will be appended to an existing
library, otherwise a new library will be created.  If -l is given, the
reference name will be a lower-cased version of the cell name, or, if
-u is given, the reference will be upper-cased.

If gdsfile is not given, and the current cell was read from a GDSII
hierarchy, the user is prompted for the name of a reference GDSII file.
If a name is given, the library entries will be in the form
  Reference refname /reference_path/name cellname
otherwise the references are in the form
  Reference refname /reference_path/cellname
as for native cells.
The user is next prompted for the reference path.  This should be the path
to the directory where the referenced cell files, or GDSII file, reside.
The current directory is the default.
Finally, the user is prompted for the name of the library file, which is
then created, or appended to if it exists and -a was given.

---

Fixed internal bug that caused crashes with symbolic cells.

no longer "look elsewhere in path"
/*
    if (!fp && strcmp(fullname, name))
        // Path search failed, look elsewhere in path.
        // This may not be a good thing...
        fp = open_file(name, name, cell, view, facet, &pathret, &libref);
*/

Cells defined in CIF files can now be randomly accessed, similar to
GDSII files.  The Contents button in the Files Listing pop-up will
list the cells in a selected CIF file.  The Edit and Master buttons
can be used to load particular cells (and their subcells) for editing
and placement.

The button logic in the Files Listing panel has been improved.
describe new logic

check listing in cell info, flist->stringlist
flist->free does not free strings

gtklist.cc flist->stringlist

Script functions:
OpenLibrary(name)
CloseLibrary(name)
OpenCell(forcname, symname)

Libraries List in File Menu

Cell Organization ans Libraries

Xic provides several methods by which collections of cells can be organized.

  .  Xic make use of a search path for file names given to Xic which do not
    have a directory path.  A search path is a list of
    directories where Xic searches for a named file.  If the file name contains
    a full path, that path will be used to obtain the file.  If a file name
    has a relative path, Xic will look for the file relative to each of the
    directories in the search path.  The search path can be set in the
    technology file, or by setting the Path variable with the !set command.
    The current path can be examined by entering "!set", which pops up a list
    of the currently defined variables, including Path.  The directories
    are searched in left-to-right order.

  .  Xic accepts "library" files.  These are text-mode files which contain
    references to cells and other libraries, and may contain cell
    definitions.  If a library file is "open", cell names referenced
    or defined in the library will be resolved through the library,
    before resolbing through the search path.  The name of a cell
    reference in a library is the name by which the cell will be added
    to Xic memory, which can be different from the name by which the
    cell is stored on disk.  The fact that a library can reference
    other libraries allows o full hierarchy to be established for
    accessing cells, independent of the search path.

    The Libraries List button in the Files Menu brings up a panel which
    lists the currently open libraries, and provides command buttons for
    performing basic manipulations on libraries, including opening/closing,
    viewing content, and opening cells.

  .  Cells contained in GDSII or CIF files can be randomly accessed from the
    file, thus these files can be used for archival purposes.  The Content
    button in panel brought up by the Files Listing button in the Files Menu
    will display the cells contained in these files.  The Content button
    will also list the contents of library files.  Individual cells (and
    their subcells) can be opened for editing or placement through this
    panel.  Also, when giving a name to the Edit command or the Place command
    in the Edit menu, one can give two names: the name of an archive file
    and a space-separated name of a cell in the archive.  That cell will
    be opened.  If the cell name is not given, the top-level cell in the
    archive is opened.
    
  The strategy used to organize cells is highly dependent upon the user's
  needs and preferences.  Below are some recommendations which are probably
  suitable for most applications.

   Keep the search path short.  This can usually consist of two directories:
   the current directory (".") listed forst, and a root directory for the
   user/s design files.  The search path has the disadvantage that all
   components are visible at all times.  If a cell name appears more than
   once in the search path, only the first instance will be found, unless
   the full path is given.  Libraries, on the other hand, can be opened
   and closed easily, changing the accessibility of the contents.

   Use hierarchies of libraries rooted in the search path to organize cells.
   You can open only the libraries in use, preventing loading of cells
   unexpectedly.

   Place collections of cells to be referenced through libraries in separate
   directories not in the search path.  Alternatively, the Xic cell definitions
   can be incorporated directly into the library file.  The cells can otherwise
be kept as individual cells of any compatible format, or combined into a single
archive file.

 Changed the blinking reature to use server-side objects to avoid data
transfer delays.

Fixed memory initialization bug in the Extract/Show Paths command.

Fixed a problem with the internal flattening code used for extraction.
Cells that are flattened (invisible in the extracted hierarchy) due to being
wire-only or having the "flatten prefix" that have
subcells should no longer cause problems.

Found an oversight that was causing gross inefficiency in extraction when
the device search depth is nonzero.  This is now much faster.

The Copy command in the Cells List pop-up was not copying labels in cells
correctly, leaving something that would likely crash the program.

Double clicking with button 2 on the arrows in the numeric pop-up (as for
Magnification in the Transform Menu) would crash the program.

About mouse-wheel support.
GTK provides support for mouse wheels, by assuming that up and down clicks
are mapped to button 4 and 5 presses.  In order to use the mouse wheel,
the X server must enable this function.  For FreeBSD and Linux, this is
enabled in the XF86Config file in /usr/X11R6/lib/X11, by adding the
"ZAxisMapping" keyword to the "Pointer" section, as shown in the example
below.

Section "Pointer"
   Protocol        "Auto"
   Device          "/dev/psm0"
   ZAxisMapping    4 5
EndSection

Windows that have scroll bars can be scrolled by moving the pointer over
a scroll bar and turning the mouse wheel.
----------------------------------------

Fixed a bug in the HTML viewer that would prevent following a named
anchor if the previous page was another named anchor on the same page.

Fixed a bug in the HTML viewer that would prevent connecting to a port
on the local host.

Changed the display of anchor text so that background images are not
overdrawn by the text background.

Fixed a problem that would cause linefeeds to be lost in preformatted
text:  if a line ended with an HTML tag, the line feed for that line
would be lost.

The leading white space of lines read from non-database input is no
longer stripped, so that preformatted indenting is not lost.  The
lines read from help database topics is still stripped, however, since
the help files are written with text blocks intented.

Bug Fixed: If one selects the "[text]" on-screen for a long text label,
presses the Label button in the side menu, then presses Enter, the
string editor pop-up would not appear, so the "long text" labels could
not be changed or even viewed.

While the prompt line editor is active, Shift-arrow keys pan the screen.

Top level xic cell with directory path given is opened explicitly, previously
this was opened through the search path, which could bring up the wrong cell
if AddToBack set.  Subcells are opened through the search path.

Opening files:
EDIF, OCT
   will always overwrite cells in memory, ignores NoAskOverwrite

CIF, GDSII
   will pop up merge control if NoAskOverwrite not set
   will always overwrite cells in memory if NoAskOverwrite set

Xic
   with no path
     Will always use a cell from memory, will never overwrite

   with path
     Will prompt if NoAskOverwrite not set
     Will always overwrite cells in memory if NoAskOverwrite set
   
     The top level cell will always be read from the given file if a path is
       specified.
     Subcells are resolved by cell name only through the path.  The path is
     modified during the read according to NoReadExclusive and AddToBack.

When reading in a GDSII or CIF file that contains cells of the same
name as cells already in memory (in the current symboltable), a pop-up
appears listing the names of the conflicting cells.  This replaces the
series of "overwrite ?" prompts.  For each cell in the pop-up listing,
one can select whether or not to overwrite the physical or electrical
part of the cell in memory by clicking on the "yes" and/or "no" that
follow each cell name.  One can also set the values for all cells with
the buttons.  Pressing the Apply button will remove the popup and
continue the conversion.  Pressing "Abort" or dismissing the pop-up
will abort the conversion.

Similarly, when reading in a native cell hierarchy that conflicts with
cells already in memory, a pop-up appears which allows the user to choose
whether or not to overwrite the physical and/or electrical part of the cell
in memory.  Press Apply to continue with the conversion.  One must press
Apply for each cell where there is a conflict, or press Apply to Rest to
apply the present setting to the rest of the cells.  Dismissing the pop-up
performs the same function as Apply to Rest.  The pop-up is removed when
all conversions are done.

Modified the GDS reader to avoid use of the file reading functions supplied
by the decompression library when the file is not compressed.  These functions
are rather slow, and there is a very noticeable imprevement in speed by
not useing these functions.

Fixed Bug:  If a script label was selected (with Shift - button press),
then the Label button pressed for editing, and the "L" (long text) button
pressed, the label would be fouled up - the screen view whould be that
for a normal "long text" label, and only the script name would be entered
into the pop-up editor.  This has been fixed:  the label remains as a
script label, and the script text is loaded into the pop-up editor.

The ToString() script function was broken, fixed.

Consolidated the signal handling into one function.  Previously termination
messages from Spice runs, print jobs, etc could conflict.

The XprpMagn pseudo=property can new be applied to all physical objects, not
just instances.

Lots of new script functions.  The mechanism for supporting "handles" has been
entriely rewritten.

Handles
   Handles are integer values used by many of the script functions to reference
   various types of objects.  The objects that are referenced by handles are
   listed below

     string lists
     database objects
     file descriptors
     properties
     layer expressions

   With the exception of the file descriptor and layer expression handles, the
   handle actually points to a list of objects, such as the currently selected
   objects, and can be iterated through.  Once the iteration is complete,
   the handle becomes undefined, and further references will not reference
   an object.

   The HandleContent() function can be called on any handle, and will return
   the number of objects that can be referenced through the handle.  Zero
   is returned when the handle iterated completely.  This function is useful
   in loops which contain iterations over handles.

   If a handle still contains references but it is no longer needed, the
   Close() function should be called on the handle to free internal
   resources.

  (object_handle) SelectHandle()
    This function returns a handle to the list of objects currently selected.
    The list is copied internally, and so is unchanged if the objects are
    subsequently deselected.

    A handle to the object list is returned.  The ObjectNext() function
    is used to advance the handle to point to the next object in the list.
    The HandleContent() function returns the number of objects remaining
    in the list.

  (object_handle) AreaHandle(l, b, r, t, types)
    This function creates a list of objects that touch the rectangular
    area specified by the first four coordinates (which are the left, bottom,
    right, and top values of the rectangle).  The fifth argument is a string
    which specifies the types of objects to include.  If zero or an empty
    string is passed, all types are included, otherwise the characters in the
    string signify which objects to include:
      'b'   boxes
      'p'   polygons
      'w'   wires
      'l'   labels
      'c'   subcells
    For example, passing "pwb" would list polygons, wires, and boxes only.
    The order of the characters is unimportant.

    A handle to the object list is returned.  The ObjectNext() function
    is used to advance the handle to point to the next object in the list.
    The HandleContent() function returns the number of objects remaining
    in the list.

  (int) HandleContent(handle)
    This function returns the number of objects currently referenced by the
    handle passed as an argument.  If zero is returned, the handle no
    longer references anything and should not be used.

    (known bug:  This function will always return 0 for layer expression
    handles.

  (int) ObjectNext(object_handle)
    This function is called with a handle to a list of objects, and causes
    the handle to reference the next object in the list.  If there are no
    more objects, the handle is deleted, and this function returns zero.
    Otherwise, the handle value is returned (same as the argument).
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (string) GetObjectType(object_handle)
    This function returns a one-character string representing the type of
    object referenced by the handle argument.  If the handle is invalid,
    a null string is returned.  The types are:
      'b'   boxes
      'p'   polygons
      'w'   wires
      'l'   labels
      'c'   subcells
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetObjectBB(object_handle, array)
    This function loads the left, bottom, right, and top coordinates of the
    object's bounding box (in microns) into the array passed.
    This function will fail if the handle passed is not found or not a
    handle to an object list, or if the size of the array is less than 4.
    The return value is always 1.

  (int) SetObjectBB(object_handle, array)
    This function will alter the shape of the object pointed to by the
    handle such that it has the bounding box passed.  The array contains the
    left, bottom, right, and top coordinates, in microns.
    This function will modify objects in physical views only.
    This function will fail if the handle passed is not found or not a
    handle to an object list, or if the size of the array is less than 4.
    The return value is always 1.  This function has no effect on subcells,
    but other types of object will be rescaled to the new bounding box.
    
  (string) GetObjectLayer(object_handle)
    This function returns the name of the layer on which the object referenced
    by the handle is defined.  For subcells, this layer is named "$$", but
    objects will return a layer from the layer table.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetObjectLayer(handle, layername)
    This function will move the object to the layer named in the string
    layername.  This will have no effect on subcells, or objects in electrical
    views.  A value 1 is returned
    if successful, 0 otherwise.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetObjectFlags(object_handle)
    This function returns internal flag data from the object referenced by
    the handle.  It is unlikely that this information would be useful to the
    user.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetObjectState(object_handle)
    This function returns a status value for the object referenced by the
    handle.  The status values are:
     0    normal state
     1    object is selected
     2    object is deleted
     3    object is incomplete
     4    object is internal only
   Only values 0 and 1 are likely to be seen.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetObjectGroup(object_handle)
    This function returns the conductor group number of the object.  This
    has relevance for physical boxes, polygons, and wires.  The group
    number is set by the extraction system and is used for connectivity
    testing.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetObjectCoords(object_handle, array)
    This function applies to polygons and wires.  The vertex coordinates
    are copied into the array, and the vertex count is returned.
    The array contains the x, y values of the vertices, in microns.
    The coordinates are copied only if the array is large enough, but the
    count is returned in any case.
    The array must be defined to be large enough to hold the points.
XXX this sucks
    Zero is returned if there is an error, such as specifying the wront type
    of object.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetObjectCoords(object_handle, array, size)
    This function will modify a physical polygon or wire to have the vertex
    list passed in the array.  The size is the number of vertices (one half
    the size of the array used).  For polygons, the first and last vertices
    must coincide, thus the minimum number of vertices is four.  The array
    consists of x, y coordinates of the vertices.  If the operation is
    successful, 1 is returned, otherwise 0 is returned.  The coordinates
    in the array are in microns.  This function applies to physical mode
    polygons and wires only.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (real) GetObjectMagn(object_handle)
    This function returns the magnification part of the transform if the
    object referenced by the handle is a subcell, or 1.0 for other objects.
    Only physical subcells can have non-unit magnification.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetObjectMagn(object_handle, magn)
    This will set the magnification of the subcell referenced by the handle,
    or scale other physical objects.  The real number magn must be betseen
    .01 and 1000 inclusive.  It applies in physical views only.  If the
    operation is successful, 1 is returned, otherwise 0 is returned.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetWireWidth(object_handle)
    This function will return the wire width if the object referenced by
    the handle is a wire, otherwise zero is returned.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetWireWidth(object_handle, width)
   This function will set the width of the wire referenced by the handle to
   the given width (in microns). If the operation is successful, 1 is returned,
   otherwise 0 is returned. 
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetWireStyle(object_handle)
    This function returns the end style code of the wire pointed to by the handle,
    or 0 if the object is not a wire.
    The codes are
     0  flush ends
     1  projecting rounded ends
     2  projecting square ends
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetWireStyle(object_handle, code)
    This function will change the end style of the wire referenced by the
    handle to the given code.  The code is an integer which can take the
    following values
     0  flush ends
     1  projecting rounded ends
     2  projecting square ends
   If the operation succeeds, 1 is returned, otherwise zero.  This can apply
   to physical wires only.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (string) GetLabelText(object_handle)
    This function returns the label text if the object referenced by the
    handle is a label.  Otherwise, a null string is returned.
    The actual text is always returned, and
    not the symbolic text that is shown on-screen for script and long text
    labels.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetLabelText(object_handle, text)
    This function will set the label text of a label referenced by the handle.
    This applies to physical-mode labels only.  Setting the text in this
    manner will cause a long-text label to revert to a normal label.  If the
    operation succeeds, the return value is 1, otherwise 0 is returned.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetLabelXform(object_handle)
    This function returns the orientation code of the label referenced by
    the handle, or 0 if the object is not a label.  The orientation code
    is a bit field with the following significance:
    // Label transform field:
    // 0-1, 0-no rotation, 1-90, 2-180, 3-270.
    // 2, mirror y after rotation
    // 3, mirror x after rotation and mirror y
    // ---- above are legacy ----
    // 4, shift rotation to 45, 135, 225, 315
    // 5-6 horiz justification 00,11 left, 01 center, 10 right
    // 7-8 vert justification 00,11 bottom, 01 center, 10 top
    // 9-10 font
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetLabelXform(object_handle, xform)
    This function will apply the given orientation code to the label
    referenced by the handle.  If the operation is successful, 1 is returned,
    otherwise 0 is returned.  Only physical-mode labels can be changed.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) GetInstanceArray(object_handle, array)
    This function fills in the array, which must have size of four or larger,
    with the array parameters for the instance referenced by the handle.
    If the operation succeeds, 1 is returned, and the array components have
    the following values:
     array[0]   number of cells along x
     array[1]   number of cells along y
     array[2]   center to center x spacing (in microns)
     array[3]   center to center y spacing (in microns)
    If the operation fails, 0 is returned.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetInstanceArray(object_handle, array)
    This function will change the array parameters of the instance
    referenced by the handle to the indicated values.  The array values
    are in the format as returned from GetInstanceArray().  Only physical
    mode subcells can be changed by this function, arrays are not
    supported in electrical mode.  If the operation succeeds, 1 is returned,
    otherwise 0 is returned.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (string) GetInstanceXform(object_handle)
    This function returns a string giving the CIF transformation code for
    the instance referenced by the handle.  If the object is not an
    instance, a null string is returned.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

  (int) SetInstanceTransform(object_handle, transform)
    This function applies the given transform to the instance referenced by
    the handle.  The transform is in the form of a CIF transformation string,
    as returned by GetInstanceTransform().  Note that coordinates in the
    transform string are in internal units (1 unit = .001 micron).
    Only physical-mode subcells can be modified by this function.
    If the operation succeeds, 1 is returned, otherwise 0 is returned.
    This function will fail if the handle passed is not found or not a
    handle to an object list.

The following new functions provide an interface for working with
physical mode properties.

  (prpty_handle) PrptyHandle(object_handle)
    This function returns a handle to the list of properties of the
    object referenced by the passed object handle.  If the passed value
    is 0, the returned handle will reference the list of properties of
    the physical part of the current cell.

  (int) PrptyNext(prpty_handle)
    This function causes the referenced property of the passed handle to be
    advanced to the next in the list.  If there are no other properties
    in the list, teh handle is freed, and 0 is returned.  Otherwise, the
    handle (same as the argument) is returned.  The number of remaining
    reference objects can be obtained with the HandleContent() function.

  (int) PrptyNumber(prpty_handle)
    This function returns the number of the property referenced by the
    handle.

  (string) PrptyString(prpty_handle)
    This function returns the string of the property referenced by the
    handle.

  (int) PrptyAdd(object_handle, number, string)
    This function will create a new property using the number and string
    provided, on the object referenced by the handle.  If the handle is
    0, the property will be created in the physical part of the current
    cell.  Only physical-mode objects can be given properties with this
    function.  If the function succeeds, 1 is returned. otherwise 0 is
    returned.

  (int) PrptyRemove(object_handle, number, string)
    This function will remove properties matching the given number and string
    from the object referenced by the handle.  If the string is null,
    only the number is used for comparison, and all properties with that
    number will be removed.  Otherwisem if the string is a prefix of the
    property string and the numbers match, the property will be removed.
    If the handle value is 0, properties will be removed from the physical
    part of the current cell.  Only physical objects can have properties
    removed by this function.  The function returns the number of properties
    removed.

------
  (int) Sizeof(arg)
    This function returns the allocated size of the argument, which is
    mostly useful for determining the size of an array.  The return
    value is

     1                     arg is a scalar (number)
     string length         arg is a string
     allocated array size  arg is an array

The property script functions can now read electrical properties.

Batch mode was issuing lots of warnings and was faulting, fixed.

It is now possible to pass parameters to the batch-mode scripts from
the command line.  The syntax is

    xic -Bscriptname[,param1=value1][,param2=value2] ...

The comma is used as a delimiter.
Commas in the line that remain in single or
double quotes *after* the shell has treated the line are not taken
as separators.  The entire construct should not have amy embedded
white space, except when single or double quoted as part of the values.

The param1, param2, etc.  are the names of variables that will be
defined in the execution context of the script.  These variables will
be set to values1, values2, etc.  The values are numbers, strings, or
executable text.  Values that contain white space must be quoted, but
note that the shell will strip the quote marks, so that a string
constant should be single and double quoted as shown below.

    Example

    xic -Bmyscript,p1=1.23,p2='"a string"',p3="p1 + 1"

This translates into the virtual addition of three lines to the beginning
of the script:
    p1 = 1.234
    p2 = "a string"
    p3 = p1 + 1

-------------------
****** finish !compare()

Fixed bug: If an object was selected and the Properties button was pressed,
the selected object's properties were not being listed initially.

Long text in physical properties now works the same as in electrical
properties.  Previously, one could use the text editor to compose property
strings, but the long text property would not be saved, and the property
would behave in all respects like an ordinary property.  This is due to
physical properties being stored as strings, and not the more complex data
structure used for electrical properties.  Now, a special prefix for long
text is prepended to the string.  This should never be visible inside
Xic, but will be visible in the files, and therefor potentially to other
tools.   Physical properties saved as "long text" will have the token
"(||text||)" prepended to the text as saved in files.
The Info windows will show the prefix along with the full text.

When the "text" hypertext entry is deleted in the prompt line, the
hidden ""long text" is now dumped to the prompt line instead of
disappearing.  Of course, only that which fits on the prompt line is
saved.

The blinking feature now works if the byte order of the image and the
server host don't match.

Known bug:  Some pc X servers don't support the Ximage feature correctly,
causing Xic to crash.  This happens somewhere in the GTK library code.

Fixed bug: If in a Push and the New button was pressed, the undo list
would contain undo's for the previous top-level cell, which could
cause trouble.

Modified job completion handling for Print pop-up, using an idle procedure
to try an fix reports of program hangs using xpp.

The FreeBSD operating system was upgraded to 4.3

GTK was upgraded to 2.10

New pseudo-property XprpName
   applies only to instances, returns instance cell name, or when set
   replaces instance with given instance if found.  Cell containing
   instance must be the current cell.  Replacement done according to
   current display mode.

new script functions
// (string) GetInstanceName(object_handle)
// 
// This function returns the cell name of the instance referenced by
// the handle.  If the object is not an instance, a null string is
// returned.  This function will fail if the handle passed is not a
// handle to an object list.
//
// (int) SetInstanceName(object_handle, newname)
// 
// This function will replace the instance referenced by the handle
// with an instance of the cell given as newname, in the parent cell
// of the referenced instance.  The current transform is added to the
// transform of the new instance.  This function will fail if the
// handle passed is not a handle to an object list.  If successful, 1
// is returned, otherwise 0 is returned.
//
// (int) Push(object_handle)
//
// This function will push the editing context to the cell of the
// instance referenced by the handle.  The handle is the return value
// from the SelectHandle() or AreaHandle() functions.  This is similar
// to the Push command in Xic.  The editing context can be restored
// with the Pop() function.  If successful, 1 is returned, otherwise 0
// is returned.  This function will fail if the handle passed is not a
// handle to an object list.
//
// (int) Pop()
//
// This function will pop the editing context to the parent cell, to
// be used after the Push() function or a Push command in Xic.  The
// Pop() function always returns 1, and has no effect if there was no
// corresponding push.
//
// (string_handle) LayerHandle(down)
//
// This function returns a handle to a list of the layer names from the
// layer table.  If the argument is 0, the list is in ascending (left to
// right) order.  If the argument is nonzero, the list is in descending
// order.  The layers used in the current mode are listed.
//
// (int) GenLayers(list_handle)
//
// This function returns a string containing a layer name from the
// layer table.  The argument is the handle returned by LayerHandle().  A
// different layer is returned for each call.  The null string is
// returned after all layers have been cycled through.
//
// (handle) DupHandle(handle)
//
// This function will duplicate a handle and the underlying list of
// objects presently referenced by the argument.  The argument can be
// any handle type except for handles to layer expressions.  The new
// handle is not associated with the old, and should be iterated
// through or closed explicitly.  For file descriptors, the return
// value is a duplicate descriptor to the underlying file, with the
// same read/write mode and file position as the original handle.  If
// the function succeeds, a handle value (positive integer) is
// returned.  If the function fails, 0 is returned.
//

Fixed a long-standing bug that would cause hypertext references to not be
found in some cases if a cell was rotated.  In particular, if the cell
was rotated for printing, references used in labels would print "unknown".

Fixed another long-standing bug, the plot marks were not oriented correctly
in a plot that was rotated.

XXX check terminal marks, etc

// ObjectDelete(object_handle)
//
// Calling this function will delete the object referenced by the
// handle from the current cell.  The handle will point to the next
// object in its list.  This function will fail if the handle passed
// is not a handle to an object list.  If the object is deleted, 1 is
// returned, otherwise 0 is returned.
//
// ObjectSelect(object_handle)
//
// This function will select the object referenced by the
// handle, if is is currently not selected, and the object is in the
// current cell.  The function returns 1 if the object was previously
// not selected and was selected, otherwise 0 is returned.
//
// ObjectDeselect(object_handle)
//
// If the object pointed to by the handle is selected, calling this
// function will deselect the object.  The function returns 1 if the
// object was previously selected and was deselected, otherwise 0 is
// returned.
//
// ObjectMove(object_handle, refx, refy, x, y)
//
// This function is similar to the Mopy() function, however it
// operates on the object referenced by the handle only.  The object
// is moved such that the coordinate refx, refy is translated to x, y. 
// If UseTransform() is in effect, the current transform will be
// applied to the move.  The function returns the number of objects
// moved.
//
// ObjectCopy(object_handle, refx, refy, x, y)
//
// This function is similar to the Copy() function, however it
// operates on the object referenced by the handle only.  The object
// is copied such that the coordinate refx, refy is translated to x,
// y.  If UseTransform() is in effect, the current transform will be
// applied to the copy.  The function returns the number of objects
// copied.
//
// EraseUnder()
//
// This functions will erase geometry from unselected objects that
// intersects with objects that are selected.  If in layer-specific
// mode, only the current layer will be erased, otherwise all layers
// will be erased.  This is equivalent to the Erase Under command in
// Xic.  This function always returns 1.
//

new script function: !compare filename1 [filename2]
The arguments are paths to GDSII or CIF files.  The command will compare
each cell in the fierarchy, and report the differences, in an output file
named "diff.log".  If the second argument is not given, comparison is to
cells currently in memory.  The hierarchies are expected to be similar,
otherwise the output may be voluminous.  Each object not identical to
another object in the cell being compared is listed.  Even if the geometry
is the same but has a different composition, the differences will be
listed.

// ListCreate(arglist)
//
// This function creates a list of strings corresponding to the
// variable number of arguments, and returns a handle to the list. 
// The arguments are converted to strings in the manner of the Print()
// function, however each argument corresponds to a unique string in
// the list.  The strings are accessed in (left to right) order of the
// arguments.
//
// ListAddFront(list_handle, string)
//
// This function adds string to the front of the list of strings
// referenced by the handle, so that the handle immediately references
// the new string.  The function will fail if the handle is not a
// reference to a string list, or the given string is null.  The
// return value is 1 unless the handle is not found, in which case 0
// is returned.
//
// ListAddBack(list_handle, string)
//
// This function adds string to the back of the list of strings
// referenced by the handle, so that the handle references the new
// string after all existing strings have been cycled.  The function
// will fail if the handle is not a reference to a string list, or the
// given string is null.  The return value is 1 unless the handle is
// not found, in which case 0 is returned.
//
// ListAlphaSort(list_handle)
//
// This function will alphabetically sort the list of strings
// referenced by the handle.  The function will fail if the handle is
// not a reference to a list of strings.  The return value is 1 unless
// the handle is not found, in which case 0 is returned.
//
// ListUnique(list_handle)
//
// This function deletes duplicate strings from the string list
// referenced by the handle, so that strings remaining in the list are
// unique.  The function will fail if the handle is not a reference to
// a list of strings.  The return value is 1 unless the handle is not
// found, in which case 0 is returned.
//
// (int) HandleReverse(handle)
//
// This function will reverse the order of the list referenced by the
// handle, which can be a list of strings, objects, or properties. 
// Calling this function on other types of handles does nothing.  The
// function returns 1 if the action was successful, 0 otherwise.
//
// (string) FormatCols(list_handle, columns)
//
// This function returns a string which contains the column formatted
// list of strings referenced by the handle.  The columns argument
// sets the page width in character columns.  This function us useful
// for formatting lists of cell names, for example.  The return is a
// null string if the handle is not found.  The function fails if the
// handle does not reference a list of strings.
//
// (list_handle) StringHandle(string, sepchars)
//
// This function returns a handle to a list of strings which are
// derived by splitting the string argument at characters found in the
// sepchars string.  If sepchars is empty or null, the strings will be
// separated by white space, so each string in the handle list will be
// a word from the argument string.
//
// (string) concat(list_handle, sepcahrs)
//
// This function returns a string consisting of each string in the
// list referenced by the handle separated by the sepchars string.  If
// the sepchars string is empty or null, there is no separation
// between the strings.  The function will fail if the handle does not
// reference a list of strings.  A null string is returned if the
// handle is not found.
//
// (string) ListNext(list_handle)
//
// This function will return the string at the front of the list
// referenced by the handle, and set the handle to reference the next
// string in the list.  The function will fail if the handle is not a
// reference to a list of strings.  A null string is returned if the
// handle is not found, or after all strings in the list have been
// returned.
//
// HandleNext(handle)
//
// This function will advance the handle to reference the next element
// in its list, for handle types that reference a list.  It has no
// effect on other handles.  If there were no objects left in the
// list, or the handle was not found, 0 is returned, otherwise the
// handle value is returned (same as the argument).
//

!!!! HandleDup()

// (string) GenCells(handle)
//
// This function is simply an alias to ListNext(), and will return a
// cell name if the handle argument was returned from InitGen() or
// GenCells().  If all names have been returned, or if the handle is
// not found, a null string is returned.  The function will fail is
// the handle does not reference a list of strings.


// (stringlist_handle) CellsHandle(depth)
//
// This function returns a handle to a list of subcell names found in
// the hierarchy, to the given depth.  If depth is 0, the names of
// subcells of the current cell are listed.  If depth is 1,
// additionally the subcells of the subcells are listed, and so on. 
// In the argument is instead the string "all", all subcells found in
// the hierarchy are listed.  The order is as a tree, with a subcell
// listed followed by the descent into that subcell.
//
// With "all", passed, the output is similar to that of the InitGen()
// function, except that the current cell name is not listed, and
// duplicate entries are not removed (ListUnique() can be called to
// remove duplicate names).
//                

// (stringlist_handle) InitGen()
//
// This function returns a handle to a list of names of cells used in
// the hierarchy of the current cell, either the physical or
// electrical part according to the current mode.  Each cell is listed
// once only, and all cells are listed, including the current cell.
//
// (int) GenLayers(stringlist_handle)
//
// This function returns a string containing a layer name from the
// layer table.  The argument is the handle returned by LayerHandle().  A
// different layer is returned for each call.  The null string is
// returned after all layers have been cycled through.  This is simply
// an alias for ListNext().
//
-----

When Edit/New is selected, the default cell name is the first one of
  selection from Open
  selection from Cells List
  selection from Files List or the Content List
  selection from Libraries List Content list
  selection from Tree List
  selection from Info window
  name of selected subcell in drawing window
  next cell on command line
  current cell

When New is selected in the Master list in the Place popup, the default name
is the first one of
  selection from Open
  selection from Cells List
  selection from Files List or the Content List
  selection from Libraries List Content list
  selection from Tree List
  selection from Info window
  name of selected subcell in drawing window
---------------------------------------------------------------------

Fixed a bug in function/endfunc script constructs: if the function had
an error, an internal variable would not be reset which would affect
scripts run afterward.

(help updated)
In the Edit command in the Edit menu, if one holds down Shift while selecting
one of cells from the history list, the Place panel will appear with that
cell added as the current master.  This applies to cell names and not "New".
This is a quick backdoor for instantiating cells recently edited.

(help updated)
The CellsHandle function has changed:
// (stringlist_handle) CellsHandle(cellname, depth)
//
// This function returns a handle to a list of subcell names found in
// cellname, to the given depth.  If cellname is null or empty, the
// current cell is assumed.  If depth is 0, the names of subcells of
// cellname are listed.  If depth is 1, additionally the subcells of
// the subcells are listed, and so on.  In the depth argument is
// instead the string "all", all subcells found in the cellname
// hierarchy are listed.  The order is as a tree, with a subcell
// listed followed by the descent into that subcell.
//
// With "all", passed, the output is similar to that of the InitGen()
// function, except that the top-level cell name is not listed, and
// duplicate entries are not removed (ListUnique() can be called to
// remove duplicate names).
//

The PrintLog(), Write/Read functions now check for valid file handle.

(help updated)
PrintLog(file_handle, arg_list):
// The function returns    
// the number of characters written.
// The function will fail if the handle is not a file handle.

(help updated)
// (string) ReadLine(maxlen, file_handle)
// null string is returned when the end of file is reached, or if the
// handle is not found.
// The function will fail if the handle is not a file handle, or maxlen 
// is less than 1.

(help updated)
// (int) ReadChar(file_handle)
// The function returns EOF (-1) when the end of
// file is reached, ir the handle is not found.  The function will 
// fail if the handle is not a file handle,


(help updated)
// (int) WriteLine(string, file_handle)
// The function will
// fail if the handle is not a file handle, or the string is null.

(help updated)
// (int) WriteChar(c, file_handle)
// The function
// will fail if the handle is not a file handle, or the integer value 
// of c is not in the range 0-255.

(help updated)
// (int) DRCcheckArea(left, bottom, right, top, file_handle)
// 
// This function performs DRC over the rectangular area designated by
// the first four arguments.  The file_handle is a value returned from
// the Open() function, or 0.  If a file handle is passed, output is
// recorded in the file.  If 0 is passed, output goes to the error
// logger which appears on-screen.  The number of errors detected is
// returned.  This function replaces the DRCcheck() function, which is
// no longer available.
//

(help updated)
// (int) DRCcheckObjects(file_handle)
//
// This function checks each selected object for design rule
// violations.  The argument is a file handle returned from the Open()
// function, or 0.  If a file handle is passed, output goes to that
// file, otherwise output goes to the on-screen error logger.  This  
// function returns the number of errors found.
//

(help updated)
// (int) Print(arg_list)
//
// Print the arguments on the terminal screen.  This is the window
// from which Xic was launched.  The number of arguments is variable.
// The printing is indented according to the level set with the
// SetIndent() function.


(help updated)
new functions
// (string) SepString(string, repeat)
//
// This function returns a string that is created by repeating the
// string argument repeat times.  The repeat value is an integer in   
// the range 1-132.  The function will fail if string is null.
//

// (int) SetIndent(level)
// 
// This function is used to set the indentation level used for 
// printing with the Print() and PrintLog() functions.  The argument
// is an integer which specifies the column where printed output will 
// start.  The argument can also be a string in one of the following  
// formats:
//   "+N"   N is an optional integer (default 1), increases indentation 
//          by N columns. 
//   "-N"   N is an optional integer (default 1), decreases indentation 
//          by N columns. 
//   ""     Empty string, don't change indentation. 
// 
// The function returns the previous indentation level.
//

// (int) SetSelectMode(ptr_mode, area_mode, sel_mode)
//
// The function allows the various selection modes to be set.  These
// are the same modes that can be set with the pop-up provided by the
// layer button.  If an input value is given as -1, that particular
// parameter will be unchanged.  Otherwise, the possible values are
//
//   ptr_mode        area_mode         sel_mode
//   0    Normal     0    Normal       0    Normal
//   1    Select     1    Enclosed     1    Toggle
//   2    Modify     2    All          2    Add
//                                     3    Remove
//
// The return value is a string, where the first three characters are
// the previous values of ptr_mode, area_mode, and sel_mode.
//

The Tree pop-up is no longer refreshed unnecessarily, which was annoying
since it collapses the display.

!compare command changed:
// !compare filename1 [filename2] [-c cellnames...]
If cell names are given, only those cells are compared.  The -c is optional
if filename2 is given.

New feature: Template cells

   Template cells, or parameterized cells, are cells which rather than
containing fixed geometry, instead contain a script (the "template") which
creates the geometry.  When a template cell is instantiated, parameters
can be supplied to the script, so that the geometry can vary between
instantiations.

A single template cell can replace numerous small cells representing
contacts, vias, and devices.  Use of template cells can streamline the
design process and reduce errors.

  Creating Template Cells

Template cells differ from ordinary cells in the following ways:
  1) The name of a template cell must be in the from
       cellnameXXX
     where the cellname is arbitrary, but must be followed by the
     characters "XXX".  As with any cell, the total name length must
     be 32 characters or fewer.  The "XXX" is replaced internally by
     an identifying code which is used to distinguish between instances
     with different parameter sets.

  2) Template cells have a special property, the "script property" which
     is assigned property number 7199.  The "string" of this property is
     a script that will be executed when the cell is instantiated.
     The format of the script is conventional, and any of the geometry
     creation and related functions can be used.

  3) Template cells may have an optional "arguments property" which is
     assigned number 7198.  The string if this property is a comma
     separated list of assignments, e.g.,
       length=100,width=20,bottom=2,layer=R1
     Each of the length, width, etc are arbitrary parameter names, that
     is, names of variables used in the script, but not generally defined
     in the script.  The values are taken as default values for the
     parameters, and can be numeric values or strings.  If a value string
     contains white space, it must be double quoted ("like this").
     The value string can also be an executable code fragment using only
     parameters already defined (to the left) and constants.

  Either the physical or electrical part of a symbol can be a template
  cell, or both.  A template cell can contain geometry, subcells, and
  properties just like any other cell.

  How Template Cells Work

  A template cell is never itself instantiated.  When one places an instance
  of a template cell, the following steps occur:

    1)  The template cell is read into memory if it is not already there.
    2)  The user is prompted for the parameter values.
    3)  The database is searched for another cell derived from the template
        with the same parameter values.  If one is found, it is instantiated,
        and we're done.
    4)  Otherwise, the template cell is duplicated, and the "XXX" is replaced
        with a unique identifier in the new cell.  The script is executed,
        and the script property is removed from the new cell.  A property
        is added to the new cell identifying the template.  The new cell is
        instantiated, and we're done.

  Note that once the instance is placed, it behaves in all respects like
  a normal cell.  It has a "master" derived from the template, and a unique
  master exists for each unique parameter set.  Writing the hierarchy to
  GDSII of CIF produces a perfectly normal file.  The template cells
  are never included in the output file, since they are not directly
  instantiated in the hierarchy.


Physical properties that use "long text" can now contain semicolons in
the text.  The semicolons are encoded as "(||sc||)" in files, to hide
the semicolon in CIF.  Semicolons are replaced with a space in normal labels.

Selecting a multi-line property string in the Properties Editor now works.

There is a new command in the Edit Menu: Cell Properties.  This brings up
a panel very similar to the Properties Editor, however the properties
listed are those of the current cell.

The Cell Properties editor contains buttons to add, edit, and remove cell
properties.  In general, cell properties are assigned internally and can
not be modified with this panel.  The listing provides some diagnostic
ability, but will not be of much use to most users.
Arbitrary properties can be added, however, which might be necessary in
interfacing to other tools.

The major reason for this panel's existence is to allow manipulation of the
properties that control template cells.
To create a template cell, one can follow this procedure:
   1) Write a script that creates the geometry desired in the template.
      The script can be authored as any other script.  It should be
      thoroughly debugged before committing it to a template cell.
   2) Use the Edit commnd to edit a new cell which will become the template
   cell.  Remember that the name of a template cell must be suffixed with
   "XXX".
   3) add any geometry to the cell that is necessary.  This can be done
    at any time.
   4) Bring up the Cell Properties editor.
   5) Press Add, which brings up a pop-up menu, and select Template in
    the pop-up menu.
   6) Press the "L" button just above the prompt line.  This brings up
    the Text Editor pop-up.
   7) Use the Read button of the text editor (in the File menu) to read
    in the script file.  Perform any last minute editing.
   8) Press the Save button in the text editor.  The text editor will
    go away, and the script will have been saved in the current cell.
   9) In the Cell Properties editor, press Add, the select Parameters in
    the pop-up menu.
   10) Enter the a string on the prompt line consisting of each parameter
    name followed by '=' and its value.  The name = value pairs can be
    separated by commas or white space.  If a value contains white space,
    commas, or an equal sign, it should be quoted by double quetes ('"').
    If the value is a string constant, it should be quoted with both single
    and double quotes, as in Param1 = '"this is a string"'.  Press Enter
    when done.
   11) This completes the operation. Save the cell to disk.
   


// (int) SetCurLayer(name)
// 
// The string argument contains a layer name.  Calling this function
// sets the current layer to the named layer.  The function will fail   
// if the named layer does not exist.

// (int) NewCurLayer(name)
// 
// If the named layer does not exist, it will be created.  The current
// layer is set to the named layer.  The function will fail if the 
// name is not a valid CIF layer name, or the layer table if full.
//


The text editor, while in string editing mode (as for "long text") now
contains the "Read" entry in the File menu.  As in other modes, this allows
a file to be read into the text editing window.

   
When The prompt line is expecting input, the background becomes pure white.
This is a visual indicator that input is expected.

Substantial internal changes to the undo list tracking system.  There are
some new checks for consistency.
----

In the listing of properties in the Properties and Cell Properties pop-ups,
the reserved property numbers are shown in parentheses/

// (string) GetPropertyString(object_handle, number)
//
// This function returns the strings from properties or
// pseudo-properties for the object referenced by the handle, or from
// the current cell if the handle is 0.  The function will locate a
// property with the given number, and return its string.  If no
// property is found with that number, and a pseudo-property for the
// object matches the number, then the pseudo-property string is
// returned.  Note that pseudo-properties are currently defined for
// objects, not cells.  If no matching pseudo-property is found, a
// null string is returned.  The function will fail if a nonzero
// handle argument does not reference a list of objects.  Note: 
// objects can be modified through setting pseudo-properties using the
// function that add properties to objects.
//

update text for properties script funcs
// (int) PrptyAdd(object_handle, number, string)
//
// This function will create a new property using the number and
// string provided, on the object referenced by the handle.  If the
// handle is 0, the property will be created in the current cell.  The
// object must be defined in the curent cell.  Acceptable property
// numbers are:
// Physical cell:     0 - 6999, 7198 (Args), 7199 (Script), 7300 or larger
// Electrical cell:   7198 (Args), 7199 (Script)
// Physical object:   0 - 6999, 7198 (Args), 7200 or larger
// Electrical object: 7198 (Args) only
// Adding an Args or Script property will automatically remove the old
// property, if any.
// Note that
// pseudo-properties can be supplied, and will be applied to physical
// objects.
// If the function succeeds, 1 is returned.  otherwise 0 is returned.
//
// (int) PrptyRemove(object_handle, number, string)
// the function must be called while in physical mode.  Objects must
// be defined in the current cell.  The function returns the number of
// properties removed.  Property numbers in the range 7000 - 7299 are
// reserved and corresponding properties will not be removed.

// (int) AddProperty(number, string)
//
// This function adds the property number and string to all selected
// objects.  Acceptable property numbers are:
// Physical object:   0 - 6999, 7198 (Args), 7200 or larger
// Electrical object: 7198 (Args) only
// Note that
// pseudo-properties can be supplied, and will be applied to physical
// objects.
// The number of properties added plus pseudo-properties
// given is returned.
//
// (int) AddCellProperty(number, string)
//
// This function adds a property to the current cell.  The number is
// an integer property specifier, and the string is the property
// content.  Acceptable property numbers are:
// Physical cell:     0 - 6999, 7198 (Args), 7199 (Script), 7300 or larger
// Electrical cell:   7198 (Args), 7199 (Script)
// The function returns 1 if the operation was successful, 0
// otherwise.
//
// The string argument can be passed 0, in which case this function
// will remove all properties with the number given from all selected
// objects (only for physical mode).  If a string is given, then only
// those properties for which string is a prefix of the value string
// will be removed.  Property numbers in the range 7000 - 7299 are
// reserved and corresponding properties will not be removed.  The
// number of properties removed is returned.
//
// (int) RemoveCellProperty(number, string)
//
// Property numbers in the range 7000 - 7299 are
// reserved and corresponding properties will not be removed.  The

More function return problems, fixed.
----------------------------------------------------------------

The XprpCoords pseudo-property can not be read from and applied to boxes
and labels, as well as polygons and wires as previous.  The return is the
bounding box.  When applied, this will change the box or polygon to have
new coords.  If the new coords are a manhattan rectangle, the new figure
will be a box, otherwise the new figure will be a polygon.  For labels,
the coords must be manhattan box, and the label size and placement will
be changes, as for XprpBB.

Fixed bug, selection in Properties popup wasn't quite right, since the
font height is one pixel different than assumed.
als DRC Rules, Extract, GDSII Params.

WARNING pseudo-property numbers have changed (update help)

The long text "L" button now works for editing pseudo-properties

Bug fixed, issuing deselect with the Properties menu active would cause
a segmentation fault.

The prompt line now (at long last) scrolls to facilitate editing long lines.

If one tries to edit a text line in the prompt line editor that is too long
for the internal buffer, the text editor will pop-up instead, if possible,
and the string will be converted to a "long text" object, if possible.
Previously,
strings longer than 256 characters would be truncated, silently, if they
were processed through the editor.

Fixed a bug in giving pseudo-properties in the Properties pop-up with
"long text".  Two changes in succession to the same object wuold hang the 
program.

modified
// (int) GetObjectCoords(object_handle, array)
// 
// This function will obtain the vertex list for polygons and wires,
// or the bounding box vertices of other objects, starting from the
// lower left corner and working clockwise.  If an array is passed,
// the vertex coordinates are copied into the array, and the vertex
// count is returned.  The array will contain the x, y values of the
// vertices, in microns, if successful.  The coordinates are copied 
// only if the array is large enough, or can be resized.  If the array
// is a pointer to a too small array, or the array is too small but
// has other variables pointing to it, resizing is impossible and the
// copying is skipped.  In this case, the returned value is the
// negative vertex count.  If 0 is passed instead of the array, the  
// (positive) vertex count is returned.  Zero is returned if there is
// an error.  This function will fail if the handle passed is not a 
// handle to an object list.                                         
// 

modified
// (int) SetObjectCoords(object_handle, array, size)
// 
// This function will modify a physical object to have the vertex list
// passed in the array.  The size is the number of vertices (one half
// the size of the array used).  For all but wires, the first and last
// vertices must coincide, thus the minimum number of vertices is   
// four.  The array consists of x, y coordinates of the vertices.  If
// the operation is successful, 1 is returned, otherwise 0 is
// returned.  The coordinates in the array are in microns.  If the
// coordinates represent a rectangle, the new object will be a box, if
// it was previously a polygon or box.  A box may be converted to a
// polygon if the coordinates are not those of a rectangle.  For
// labels, the coordinates must represent a rectangle, and the label
// will be stretched to the new box.  The function has no effect on
// instances.  This function will fail if the handle passed is not a
// handle to an object list.
// 

new
// Popen(comand, mode)
//
// This command opens a pipe to the shell command given as the first
// argument, and returns a file handle that can be used to read and/or
// write to the process.  The handle should be closed with the Close()
// function.  This is a wrapper around the C library popen() command
// so has the same limitations as the local version of that command.
// In particular, on some systems the mode may be reading or writing,
// but not both.  The function will fail if either argument is null
// or if the popen() call fails.
//

new
// (int) FreezeDisplay(enable)
// 
// When this function is called with a nonzero argument, the graphical
// display in the drawing windows will be frozen until a subsequent
// call of this function with a zero argument, or the script
// terminates.  This is useful for speeding execution, and eliminating
// distracting screen drawing while a script is running.  When the
// function is called with a zero argument, all drawing windows are
// refreshed.
//

new
// (int) System(command)
//
// This function executes the shell command given.  The return value   
// is the return code from the command, as obtained by the shell.  The
// function will fail if the command string is null or empty.
//

need global define for pop_memory();

The Allocation command has changed...
Pressing this button brings up the Memory Monitor pop-up.  This displays
the number of cells in memory, the total dynamic memory in use by the
program, and system limits on dynamic memory.  While visible, the pop-up
is refreshed every 10 seconds.

The maximum memory that can be used by the program before a fault occurs
is not well defined, and may be much less that the limits, depending on
what other programs are running, the actual size of the swap space, and
other factors.  The limits are either system defaults, or values set
with the limits(1) shell command (Unix/Linux).  The "hard" and "soft" values
are those returned by the system call, and have different interpretations
under different Unix versions.

// (int) Distance(x, y, x1, y1)
//
// This function computes the distance between two points, given in
// microns, returning the distance between the points in microns.
//
// (int) MinDistPointToSeg(x, y, x1, y1, x2, y2, aret)
//
// This function computes the shortest distance from x,y to the line
// segment defined by the next four arguments.  The aret is an array
// of size at least 4, used for returned coordinates.  If no return is
// needed, this argument can be set to 0.  Upon return of a value
// greater than 0, the first two values in aret are x and y, the next
// two values are the point on the segment closest to x, y.  All
// values are in microns.
//
// (int) MinDistPointToObj(x, y, object_handle, aret)
//
// This function computes the minimum distance from the point x,y to
// the boundary of the object given by the handle.  The aret is an
// array of size at least 4 for return coordinates.  If the return is
// not needed, this argument can be given as 0.  Upon return of a
// value greater than 0, the first two values of aret will be x and y,
// the next two values will be the point on the boundary of the object
// closest to x,y.  The function returns 0 if x,y touch or are
// enclosed in the object.  The function will fail if the handle is
// not a reference to an object list.  If there is an internal error,
// -1 is returned.  All coordinates are in microns.
//
// (int) MinDistSegToObj(x, y, x1, y1, object_handle, aret)
//
// This function computes the minimum distance from the line segment
// defined by the first four arguments to the boundary of the object
// given by the handle.  The aret is an array of size at least 4 for
// return coordinates.  If the return is not needed, this argument can
// be given as 0.  Upon return of a value greater than 0, the first
// two values of aret will be the point on the line segment nearest
// the object, the next two values will be the point on the boundary
// of the object nearest to the line segment.  The function returns 0
// if the line segment touches or overlaps the object.  The function
// will fail if the handle is not a reference to an object list.  If
// there is an internal error, -1 is returned.  All coordinates are in
// microns.
//
// (int) MinDistObjToObj(object_handle1, object_handle2, aret)
//
// This function computes the minimum distance between the two objects
// referenced by the handles.  The aret is an array of size at least 4
// for return coordinates.  If the return is not needed, this argument
// can be given as 0.  Upon return of a value greater than 0, the
// first two values of aret will be the point on the boundary of the
// first object nearest the second object, the next two values will be
// the point on the boundary of the second object nearest to the first
// object.  The function returns 0 if the objects touch or overlap. 
// The function will fail if either handle is not a reference to an
// object list.  If there is an internal error, -1 is returned.  All
// coordinates are in microns.
//
// (int) MaxDistPointToObj(x, y, object_handle, aret)
//
// This function finds the vertext of the object referenced by the
// handle farthest from the point x,y and returns this distance.  The
// aret is an array of size at least 4 for return coordinates.  If the
// return is not needed, this argument can be given as 0.  Upon return
// of a value greater than 0, the first two values of aret will be x
// and y, the next two values will be the vertex of the object
// farthest from x,y.  The function will fail if the handle is not a
// reference to an object list.  If there is an internal error, -1 is
// returned.  All coordinates are in microns.
//
// (int) MaxDistObjToObj(object_handle1, object_handle2, aret)
//
// This function finds the pair of vertices, one from each object,
// that are farthest apart.  Both handles can be the same.  The aret
// is an array of size at least 4 for return coordinates.  If the
// return is not needed, this argument can be given as 0.  Upon return
// of a value greater than 0, the first two values of aret will be the
// vertex from the first object, the next two values will be the
// vertex from the second object.  The function will fail if either
// handle is not a reference to an object list.  If there is an
// internal error, -1 is returned.  All coordinates are in microns.
//

Fixed core leak in scripts involving strings.

Changed the logic for handles in scripts.  Previously, the handle would not
be destroyed until HandleNext() (or equiv) was called with the list empty.

This would fail to destroy the handle, which is generally not a problem
except when a script creates a very large number of handles so memory
usage could be an issue.

    handle = create_function()
    while (HandleContent(handle())
        do_something
        HandleNext(handle)
    end

This would work, but "do something" would be called with an empty handle
just before it is destroyed:

    handle = create_function()
    i = HandleContent(handle)
    while (i)
        do_something
        i = HandleNext(handle)
    end

Now, both constructs work cleanly.

When saving to a gds/cif/edif file a hierarchy that originated in the same
file type, the default saved file is now the original file path, and not
the same file name but in the current directory.  Thus the original file
by default will be overwritten, but a backup copy will be created in the
same directory with a ".bak" extension as usual.

All the blather about modifying the search path when reading now applies
only to native and OCT cells.

The Properties editor was broken for setting electrical mode properties,
would crash program.

// (int) Intersect(object_handle1, object_handle2, touchok)
//
// This function determines whether the two objects referenced by the
// handles touch or overlap.  The return value is 1 if the objects
// touch or overlap, 0 if the objects do not touch or overlap, or -1
// if either handle points to an empty list or some other error
// occurred.  The function fails if either handle is not a reference
// to an object list.  If the touchok argument is nonzero, 1 will be
// returned if the objects touch but do not overlap.  If touchok is 0,
// objects must overlap (have nonzero intersection area) for 1 to be
// returned.
//
// (int) ClipAround(object_handle1, object_handle2)
//
// If the two objects referenced by the handles overlap (i.e., have
// nonzero intersection area) the intersection area is removed from
// the second object (which must be a box, polygon, or wire).  The
// resulting object will not overlap the first object, but remaining
// parts will be adjacent.  If clipping occurs, the second object is
// deleted from the database and all handle lists, and the replacing
// (clipped) objects are added to the second handle list so as to
// replace and follow the previous second object.  If the second
// object is entirely covered by the first, it will be deleted, and
// the second handle will be advanced to the nest object.  If clipping
// occurs, the function returns the number of pieces of the new second
// object that were created.  If either handle does not point to a
// valid object, -1 is returned.  The function fails if either handle
// does not reference a list of objects.
//

More fooling with the undo/redo lists

Files popup bug fixed;  Press Files/Edit, Merge comes up, dismiss Files,
pow.
----------------------------------------------------------------------

Fixed a bad core leak in the debugger.

In the debugger while in execute mode, clicking on the line with the caret
will execute a single step.

If the beginning of a script has a lot of comments or other lines that are
not executed, the first executable line could be off-screen after a reset.
The reset now causes the first executable line to be at the top of the listing.

The caret is turned off during Run.

The full path name is no saved for native symbols read from files.
The full path is stored for the top level symbol in gds/cif/edif (previous).
Text editing should work for ascii cells with path stored.

When the current cell has been modified and not saved, the status line
now prints "Mod".

Xic will now save native cells to the same file the cell was read from
by default.  The existing cell will be moved to a ".bak" extension.
Cells that do not have an origin file will be saved by default in the
current directory.

When the Save As command is used, a pop-up appears which provides an
expandable and selectable tree representation of the directory structure,
rooted in the directory where the file was originally read from, or the
current directory.  The name or path to the file can be modified on the
prompt line, or directories can be selected from the pop-up.


// (int) HandleTruncate(handle, count)
// 
// This function truncates the list referenced by the handle, leaving
// the current item plus count additional items.  If count is
// negative, it is taken as 0.  The function returns 1 on success, or
// 0 if the handle does not reference a list or is not found.
//

// (handle) HandleDupNitems(handle, count)
//
// This function acts similarly to HandleDup(), however for handles
// that are references to lists, the new handle will reference the
// current item plus count additional items.  For handles that are not
// references to lists, the count argument is ignored.  Layer
// expression handles are not supported.  The new handle is returned on
// success, 0 is returned if there was an error.
//

// (int) HandlePurgeList(handle1, handle2)
//
// This function removes from the list referenced by the second handle
// any items that are also found in the list referenced by the first
// handle.  Both handles must reference lists of the same type of
// object:  database objects, properties, or strings.  The return
// value is 1 on success, 0 otherwise.
//

ClipAround() now ignores same object if in both references

// (int) ClipAroundAll(object_handle1, object_handle2)
// 
// This function is similar to the ClipAround() function, however all
// items in both object lists are processed.  New objects created are
// added to the front of the object_handle2 list.  Objects that are
// deleted are removed from both lists.  Objects that appear in both
// lists will be deleted, unlike ClipAround().  HandlePurgeList() can
// be called to eliminate these objects should this be a potential
// problem.  The returned value is the total number of new objects
// created, or -1 if there was an error.  Any object can appear in the
// object_handle1 list, the bounding box is used for labels and
// subcells.  Only boxes, polygons, and wires in the object_handle2
// list will be processed.  The function fails it either handle does
// not reference a list of objects.
//

// ClipTo(object_handle1, object_handle2)
//
// This function will clip the object referenced by the second handle
// to the boundaries of the object referenced by the first handle.
// The second object must be a box, polygon, or wire.  The first
// object can be any type, labels and subcells will use the bounding
// box.  The newly created objects are added to the front of the
// second handle list, and the original object is removed from the
// list.  The return is the number of objects created, or -1 if either
// of the handles does not point to a valid object.  The function
// fails if either handle does not reference an object list.
//

// ClipToAll(object_handle1, object_handle2)
//

// This is similar to the ClipTo() function, however all objects in
// the handle lists are processed.  Only the parts of the boxes,
// polygons, and wires in the second object list that overlap one of
// the objects in the first list will remain.  Labels and subcells in
// the second list are ignored.  The newly created objects are added
// to the front of the second handle list.  The return value is the
// number of new objects created, or -1 if either handle is empty or
// some other error occurred.  The function will fail if either handle
// does not reference an object list.
//

UPDATE HELP
// (int) ClipObjects(object_handle)
// 
// This function will clip boxes, polygons, and wires in the list on
// the same layer as the first such object in the list so that none of
// these objects overlap.  Newly created objects are added to the
// front of the handle list, and deleted objects are removed from the
// list.  Objects in the list that are not on the same layer as the
// first box, polygon, or wire or not boxes, polygons or wires are
// ignored.  If the merge argument is nonzero, adjacent new objects
// will be merged, otherwise the pieces will remain separate objects. 
// If successful, the number of newly creted objects is returned,
// otherwise -1 is returned.  The function will fail if the handle
// does not reference an object list.
//

Reversed the prompt/edit colors on the prompt line.

Fixed a couple of strange bugs in the script interpreter that
conspired to cause scripts to fail on the first executable line with
the message "string assignment bounds overflow" even when there are no
strings.

// (string) ToChar(num)
// 
// This function takes as its input an integer value for a character,
// and returns a string containing a printable representation of the
// character.  A null string is returned if the input is not a valid
// character index.  This function can be used to preformat character
// data for printing with the various print functions.
//

// (int) HandleCat(handle1, handle2)
//
// This function will add a copy of the list referenced by the second
// handle to the end of the list referenced by the first handle.  Both
// handles must point to handles referencing lists of the same kind.
// The return value is 1 for success, 0 otherwise.
//

System() alias for Shell()


// (int) HandleArray(handle, array)
// 
// This function will create a new handle for every object in the list
// referenced by the handle argument, and add that handle to the
// array.  Each new handle references a single object.  The array
// argument is the name of a previously defined array variable.  The
// array will be resized if necessary, if possible.  It is not
// possible to resize an array referenced through a pointer, or an
// array with pointer references.  The function returns 0 if the array
// cannot be resized and resizing is needed.  The number of new
// handles is returned, which will be 0 if the handle argument is
// empty or does not reference a list.
//
// (int) CloseArray(array, size)
//
// This function will call Close() on the first size elements of the array.
// The array is assumed to be an array of handles as returned from
// HandleArray().  The function will fail if the array is not an array
// variable.  The return value is always 1.
//

// (object_handle) ObjectHandleDup(object_handle, types)
// 
// This function creates a new handle and list of objects.  The new
// object list consists of those objects in the list referenced by the
// argument whose types are given in the string types argument.  If
// zero or an empty string is passed, all types are included,
// otherwise the characters in the string signify which objects to
// include:
//      
//      'b'   boxes
//      'p'   polygons
//      'w'   wires
//      'l'   labels
//      'c'   subcells
// 
// The return value is a handle, or 0 if an error occurred.  Note that
// the new handle may be empty if there were no matching objects.  The
// function will fail if the handle argument is not a pointer to an
// object list.
//
// (int) ObjectHandlePurge(object_handle, types)
//
// This function will purge from the list of objects referenced by the
// handle argument objects with types listed in the types string.  If
// zero or an empty string is passed, all types are deleted, otherwise
// the characters in the string signify which objects to delete:
//
//      'b'   boxes
//      'p'   polygons
//      'w'   wires
//      'l'   labels
//      'c'   subcells
//
// The return value is the number of objects remaining in the list.
// The function will fail if the handle argument does not reference a
// list of objects.
//

Modifications to the To Native command in the Convert menu.

Before conversion starts, the user is given the option of setting
the directory which will receive the created files.  If no directory
is given, the files will be created in the current directory.
While the prompt is in effect, a pop-up containing a tree listing
of the directory hierarchy rooted in the current directory appears.
The user can select a directory in the listing, or type the directory
path on the prompt line.  Pressing Esc will abort the conversion.

After conversion is complete, the user is prompted for the name
of a library file which will be written in the current directory.
This file will have references to each of the new files created,
with the top-level symbol listed first, and the others listed in
alphabetical order.  This library may be placed in the search path
to gain access to the new files through the library mechanism, in
which case the directory containing the files need not be in the
search path.  Pressing Esc will skip creating the library file.


Fixed bug
After reading in a hierarchy with empty cells, the prompt would be repeated
for the same cell if 'n' was the response, and the cell was instantiated
more than once.  If 'y' was given, the prompt for a cell correctly was issued
only once.  

Fixed some bugs in the function that opens cells through library references.
Native cell hierarchies can now always be opened through library references,
even if subcells must be resolved through complicated iindirections.
-------------------------------------------------------------

The despised .xic.lock file is gone, and there is a new precedure for
maintaining log files.

Log files are no longer written to the current directory.  Instead, they
are written to a temporary directory, which is deleted if Xic terminates
normally.

There is a new environment variable: XIC_LOGDIR
This can be set to an existing directory which will be used to store the
log files.

The log files will be placed in the following directory:
    logdir/xic.pid

logdir is the first defined of XIC_LOGDIR, XIC_TMP_DIR,  TMPDIR, or
defaults to  "/tmp".  The "pid" is the process id of the xic process.
This directory is created when Xic starts, and is deleted when Xic terminates
normally.  If Xic crashes, the log files will still be around for inspection.
If a user needs to look at a log file after running Xic, the file must be
copied to another location before exiting Xic.

This new mechanism lets multiple copies of Xic run on the same machine
from any directory, and minimizes the pollution of the file system and
in particular the current directory with a lot of generally useless
log files.

Fixed bug:  If a cell was extracted from a GDSII or CIF file, it was given
the file name of the file from which it was extracted.  When saved, the
default action would be to overwrite the original file with on containing
only that cell.

The prompt line is now a drag/drop receiver, with the same effect as
dropping files in the drawing windows.

While the prompt line editor is active, files dropped in the edit windows
or the prompt line will have their full path inserted into the prompt line
edit string.  While not editing, dropped files are opened as input files.

This means that when responding to a prompt to open a file, the File Selection
pop-up from the Open button in the file menu can be used to find the file.
The file can then be dragged into the main window and dropped, and the name
will appear on the prompt line.

The small dialog windows used if various places are now enabled as drop
receivers for files.  The path to the file will be inserted into the
text line.  Again, this allows the File Selection pop-up (or other
compatible file manager) to be used for finding the file.  Once found,
it can be dragged and dropped on the dialog.

Enhancements to the Path Selection pop-up.  There is now a File menu which
has commands to open new directories, delete and rename directories, set
a new root, or dismiss the pop-up, similar to the File Selection pop-up.
The pop-up also acts as a drag/drop source and receiver in the manner of
the tree listing in the FileSelector.

When the prompt line editor is active, pressing the Open (green octagon)
button or the Open menu entry of the File Selection pop-up will load the
selected file path into the prompt line rather than editing the cell.  This
is yet another means for selection file names.

Dynamic array allocation in scripts

If an assignment is made to an array element, and the array subscript
is out of range, the array will be expanded, if possible.  It is not
possible to expand an array referenced by a pointer, or if there are
pointers to the array.  It is also not possible to have more than
1 million entries in the array.  Previous values are retained in the
expansion.  Thus, in general, one can define a minimum sized array, and it
will automatically expand as element values are assigned.

A version of the File Selection pop-up is now shown for many of the
times when there is prompting for a file path, such as for the commands in
the Convert menu.  The Open File dialog is pretty much the same as the
File Manager, excelt that selecting a file will load that path into the
prompt line.  The Save File dialog, used in the last release, does not
list the files, but allows the user to select a directory.

The File Manager pop-up now has an "Up" menu, which drops down a list
of the parent directories.  Selecting a parent directory changes the
root of the directory tree shown to that directory, the same as pressing
the Up button (blue triangle) several times.

paragraph abour variable types, subscripting, arrays, pointers.

New button on File menu of File Selection pop-up and derivatives:
New CWD.  This allows the user to enter a new current working directory.
If the input is blank, the user's home directory will becone the new CWD.
Note that a directory can be dragged from the tree listing and dropped
on the entry dialog.

There is a new error message to appears if a script function ends (endfunc
keyword) with a block still active meaning that an "end" statement was missing.
Previously this would go unreported.

The Control-C handling was improved.  Previously, Control-C was not recognized
at all during script execution in functions, and if the Control-C happened
during a redraw, it would stop the redraw but not stop script execution.
Now, script execution should be halted reliably.

The Select() script function was responding to Ctrl/Shift keys, since the
same internal function is used in normal interactive mode.  This meant that
when single-stepping in the debugger with Ctrl-T, nothing would be selected.
The Select() function now ignores the keyboard.

The User menu now supports a mechanism for creating submenus, which
contain buttons that launch other scripts or sub-submenus.  This can
be useful for organizing the user's scripts into categories.

Submenus in the User Menu are produced by a new type of library file,
"script libraries", which (at the top level) are found in the directories
in the script search path.  The script libraries *must* have an extension
".scm" ("script menu").  The format is similar to library files:

    (Library libname);
    name1   path1
    name2   path2
    ...

The first line must be a CIF comment line in the same format as other
library files.  The libname is the name which will appear on the menu
button in the parent menu which produces the pop-up menu.  This is
often that same as the name of the file, and any ".scm" suffix will be
stripped.  Blank lines and lines starting with '#' are ignored.

The remaining lines in the file are name/path pairs, where the name is
the label that will appear on the button in the pop-up sub-menu, and
the path is a *full* path to a script file (with ".scr extension) or
another script library file (with ".scm" extension) for a sub-submenu. 
The scripts can be conveniently placed in a subdirectory of the
directory containing the script library, which is not itself in the
script path.  If the reference is to another library, the pop-up menu
will contain a button which will produce another pop-up menu
containing the referenced library's entries.  There is no limit on the
depth of the references.

Only scripts which are defined in separate files can be referenced
through a script library, not those defined in the technology file. 
Scripts defined in the technology file, and those added with the
!script command, will appear in the main User Menu.

---------------------------------------------------------------

// (string) DateString()
//
// This function returns a string containing the date and time in
// the format
//
//  Tue Jun 12 23:42:38 PDT 2001
//

Mode tests in
PopUpMergeControl()
PopUpMergeControl2()
hyeditor() (check MS)

New Xic operating mode: Daemon Mode

Xic now has the capability of operating as a daemon process, servicing
requests for processing of design data.  This allows Xic to be used as
a back-end for automation systems designed by the user or third
parties.

To start Xic in server mode, the -S option is used, as

    xic -S[port]

This causes xic to start without graphics, go to the background, and
listen to a system port for requests.  The port number used can be
provided on the command line immediately following the "-S".  If not
given on the command line, the "xic/tcp" service is queried from the
local host.  This will come up empty unless the "xic/tcp" service has
been added to the host database, usually by adding a line like the
following to the /etc/services file:

xic           3002/tcp   #Whiteley Research Inc.

where the port number 3002 is replaced by the desired port number.  If
there is no port assigned for "xic/tcp", port 3002 is used.

Thu user's application should open a socket to this port for
communications.  Only one process can access the port at a given time.

For testing and experimental purposes, the telnet program can be used
to connect to the Xic daemon.  After starting the daemon, one types

telnet hostname port

where hostname is the name of the machine running the daemon (you can
use "localhost" if running on the local machine).  The port is the
port number in use by the daemon.

The default data mode for communications is ascii mode.  In this mode,
all data are transferred as ascii text.

The text expected by the daemon is in the form of statements which can
be understood by the script interpreter, i.e., script lines.  In
addition, there are a small number of special control commands.  These
are

reset     Clear the script interpreter context
close     Close the connection to the daemon
kill      Halt the daemon process
binary    Use binary data format for returned data
ascii     Use ascii data format for returned data

All other input should be parsable by the script parser, except that
lines that start with '#' are not allowed, so no comments or preprocessor
directives are allowed.

After each line of input is given, the daemon returns a result string.  This
can take several forms:

ok>       The line was processed, and the next line can be supplied.  This
          is the basic "prompt".

-?>       The line was processed and a block is open.  This is given when
          entering internal lines in a "while" block, for example, before
          the "end" token.  The block is not executed until the "end" is
          received.

error>    The input just given produced an error.

The Ascii Format

This is the default format.
If a result is obtained from the line processed, that result is sent
before the "ok>" prompt.  The result of the line is conceptually what
would be printed if the line was given as an argument to the Print()
script function.  Most functions return some value.  Assignments return
the value assigned.  A variable name returns the value of that variable.
The return is in one of the following forms:

scalar  number
string  the string
array   number_of_elements elements

The first returned token is a keyword giving the type of data: scalar,
string, or array.  Following the keyword is the data, in ascii format:
a numeric value for "scalar", an unquoted string following a space character
following "string", or the size of an array followed by the printed array
following "array".  Note that the array returns the allocated size,
which is not necessarily the size in use.  The return data has a single
return character signifying the end of data, which is followed by the
"ok>" prompt.

The Binary Format

This format is used if the "binary" command is in effect
To be determined.

Internal script variables are defined and set in accord with instructions
received.  The variables and other context are cleared when a connection
to the server is made or broken, or when "reset" is given.

Other state, such as the current directory and cells in Xic memory, are
persistent, thus users should initialize Xic appropriately, and clear
the database before closing the connection.

While in server mode (also in batch mode) the Xic functions that query
the user for some decision are not available, since there are no graphics.
If the prompt line editor is invoked, it will return immediately as if the
user hit Enter.  The return value is the default string, if any, or any
text that was previously supplied with the StuffText() function.
The MergeControl bekavior is as if the NoAskOverwrite variable was set,
i.e., GDSII, CIF, EDIF always overwrite cells in memory, native cells
never overwrite cells in memory.

The server produces a log file directory in the same manner as normal
Xic operation.  These files are removed when the server exits normally,
i.e., when a "kill" command is received.  In server mode, there are
files used that are not used in normal mode:

daemon.log      This records connection activity to the daemon
daemon_out.log  This records the "stdout" and "stderr" channels from the
                daemon, i.e., the text that would go to the console in
                normal mode.


Merge Control & library cells ***Update MS

If there are conversion errors and electrical inconsistencies, Xic would
pop up the log file window twice.


Added a test to remove the name property of a gnd device instance if one
was assigned.  This should never happen, unless a subcell named "gnd"
overwrote the library device.

Shut up a spurrious warning message "Bad property type..." produced
during GDSII file reading.

Added a test to check if cells in GDS/CIF files have the same name as
device library files.  If so, these cells are not converted, and a
warning is placed in the log file.
The Merge Control pop-up should never list cells in a GDS/CIF file that
have the same name as library devices.
------------------------------------------------------------

The scInterpret() function is now reentrant.

the library files in the script search path are now read.

// (int) Exec(script)
//
// This function will execute a script.  The argument is a string
// giving the script name or path.  If the script is a file, it must
// have a ".scr" extension.  The ".scr" extension is optional in the
// argument.  If no path is given, the script will be opened from the
// search path or from the internal list of scripts read from the
// technology file or added with the !script command.  If a path is
// given, that file will be executed, if found.  It is also possible
// to reference a script which appears in a submenu of the User Menu
// by giving a modified path of the form "@@/libname/.../scriptname".
// The libname is the name of the script menu, the ...  indicates more
// script menus if the menu is more than one deep, and the last
// component is the name of the script.  The function returns 1 if the
// script was found, 0 otherwise.
//

!exec script_name_or_path
!listfuncs
!rmfunc regex
!display display_string win_id

// (int) Display(display_name, window, l, b, r, t)
//
// This function will render the current cell in a foreign X window. 
// The X window id is passed as an integer in the second argument. 
// The first argument is the X display string corresponding to the
// server in which the window is cached.  The remaining arguments set
// the area to be displayed, in microns.  The function returns 1 upon
// success, 0 otherwise.  This function is useful for rendering a
// layout if interactive graphics is not enabled, such as in server
// mode.  This function will not work under Microsoft Windows.
// 

This is a primitive to allow Xic to export graphics rendering capability.
The intention is that this might be used in a TK script (for example) that
is otherwise using Xic in server mode as a back-end.  The machine containing
the window to be drawn into must allow X access to the machine running the
Xic server (see the xhost unix command).

One can demonstrate the capability as follows.  The "xwininfo -children"
unix command can be used to find the window id of a suitable *child* window
in a running application.  The top-level window given from xwininfo without
the "-children" argument is generally obscured by child windows, so this won't
work.  For example, an xterm window has a single child, which is the id to
use.  In server mode, a cell must be loaded for editing with the Edit()
function.  Then, a Display command can be given, something like

    Display(":0", 0x1800015, -100, -100, 100, 100)

The ":0" is the display name for the local machine, assuming that the Xic
server is also running on this machine.  In general, this is the same as
the DISPLAY environment variable, in the form hostname:0.  The second
argument is the window id returned from xwininfo.  The remaining arguments
set the area to display.  After giving the command, the window should be
overwritten with a display similar to a drawing window in Xic.  However,
if the window is redrawn, it will revert to its previous contents.  The
user must set up expose event handling in a real application.  The
suggested way to do this is to pass the id of a pixmap to Xic, and then
copy the pixmap to the destination window.  This is usually faster than
a direct write, and the pixmap can be used for backing store for expose
events.


// (int) CurCellBB(array)
//
// This function will return the bounding box of the current cell, in
// microns, in the array, as l, b, r, t.  The array must have size 4
// or larger.  The function returns 1 on success, 0 if there is no
// current cell.
//

The script parser now recognizes hes constants in the form
    0xHEXNUM

Fixed a condition that would hang the daemon on certain errors.

If the XTNETDEBUG environment is defined, xic -S will not go into the
background, but still service requests and print messages to the standard
output.  This may be useful for debugging.

The original protocol for server mode was difficult to work with from
tcl, so the protocol has been changed slightly.  All messages are now
terminated with the network standard "\r\n" sequence, plus a trailing
null byte.  The messages are thus

  "ok> \r\n"                              ok
  "-?> \r\n"                              in block, waiting for "end"
  "error> \r\n"                           error
  "scalar <val>\r\nok \r\n"               scalar data
  "string <string>\r\nok> \r\n"           string data
  "array <size> <data...>\r\nok> \r\n"    array data

------------------------------------

Print Command -> Printer (MSW)

The Select() command server/big window bug fixed.
the Select() function now uses "strict area" mode, meaning that any object
or subcell touching or on the selection area is selected, same as area mode
All in pop-up.

in layer specific selections, only subcells that contain something on the
current layer are selected.

In server/batch mode, should never write modified cells.

server protocol change, ascii mode
   1) never send \0
   2) don't send "ok" aftger scalar/string/array

-----------------------------------------------

Fixed a bug in stretch command - manhattan polygon wouldn't stretch right
if the vertex stretched was the last one in the internal vertex list.

Due to a bug introduced recently, the preferences script, and probably
others, would crash the program.

There were some changes to the Paths and Quick Paths command.
  1)  If layer-specific selection is enabled, one must click on an object
   on the current layer to view the path.  All connected and displayable
   objects will be shown in the path, on any conducting layer.
  2)  Fixed a bug in the Paths command that prevented showing the connected
   objects if the clicked-on object was metal in a subcell that
   contained no devices, or was otherwise internally "flattened"
   during extraction.  These subcells have their metal placed
   temporarily in the parent cell (recursively) so objects in the path
   may be highlighted even when they apparently should not be
   according to their depth in the cell hierarchy.

PromptTextColor maroon -> darkblue

New grouping algorithm found.  Huge speed increase in grouping for
large numbers of objects.

New trapezoid clip/merge function, big speed increase.

Various tweeks in extraction to try and speed things up.

Before: setting up extraction for a large file took "infinite" time, i.e.,
the cpu overheated and turned the system off before the operation completed.
After: Setting up extraction on the same file takes about a minute.

If a large number of objects were added/deleted (thousands) there was
a large delay due to undo list processing.  This has been almost
eliminated.

The Measure state in tech file device blocks has an optional new parameter:

  Measure name expression [precision]

The precision is an integer which is used when comparing electrical and
physical values.  The default is 2 if not given.  The precision is a negative
power of 10  used for comparison testing.  The default 2 means that the values
must agree to 1 percent, 3 would indicate .1 percent, and so on.

The Dump Phys Netlist and Dump Elec Netlist now include an entry for the
ouptut file name in the pop-up.  The entry area is active as a drag receiver.

The Source button in the properties pop-up now pops up a small panel which
allows some defaults to be set, as will as the file name.  The entry area
is active as a drop receiver.

New variable "SourceClear".  When set,  the default action for the !source
and !exset commands is to clear the old electrical information from cells
before processing input.

The Source button has been removed from the Properties pop-up.  The same
function is available from the new "Source SPICE" in the extract menu.

There is a new "Source Physical" button in the extract menu.  This command
works like the !exset command.

    // !exset [-[n]a] [-[n]c] [-[n]f] [depth]

    // !source [-[n]a] [-[n]c] [-[n]f] filename

New variable: NoMeasure
This turns off the extraction of parametric data for devices in the
extraction system.  This is mainly for debugging, but may save time
if the user is interested in topology only.  The measurements can be
time consuming.

When measuring, as for printing a spice file, ^C should now terminate
the operation.

Fixed small problem with the logic of the Search button in the Cells Listing
pop-up.  Also, Info button.

The Flatten command now has a feedback output for progress monitoring.
-----------------------------------------------------------------

There is a new Font menu item in the Options menu of the text editor
pop-up class (which includes the file browser and mail client).  This
brings up a tool for selecting the font to use in the text window.
Selecting a font will change the present font, and will set the default
font for new text editor windows.

Unless a font is set with the Font button, text editor windows will use
a font defined in the XEDITOR_FONT environment variable.  The variable
can be set to the name of an X font.

!test - set forn for logos, change name

LogoPretty  (boolean)
When set, the logo command will use a font derived from the screen fonts
supplied by the X window system.

LogoPrettyFont
Name of the X font used in the logo command (set by !test).

Check this out...

The variables that must be checked in set/unset are now in a symbol
table.

Changed core functions that maintain the instance lists to avoid searching
through lists every time a subcell is added or deleted.  This searching
caused a dramatic slowdown when reading in cells with large numbers of
instances.

More bug fixes in grouping/extraction.  The numeric keypad +/- keys now
zoom the display in Show Paths and Quick Paths, rather than acting like
the regular +/- keys.

The "mark" used with sInfo is now a vector - changes to fixRefsAndBB()
and unmark()

Xic now tests for two or more subcells placed in the same location with same
transform.

The Selection Control panel which is brought up by the layer button in the
side menu has a new column of buttons labeled "Objects".  The buttons
are labeled "Cells", "Boxes", "Polys", "Wires", and "Labels".  These
buttons control whether or not the indicated type of object can be
selected or deselected with the mouse.  This is particularly useful when
one needs to select cells that are covered by geometric objects, since
the geometric objects will always be selected with a mouse click, and not
the cells.  The buttons allow selections to be performed only on cells.

Check getcwd() calls for return 0 in msw
get drive some other way!

Improved handling in the situation where the current directory does not
exist, e.g. has been deleted through another application.

The From GDSII command was broken, returning always with an error message.
also From CIF, From EDIF

// (string) FileName()
//
// This function returns the name of the file from which the current
// cell was read.  If there is no such file, a null string is 
// returned.
//

// (object_handle) FlatObjList(l, b, r, t, depth)
// 
// This function provides access to the "pseudo-flat" object access
// functions that are part of internal DRC routines in Xic.  This
// enables cycling through objects in the database without regard to
// the cell hierarchy.  Each object is a copy of the actual database
// object, transformed to the coordinate space of the current cell.
// The arguments are the coordinates in microns of the bounding box to
// search in.  The depth is the search depth, which can be an integer
// 0 or larger which sets the maximum depth to search (0 means search
// the current cell only, 1 means search the current cell plus the
// subcells, etc).  This argument can also be a string starting with
// 'a' such as "a" or "all" which indicates to search the entire
// hierarchy.
// 
// The return value is a list of box, polygon, and wire objects found
// in the given region on the current layer.  Label and subcell
// objects are never returned.  The returned list behaves in most
// respects like an ordinary object list, except that the objects can
// not be modified.  The functions that modify objects will fail
// quietly (returning 0).  The ObjectCopy() function can be used to
// create a new database object from a returned object.  The returned
// objects can be used in the first argument to the clipping functions
// such as ClipTo(), but not the second.  The handle manuipulation
// functions such as HandleCat() work, but lists of copies can not be
// mixed with lists of database objects, HandleCat() will fail quietly
// if this is attempted.
//
// The copies of the objects can use substantial memory if the list is
// very long.  The FlatObjGen() function provides another access
// interface that can use less memory.
//

// (handle) FlatObjGen(l, b, r, t, depth)
//
// This function provides access to the "pseudo-flat" object access
// functions that are part of internal DRC routines in Xic.  This
// enables cycling through objects in the database without regard to
// the cell hierarchy.  Each object is a copy of the actual database
// object, transformed to the coordinate space of the current cell.
// The arguments are the coordinates in microns of the bounding box to
// search in.  The depth is the search depth, which can be an integer
// 0 or larger which sets the maximum depth to search (0 means search
// the current cell only, 1 means search the current cell plus the
// subcells, etc).  This argument can also be a string starting with
// 'a' such as "a" or "all" which indicates to search the entire
// hierarchy.
//
// This function returns a special handle which is passed to the
// FlatGenNext() function to actually retrieve the objects.  Although
// this handle can be passed to the generic handle functions, most of
// these functions will have no effect.  HandleContent() will return
// 1, or 0 if the handle is exhausted.  Handle next will advance to
// the next object without saving the object.  The other functions
// will return 0 and do nothing.  The Close() function should be
// called to delete the handle unless the handle is iterated to
// completion with FlatGenNext() or HandleNext().
//

// (object_handle) FlatGenNext(handle)
//
// This function takes as an argument the handle returned from
// FlatObjGen(), and returns an object handle which contains a single
// object returned from the generator.  The object is a copy, and the
// comments regarding this type of object list in the description of
// the FlatObjList() function apply.  The returned handles should be
// closed after use by calling Close(), or by calling an iterating
// function such as HandleNext() or ObjectNext().
//
// A new handle is returned for each call of this function, until no
// further objects are available in which case this function returns
// 0, and the handle passed as the argument will be closed.  This
// function and FlatObjGen() allow access to the generated object
// copies while providing greater control over how many such copies
// are currently in memory than the FlatObjList() function.
//

// (int) GetCurAngle()
//
// Returns the rotation angle of the current transform, in degrees.  
// This is 0, 45, 90, 135, 180, 225, 270, 315 in physical mode, or 0,
// 90, 180, 270 in electrical mode.  The SetTransform() function can  
// be used to set the rotation angle.
//

// (int) GetCurMX()
//
// Returns 1 if the current transform mirrors the x-axis, 0 otherwise.
// The SetTransform() function can be used to set the mirror          
// transformations.
//

// (int) GetCurMY()
//
// Returns 1 if the current transform mirrors the y-axis, 0 otherwise.
// The SetTransform() function can be used to set the mirror
// transformations.
//

// (real) GetCurMagn()
//
// Returns the magnification component of the current transform.  The
// SetTransform() function can be used to set the magnification.
// 

Completely revised the transformation structure for instances.  Previously
the transformation consisted of a linked list of transform primitives, attached
to each instance.
Now, the transformation is saved in an irreducible form within the instance
structure.  This should be more efficient with respect to storage and
computation.  Aside from (perhaps) a speed increase, this should be invisible
to the user.

Note:  The irreducible form is an optional mirror-y, followed by an optional
rotation, followed by the translation.  This maps directly to the format
used in GDS files.  However, the "current transform" applies rotation
before the mirror, so that on screen, a mirror-x, for example, will flip
the object's x coordinates independent of any rotation angle, which is
what users tend to expect.  The transform string printed on unexpanded
instances and on the status line reflects this, i.e., forms like
"R45M" imply a 45 degree rotation followed by a mirror-y ("M" always
denotes mirror-y, mirror-x is equivalent to some other rotation and
mirror-y combination).  However, the transformation shown in an info window
will be mirror-y followed by a 315 degree rotation, since the internal
representation does the mirror first.

// (int) GetInstanceXformA(object_handle, array)
//
// This function fills in the array, which must have size 4 or larger,
// with the components of the transformation of the instance
// referenced by the handle.  The values are:
//  array[0]    1 if mirror-y, 0 if no mirror-y
//  array[1]    angle in degrees
//  array[2]    translation x
//  array[3]    translation y
// This is the same data as provided by the GetInstanceXform()
// function, but in numerical rather than string form.  The transform 
// components are applied in the order as found in the array, i.e.,   
// mirror first, then rotate, then translate.  The function returns 1
// if successful, 0 otherwise.  It will fail if the handle passed is  
// not a handle to an object list.
//

// (int) SetInstanceXformA(object_handle, array)
// 
// This function applies the given transform parameters in the array
// to the instance referenced by the handle.  The parameters are:
//  array[0]    1 if mirror-y, 0 if no mirror-y
//  array[1]    angle in degrees
//  array[2]    translation x in microns
//  array[3]    translation y in microns
// Only physical-mode subcells can be modified by this function.  If
// the operation succeeds, 1 is returned, otherwise 0 is returned.
// The transform components are applied in the order as found in the
// array, i.e., mirror first, then rotate, then translate.  The
// function returns 1 if successful, 0 otherwise.  It will fail if the
// handle passed is not a handle to an object list.
//

-----
Fixed bug in database: CDg gLdesc pointed to element of volatile array,
fixed by replacing with offset.

Fixed bug:  If a '!' command line had trailing white space, the program
would likely crash.
  note to Haus: !select l R3$

New techfile keywords
PhysGridOnBottom
ElecGridOnBottom
AltGridOnBottom
AltPhysGridOnBottom
AltElecGridOnBottom

Bug: If the grid was changed with the Set Grid command, a new technology
file generated with the Save Tech command would not reflect the new grid.

// (int) GetObjectID(object_handle)
//
// This function returns a unique id number for the object.  The id is
// actually the address of the object in the process memory, so it is
// valid only for the current Xic process.  If the referenced object
// is a copy, the id returned is the address of the real object, not
// the copy.  If no object is referenced by the handle, 0 is returned. 
// The function fails if the handle is not an object list type.
//

Fixed a bug that would crash the program on Undo after a Flatten
if the cell was regrouped, and the MultiNet option of a clear field
ground plane was used.

// (string) ToFormat(fmtstring, variable)
//
// This function returns a string, formatted in the manner of the C
// printf function.  The first argument is a format string, as would
// be given to printf.  The second argument is a string or scalar
// variable to be formatted (arrays are not accepted).  If formatting
// fails, a null string is returned, otherwise the formatted text is
// returned.  The function fails if the first argument is not a string
// or is null.
//
---------------------------------------------------
2.4.56 release
---------------------------------------------------
