
!!  ---------------------------------------------------------------
!!  Xic/WRspice Help System Database
!!  $Id: FileTool.hlp,v 1.3 2009/08/02 21:52:46 stevew Exp $
!!  Copyright (C) Whiteley Research Inc. 2009.  All Rights Reserved
!!  ---------------------------------------------------------------

!!HEADER
    <table border=1 width=100% cellpadding=0 cellspacing=0>
    <tr><td bgcolor=white><img src=wrbannermain.gif width=300 align=left>
!!IFDEF Windows
    <font face=utopia color=royalblue size=4>
!!ELSE
    <font face=utopia color=royalblue size=5>
!!ENDIF
    <br>&nbsp;&nbsp;<i>FileTool</i> Help System</font></td></tr>
    <tr><td bgcolor=white height=40>
    <font face=utopia color="#dd0000" size=5>&nbsp;&nbsp;%TITLE%</font></td></tr>
    </table><p>

!!FOOTER
    <p><hr><font size=3 face=utopia color=darkblue>
    &#169; Whiteley Research Inc. 2009, All Rights Reserved.</font>

!!TAGTEXT
    <table border=1 width=100% cellpadding=0 cellspacing=0>
    <tr><td bgcolor=white height=30>
    <font face=utopia color="#dd0000" size=4>&nbsp;&nbsp;
    Supplemental Information From %TAG% Help System</font></td></tr>
    </table><p>

!!MAINTAG FileTool

!!KEYWORD
FileTool.hlp
!!TITLE
FileTool.hlp
!!HTML

!!SUBTOPICS
filetool


!!KEYWORD
filetool
!!TITLE
The FileTool Utility
!!HTML
    <h2>Introduction</h2>

    The <i>FileTool</i> is a command-line program for analysis and
    manipulation of layout files.  It is intended to be incorporated
    in the user's automation scripts to implement complicated
    manipulations on layout files, and as an aid to understanding
    content and diagnosing problems with layout files.

    <p>
    Here are some of the tasks that the <i>FileTool</i> can perform:

    <ul)
    <li>Print information about a layout file: statistics, layers used,
     top-level cell, etc.
    <li>Translate layout files, or parts of layout files, to an ASCII
     text representation.
    <li>Compare two layout files, listing the differences.
    <li>Split a layout file into multiple files, each representing 
     a portion of the original layout.
    <li>Combine cells from multiple layout files into a single file.
    <li>Convert between file formats (CIF, CGX, GDSII, OASIS are
     supported).
    <li>When writing, many different translation modes are available:
     layer filtering and aliasing, cell name mapping operations, windowing
     with or without clipping, flattening, scaling, empty cell removal.
    <li>Generate or process assemble scripts as used by the <i>Xic</i>
!!IFDEF Xic
     <a href="!assemble"><b>!assemble</b></a>
!!ELSE
     <b>!assemble</i>
!!ENDIF
     command.
    </ul>

    <p>
    The file formats supported by the <i>FileTool</i> are:

    <dl>
    <dt><b>GDSII</b><dd>
    The industry standard stream format.  Any release level is
    supported for input.  For output, the default release level is 7,
    but this can be set to earlier levels.  Compressed (gzipped) GDSII
    files can be read or written.
    </dl>

    <dl>
    <dt><b>OASIS</b><dd>
    The emerging standard, which provides more compact data files than
    GDSII.  Any conforming OASIS file can be read as input.  A number
    of options affect OASIS output.
    </dl>

    <dl>
    <dt><b>CGX</b><dd>
    A compact data representation developed by Whiteley Research Inc.
    Compressed (gzipped) CGX files can be read or written.
    </dl>

    <dl>
    <dt><b>CIF</b><dd>
    The obsolete but still used CIF format.  Any known dialect should
    work as input.  The output dialect can be selected via options.
    </dl>

    <p>
    Input files can be any of these file types, the format is
    recognized by context.  Output files can also be any of these file
    types, but the format is specified by the extension of the file
    name.

    <p>
    The operations can be saved to a script file, or read from a
    script file.  The script file format is the same as used by the
    !assemble command in <i>Xic</i>, thus scripts generated by the
    <i>FileTool</i> can be executed in <i>Xic</i>.

    <h2>Command Line Options</h2>

    If <i>FileTool</i> is executed without arguments, a synopsis of
    available command line options is printed.  Otherwise, the
    arguments are given in one of the following forms.

    <dl>
    <dt><tt>filetool</tt><dd>
    [<tt>-set</tt> <i>var</i>[=<i>value</i>] ...]<br>
    <tt>-eval</tt> <i>script_file_to_read</i> |<br>
    <tt>-info</tt> <i>layout_file</i> [<i>flags</i>] |<br>
    <tt>-text</tt> <i>layout_file</i> [<i>text_opts</i>] |<br>
    <tt>-comp</tt> <i>layout_file1 layout_file2</i> [<i>comp_opts</i>] |<br>
    <tt>-split</tt> <i>split_opts</i> |<br>
    <i>translate_opts</i>
    </dl>

    <p>
    The <a href="ft:set"><tt>-set</tt></a> option is used to set internal
    variables, which have relevance in the modes indicated by the other
    main options.

    <p>
    The <a href="ft:eval"><tt>-eval</tt></a> option is used to execute an
    assemble script.

    <p>
    The <a href="ft:info"><tt>-info</tt></a> option is used to obtain
    information and statistics about a layout file.

    <p>
    The <a href="ft:text"><tt>-text</tt></a> option will translate all
    or part of a layout file to an ASCII text representation.

    <p>
    The <a href="ft:comp"><tt>-comp</tt></a> option will set up a
    comparison of two layout files, recording differences.

    <p>
    The <a href="ft:split"><tt>-split</tt></a> option is used to write
    multiple layout files corresponding to regions in a large layout.

    <p>
    Otherwise, the given options are expected to provide directives similar
    in logic to that of an assembly script.

!!KEYWORD
ft:set
!!TITLE
FileTool:  Setting Variables
!!HTML
    There are a number of internal variables which control various
    properties of the file readers/writers, translation modes, etc. 
    These are the same variables as used in <i>Xic</i>.  In some
    cases, these variables are overridden by command line options, but
    in cases where no applicable option exists, these variables can be
    set to provide the desired effect.

    <p>
    The <tt>-set</tt> options must appear first on the command line,
    and unlike the other main directives, can appear ahead of the
    other directives.  These are optional.

    <p>
    The format can take two forms:  either a single <tt>-set</tt>
    option followed by a quoted list of <i>name</i>=<i>value</i>
    pairs:
    <blockquote>
    <tt>-set</tt> "<i>name1</i>=<i>value1</i> <i>name2</i>
      <i>name3</i>=<i>value3</i> ..."
    </blockquote>
    or, each <i>name</i>=<i>value</i> pair can have its own "<tt>-set</tt>":
    <blockquote>
    <tt>-set</tt> <i>name1</i>=<i>value1</i> <tt>-set</tt> <i>name2</i>
      <tt>-set</tt> <i>name3</i>=<i>value3</i>
    </blockquote>

    <p>
    Note that the value part is optional, for boolean variables.  The
    token following each "<tt>-set</tt>" must not contain white space,
    or be quoted if it contains white space, e.g.,
    <blockquote>
    <tt>-set</tt> "<i>name</i> = <i>value</i>"
    </blockquote>
    is legitimate.

The following variables have relevance:

XXXXXXX list variables

!!SEEALSO
filetool

!!KEYWORD
ft:eval
!!TITLE
FileTool:  Assemble Script File Evaluation
!!HTML
    Assemble script files can be produced by <i>Xic</i>, and contain a
    specification for complicated operations on layout files, such as
    merging several files into a single output file, while creating a
    new top-level cell to contain instances of the cells read from
    input.  These files can be evaluaated with the <i>FileTool</i>.

    <p>
    The command is of the form
    <blockquote>
    <tt>filetool</tt> [<tt>-set</tt> <i>variables</i>] <tt>-eval</tt>
      <i>script_file</i>
    </blockquote>

    <p>
    The <i>FileTool</i> will read and execute the script, reading
    input and generating output as per the directives in the script
    file.

    <p>
    The script file format is described <a href="ft:assem">here</a>.

!!SEEALSO
filetool

!!KEYWORD
ft:info
!!TITLE
FileTool:  Obtaining File Information
!!HTML
    In this mode, the <i>FileTool</i> will read a layout file, and
    print useful information about the file.  The command line for
    this mode is
    <blockquote>
    <tt>filetool</tt> [<tt>-set</tt> <i>variables</i>] <tt>-info</tt>
      <i>filename</i> [<i>flags</i>]
    </blockquote>

    <p>
    It is unlikely that the <tt>-set</tt> variables will be used with
    this option, though the layer filtering options may apply on
    occasion.

    <p>
    The optional following argument is an integer or string which
    determines the type of information to return.  If an integer, the
    bits are flags that control the possible data fields and printing
    modes.  The string form is a space or comma-separated list of text
    tokens (from the list below, case insensitive) or hex integers. 
    The hex numbers or equivalent values for the text tokens are or'ed
    together to form the flags integer.

    <p>
    If this argument is 0 or not given, all flags except for
    <tt>allcells</tt>, <tt>instances</tt>, and <tt>flags</tt> are
    implied.  Thus, the sometimes very lengthly cells/instances
    listing is skipped by default.  To obtain all available
    information, pass -1 or "<tt>all</tt>" as the <i>flags</i> value.

    <p>
    The following table provides the keywords and equivalent hex values.

    <dl>
    <dt><tt>filename</tt> (0x1)<dd>
      Print the name of the archive file for which the information
      applies.
    </dl>

    <dl>
    <dt><tt>filetype</tt> (0x2)<dd>
      Print a string giving the format of the archive file:  one of
      "CIF", "CGX", "GDSII", or "OASIS".
    </dl>

    <dl>
    <dt><tt>scale</tt> (0x4)<dd>
      This is unused, and will always print "1.0".
    </dl>

    <dl>
    <dt><tt>alias</tt> (0x8)<dd>
      This is unused.
    </dl>

    <dl>
    <dt><tt>reccounts</tt> (0x10)<dd>
      Print a table of the counts for record types found in the
      archive.  This is format-dependent.
    </dl>

    <dl>
    <dt><tt>objcounts</tt> (0x20)<dd>
      Print a table of object counts found in the archive file.  The
      table contains the following keywords, each followed by a
      number.

      <table border=0>
      <tr><td><tt>Records</tt></td> <td>Total record count</td></tr>
      <tr><td><tt>Cells</tt></td> <td>Number of cell definitions</td></tr>
      <tr><td><tt>Boxes</tt></td> <td>Number of rectangles</td></tr>
      <tr><td><tt>Polygons</tt></td> <td>Number of polygons</td></tr>
      <tr><td><tt>Wires</tt></td> <td>Number of wire paths</td></tr>
      <tr><td><tt>Avg Verts</tt></td> <td>Average vertex count per poly or
        wire</td></tr>
      <tr><td><tt>Labels</tt></td> <td>Number of (non-physical) labels</td></tr>
      <tr><td><tt>Srefs</tt></td> <td>Number of non-arrayed instances</td></tr>
      <tr><td><tt>Arefs</tt></td> <td>Number of arrayed instances</td></tr>
      </table>
    </dl>

    <dl>
    <dt><tt>depthcnts</tt> (0x40)<dd>
      A table of the number of cell instantiations at each hierarchy
      level is printed, for each top-level cell found in the file. 
      The count for depth 0 is 1 (the top-level cell), the count at
      depth 1 is the number of subcells of the top-level cell, depth 2
      is the number of subcells of these subcells, etc.  Arrays are
      given one count, the same as a single instance.
    </dl>

    <dl>
    <dt><tt>estsize</tt> (0x80)<dd>
      This flag will enable printing of the estimated memory required
      to read the entire file into <i>Xic</i>.  The system must be
      able to provide at least this much memory for a read to succeed.
    </dl>

    <dl>
    <dt><tt>estchdsize</tt> (0x100)<dd>
      Print an estimate of the memory required by the present CHD.

      <p>
      By default, a compression mechanism is used to reduce the data
      storage needed for instance lists.  The <a
      href="NoCompressContext"><b>NoCompressContext</b></a> variable,
      if set, will turn off use of compression.  If compression is
      used, the <tt>extchdsize</tt> field will include compression
      statistics.  The "ratio" is the space actually used to the space
      used if not compressed.
    </dl>

    <dl>
    <dt><tt>layers</tt> (0x200)<dd>
      Print a list of the layer names encountered in the file.  For
      GDSII and OASIS files, the name will be a four-digit hex number
      specifying the layer number and datatype number as LLDD.
    </dl>

    <dl>
    <dt><tt>unresolved</tt> (0x400)<dd>
      This will list cells that are referenced but not defined in the
      file.  These will also be listed if <tt>allcells</tt> is given.
    </dl>

    <dl>
    <dt><tt>topcells</tt> (0x800)<dd>
      List the top-level cells, i.e., the cells in the file that are
      not used as a subcell by another cell in the file.  If
      <tt>allcells</tt> is also given, only the names are listed,
      otherwise the cells are listed including the <tt>offset</tt>,
      <tt>instances</tt>, <tt>bbs</tt>, and <tt>flags</tt> fields if
      these flags are set.  The list will be sorted as per
      <tt>offsort</tt>.
    </dl>

    <dl>
    <dt><tt>allcells</tt> (0x1000)<dd>
      All cells found in the file are listed by name, including the
      <tt>offset</tt>, <tt>instances</tt>, <tt>bbs</tt>, and
      <tt>flags</tt> fields if these flags are also given.  The list
      will be sorted as per <tt>offsort</tt>.
    </dl>

    <p>
    The following flags apply only if at least one of
    <tt>topcells</tt> or <tt>allcells</tt> is given.

    <dl>
    <dt><tt>offsort</tt> (0x2000)<dd>
      If this flag is set, the cells will be listed in ascending order
      of the file offset, i.e., in the order in which the cell
      definitions appear in the archive file.  If not set, cells are
      listed alphabetically.
    </dl>

    <dl>
    <dt><tt>offset</tt> (0x4000)<dd>
      When set, the cell name is followed by the offset of the cell
      definition record in the archive file.  This is given as a
      decimal number enclosed in square brackets.
    </dl>

    <dl>
    <dt><tt>instances</tt> (0x8000)<dd>
      For each cell, the subcells used in the cell are listed.  The
      subcell names are indented and listed below the cell name.
    </dl>

    <dl>
    <dt><tt>bbs</tt> (0x10000)<dd>
      For each cell the bounding box is shown, in L,B R,T form.  For
      subcells, the position, transformation, and array parameters are
      shown.  Coordinates are given in microns.  The subcell
      transformation and array parameters are represented by a
      concatenation of the following tokens, which follow the subcell
      reference position.  These are similar to the transformation
      tokens found in CIF, and have the same meanings.

      <table border=0>
      <tr><td><tt>MY</tt></td> <td>Mirror about the x-axis.</td></tr>
      <tr><td><tt>R</tt><i>i</i>,<i>j</i></td>
        <td>Rotate by an angle given by the vector <i>i</i>,<i>j</i>.
      <tr><td><tt>M</td><i>mag</i></td> <td>Magnify by mag.
      <tr><td><tt>A</tt><i>nx</i>,<i>ny</i>,<i>dx</i>,<i>dy</i></td>
        <td>Specifies an array, <i>nx</i> X <i>ny</i> with spacings
        <i>dx</i>,<i>dy</i>.</td></tr>
      </table>
    </dl>

    <dl>
    <td><tt>flags</tt> (0x20000)<dd>
      This will display some flag values, none of which are used.
    </dl>

    <dl>
    <dt><tt>all</tt> (0xffffffff)<dd>
      This enables all flags.
    </dl>

!!SEEALSO
filetool

!!KEYWORD
ft:text
!!TITLE
FileTool:  ASCII Text Representation of Layout Files
!!HTML
    The supported file formats other than CIF are binary, and thus the
    content is not easy to decipher.  This mode of the <i>FileTool</i>
    will convert records from a layout file into an ASCII
    representation.  This may be valuable for identifying problems in
    the file or understanding file organization and content.

    <p>
    For this mode, the command takes the form:
    <blockquote>
    <tt>filetool</tt> [<tt>-set</tt> <i>variables</i>] <tt>-text</tt>
        <i>layout_file</i> [<tt>-o</tt> <i>output_file</i>]
        [<i>start</i>[-<i>end</i>]] [<tt>-c</tt> <i>cells</i>]
        [<tt>-r</tt> <i>recs</i>]
    </blockquote>

    <p>
    Following the layout file path, there are optional arguments.

    <dl>
    <dt><tt>-o</tt> <i>output_file</i><dd>
      If this is given, the text output will be placed in the supplied
      file name.  Without this option given, text output is to the
      standard output.
    </dl>

    <p>
    The remaining arguments control the range of text conversion. 
    Without these options, the entire file will be written as ASCII
    text.  For all but tiny layout files, the user will probably want
    to limit the size of the output.

    <dl>
    <dt>[<i>start</i>[-<i>end</i>]]<dd>
      The <i>start</i> and <i>end</i> are file offsets, which can be
      given in decimal or "0x" hex form.  Printing will start with the
      first record with offset greater than or equal to <i>start</i>. 
      If <i>end</i> is given, the last record printed will be at most
      the record containing this offset.  If both numbers are given,
      they must be separated by a '-' with no white space.
    </dl>

    <dl>
    <dt><tt>-c</tt> <i>cells</i><dd>
      This options supplies a count, indicating the number of cell
      definitions that will be printed.  If the count is 0, and
      <i>start</i> is also given, the records from <i>start</i> to the
      end of the cell definition will be printed.
    </dl>

    <dl>
    <dt><tt>-r</tt> <i>recs</i><dd>
      This provides a count of the number of records to print. 
      Printing will stop after the indicated number of records have
      been output.
    </dl>

    <p>
    Printing will start at the beginning of the file or the
    <i>start</i> record if given, and will end at the end of file or
    the point at which the first end condition is satisfied.

    <p>
    There are two variables which may be of interest when using this
    mode.  These can be set with <tt>-set</tt> options ahead of the
    <tt>-text</tt> argument.

    <dl>
    <dt><tt>OasPrintNoWrap</tt><br>
    Value: boolean<dd>
      This applies when converting OASIS input to ASCII text.  When
      set, the text output for a single record will occupy one
      (arbitrarily long) line.  When not set, lines are broken and
      continued with indentation.
    </dl>

    <dl>
    <dr><tt>OasPrintOffset</tt><br>
    Value: boolean<dd>
      This applies when converting OASIS input to ASCII text.  When
      set, the first token for each record output gives the offset in
      the file or containing CBLOCK.  When not set, file offsets are
      not printed.
    </dl>

!!SEEALSO
filetool

!!KEYWORD
ft:comp
!!TITLE
FileTool:  Layout File Comparison
!!HTML
    This mode compares the geometry and instance placements in cells
    from two cell hierarchies, usually from different files.  The
    results are written to a log file.

    <p>
    The command line format for this mode is
    <blockquote>
    <tt>filetool</tt> [<tt>-set</tt> <i>variables</i>] <i>layout_file1</i>
      <i>layout_file2</i> [<i>comp_opts</i>]
    </blockquote>

    <p>
    The layout file that is listed first is the "reference" when the
    list of cells to compare is generated, so there is an asymmetry
    that should be kept in mind, which will be further discussed with
    the cell list entry below.

    <p>
    Beyond the layout file names, there is a large number of arguments
    that are applied to set various modes and provide further input. 
    These arguments must be given as separate tokens, and all start
    with a '-' symbol.

    <p>
    There are three basic comparison modes.  The per-cell object mode
    compares cell content object-to-object.  A difference will be
    indicated if a given object does not have an exact counterpart in
    the other cell.  The per-cell geometry mode does not look at
    objects, but rather considers the area occupied by the objects. 
    Thus, differences will be indicated only if the covered area
    differs.  The third comparison mode logically flattens the
    hierarchy before comparing the geometry.  Thus, differences will
    be indicated only if the flat geometry (i.e., the mask layout)
    differs.

    <p>
    The results are written to a file named "<tt>diff.log</tt>" in the
    current directory.  Each object or region that appears in one cell
    and not the other corresponding cell is written in a CIF-like
    format to the log file, unless the <tt>-d</tt> (diff only) option
    is given.  The
!!IFDEF Xic
    <a href="!diffcells"><b>!diffcells</b></a>
!!ELSE
    <b>!diffcells</b>
!!ENDIF
    command in <i>Xic</i> can be used to create cells from the log
    file for visualizing the differences.

    <h2>Common Options</h2>

    The following options apply to all comparison modes.

    <dl>
    <dt><tt>-c1</tt> <i>cellname</tt> ...<dd>
      This is a list of cell names found in <i>layout_file1</i>.  If
      more than one name appears, the list should be quoted using
      double-quote marks.
    </dl>

    <dl>
    <dt><tt>-c2</tt> <i>cellname</i> ...<dd>
      This is a list of equivalent cell names found in
      <i>layout_file2</i>.  If more that one name appears, the list
      should be quoted using double-quote marks.

      <p>
      The actual list of cells to compare is generated by logic to be
      described.  The first layout file is taken as the "reference"
      for cell list creation.

      <p>
      Generally, there is only one list of cells to compare, and each
      cell is sought in both sources.  If a cell is found in one
      source and not the other, this will appear in the log file, but
      is not considered to be an error.

      <p>
      The exception to the single list rule is when cell names appear
      in the <tt>-c2</tt> "equivalence" list.  If a <tt>-c2</tt> list
      is given, there must be exactly the same number of entries given
      in the <tt>-c1</tt> list.  The cells in the two lists will be
      compared term-by-term, in order.  This is how one can compare
      cells with differing names.  In all other cases, the
      <tt>-c2</tt> list should not appear.  It is an error if
      <tt>-c2</tt> is given without <tt>-c1</tt>, or the list lengths
      differ.  The <tt>-c2</tt> list is ignored if in per-cell
      comparison mode and the <tt>-h</tt> (recurse) option is given.

      <p>
      The interpretation of a non-existing <tt>-c1</tt> list depends
      on the comparison mode.  If in flat comparison mode, or in a
      per-cell mode and the <tt>-h</tt> (recurse) option is given,
      then the assumed cell list contains only the default cell from
      the first layout file given.

      <p>
      In the other cases, a missing <tt>-c1</tt> list is interpreted
      as all cells found in the first layout file given.

      <p>
      In the per-cell modes with <tt>-h</tt> (recurse) option given,
      each entry in the <tt>-c1</tt> list is hierarchically expanded
      to a full list of the cells under the given cell, and these
      names are merged into a new list that contains no duplicates. 
      If no <tt>-c1</tt> list was given, per the discussion above, the
      cell list is effectively the hierarchy of the default cell from
      the first layout file.

      <p>
      The "default cell" from the layout file is the first top-level
      cell found in the file.
    </dl>

    <dl>
    <dt><tt>-l</tt> <i>layer_list</i><dd>
      The <i>layer_list</i> is a space-separated list of layer names,
      which must be quoted if more than one layer appears.  If no
      <i>layer_list</i> is given, all layers will be checked for
      differences.
    </dl>

    <dl>
    <dt><tt>-s</tt><dd>
      If a <i>layer_list</i> is given, differences will be recorded in
      all layers except the layers in the <i>layer_list</i>.
    </dl>

    <dl>
    <dt><tt>-d</tt><dd>
      Don't record the actual differences, only whether or not the
      cells differ.
    </dl>

    <dl>
    <dt><tt>-r</tt> <i>max_diffs</i>
      The integer <i>max_diffs</i> sets the maximum number of
      differences to allow before the comparison terminates.  If not
      given or given a value 0, there is no limit.  Beware that errors
      in the cell list could potentially lead to enormous output, so
      it is usually advisable to put a limit on the number of
      differences recorded.
    </dl>

    <p>
    The following options set the comparison mode.  The per-cell
    comparison modes are generally faster and use less memory than the
    flat mode, since only the geometry from the two cells being
    compared is called into memory.  The flat mode is required if the
    two layouts have differences in hierarchy.

    <dl>
    <dt><tt>-g</tt><dd>
      When <tt>-g</tt> is given, per-cell geometric comparison is
      used.  All "real" objects (boxes, polygons and wires) are
      considered when comparing geometry, text labels are ignored.
    </dl>

    <dl>
    <dt><tt>-f</tt><dd>
      The <tt>-f</tt> option indicates flat comparison mode, and will
      supersede <tt>-g</tt> if also given.  In flat comparison mode,
      geometry is logically flattened before comparison.
    </dl>

    If neither <tt>-f</tt> or <tt>-g</tt> appears in the argument
    list, per-cell object mode is used.

    <h2>Per-Cell Object Mode Options</h2>

    <dl>
    <dt><tt>-t</tt> <i>obj_types</i><dd>
      The <i>obj_types</i> is a word containing any or all of the
      letters <tt>c</tt>,<tt>b</tt>,<tt>p</tt>,<tt>w</tt>,<tt>l</tt>
      which indicate cells, boxes, polygons, wires, and labels.  The
      letters indicate the types of objects that will be considered. 
      If this option is not given, the default is <tt>cbpw</tt>, i.e.,
      labels are ignored.
    </dl>

    <dl>
    <dt><tt>-x</tt><dd>
      Expand subcell arrays (if comparing subcells).  Cell arrays are
      converted to individual placements before comparison, avoiding
      false errors between arrayed and equivalent unarrayed layouts.
    </dl>

    <dl>
    <dt><tt>-h</tt><dd>
      The cell list is expanded so that all cells in the hierarchy
      under the given cells are compared.  The first source given is
      used to extract the hierarchy cells.
    </dl>

    <dl>
    <dt><tt>-e</tt><dd>
      If <tt>-e</tt> is given, electrical cells will be compared. 
      Otherwise, physical cells are compared.
    </dl>
  
    <h2>Per-Cell Geometry Mode Options</h2>

    All of the options for per-cell object mode are available and have
    the same function, except that the only code that is considered
    for <tt>-t</tt> is "<tt>c</tt>".  By default, subcell checking is
    not enabled.  If enabled ("<tt>-t c</tt>" is given), then subcell
    placements are checked as in per-cell object mode.

    <p>
    When using per-cell geometry mode, the geometry is compared within
    areas of a grid whose size is given by the <a
    href="PartitionSize"><b>PartitionSize</b></a> variable. 
    Experimenting with this size can lead to improved speed, depending
    on the layout density.  The default partition size is 100 microns. 
    For best performance, this can be increased for low density, or
    reduced for high density, where "density" refers to the number of
    trapezoids per area.

    <h2>Flat Mode Options</h2>

    None of the per-cell options apply in flat mode, though with the
    exception of <tt>-e</tt> if given they will be benignly ignored. 
    Flat mode applies only to physical data, and if <tt>-e</tt> is
    given, an error will result.

    <p>
    <dl>
    <dt><tt>-a</tt> <i>L</i>,<i>B</i>,<i>R</i>,<i>T</i><dd>
      The <tt>-a</tt> option specifies the rectangular area where
      comparison is performed.  If not given, comparison is performed
      over the entire cell area of both cells.  The word that follows
      <tt>-a</tt> consists of the four rectangle cordinate values, in
      microns, separated by commas.  There can be no white space.
    </dl>

    <p>
    The flat geometry mode is somewhat orthogonal to the other modes. 
    The algorithm uses two levels of gridding to partition the layout
    into pieces, and directly compares the geometry in each fine grid
    cell.

    <p>
    <dl>
    <dt><tt>-i</tt> <i>fine_grid</i><dd>
      This sets the size of the fine grid used for comparison.  The
      geometry in each fine grid cell is compared.  The value is in
      microns in the range 1.0 - 100.0, if not given 20.0 is used.
    </dl>

    <dl>
    <dt><tt>-m</tt> <i>coarse_mult</i><dd>
      This sets the size of the coarse grid, as an integer multiple of
      the fine grid size.  The coarse grid size is the chunk size for
      reading geometry into memory.  Once in memory, the geometry is
      split into the fine grid cells and compared.  Using too large of
      a coarse grid can cause memory exhaustion for dense layouts, but
      on the other hand a larger coarse grid size usually improves
      speed.  The user should experiment to find the best values for
      the fine and coarse grid for their layouts.  The acceptable
      range for this parameter is 1 - 100.  If not given, 20 is used.
    </dl>

!!SEEALSO
filetool

!!KEYWORD
ft:split
!!TITLE
FileTool:  Layout File Splitting
!!HTML
    The <i>FileTool</i> can be used to split a large layout file into
    a collection of smaller layout files.

    <p>
    For splitting, the command line takes the form:
    <blockquote>
    <tt>filetool</tt> [<tt>-set</tt> <i>variables</i>]
      <tt>-i</tt> <i>filename</i> <tt>-o</tt> <i>basename</i>.<i>ext</i>
      [<tt>-c</tt> <i>cellname</i>] <tt>-g</tt> <i>gridsize</i>
      [<tt>-b</tt> <i>bloatval</i>]
      [<tt>-w</tt> <i>l</i>,<i>b</i>,<i>r</i>,<i>t</i>] [<tt>-f</tt>]
      [<tt>-cl</tt>] [<tt>-e</tt>]
    </blockquote>

    <p>
    This mode will write output files corresponding to the partitions
    of a square grid logically covering all or part of a specified
    cell in a given layout file.  The output files contain physical
    data only.  These files can be flat or hierarchical.

    <p>
    The arguments are as follows:

    <dl>
    <dt><tt>-i</tt> <i>filename</i><dd>
      This mandatory argument specifies a path to a layout file, or a
      path to a saved CHD file.  This source will provide cell data as
      input.
    </dl>

    <dl>
    <dt><tt>-o</tt> <i>basename</i>.<i>ext</i><dd>
      This mandatory argument provides the base name of the output
      files that will be created, and the type of file to write. 
      There are generally two components of the argument, separated by
      a period.  The <i>basename</i> component may be absent, but the
      period must remain.  If the <i>basename</i> is absent, the name
      of the top-level cell being split will be used. 

      <p>
      The <i>ext</i>, which follows the period, must be one of the
      following to indicate the file format to be used for output.
      <table border=0>
      <tr><td>CGX</td> <td><tt>.cgx</tt></td></tr>
      <tr><td>CIF</td> <td><tt>.cif</tt></td></tr>
      <tr><td>GDSII</td> <td><tt>.gds, .str, .strm, .stream</tt></td></tr>
      <tr><td>OASIS</td> <td><tt>.oas</tt></td></tr>
      </table>

      <p>
      The GDSII and CGX extensions can be fillowed by "<tt>.gz</tt>",
      which will indicate <tt>gzip</tt> compression.

      <p>
      The file names produced will have the form
      <blockquote>
        <i>basename</i>_<i>X</i>_<i>Y</i>.<i>ext</i>
      </blockquote>
      where <i>X</i> and <i>Y</i> are the indices of the corresponding
      grid cell.
    </dl>

    <dl>
    <dt><tt>-c</tt> <i>cellname</i><dd>
      This optional argument specifies the name of the cell to be used
      as the top-level in output.  If not given, this will be the
      first top-level cell found in the input file, or, if the input
      source is a CHD, the default cell configured into the CHD will
      be used.
    </dl>

    <dl>
    <dt><tt>-g</tt> <i>gridsize</i><dd>
      This mandatory argument specifies the length, in microns, of the
      side of a square grid cell.  The area to be written will be
      tiled with a grid of this size, with the origin at the lower
      left corner.  Each grid cell with nonzero overlap area with the
      area to be written will have a corresponding output file
      produced.
    </dl>

    <dl>
    <dt><tt>-b</tt> <i>bloatval</i><dd>
      This optional argument specifies how much, in microns, the grid
      cells will be bloated before the write operation.  If positive,
      the grid cells will be expanded, and the files will logically
      overlap.  The value can also be negative, which will leave
      logically unwritten area between output files.
    </dl>

    <dl>
    <dt><tt>-w</tt> <i>l</i>,<i>b</i>,<i>r</i>,<i>t</i><dd>
      This specifies a rectangular region, in the cell being written,
      which will be gridded and written to output files.  If not
      provided, the entire cell area is understood.  The four numbers
      are given in microns, separated by commas, with no intervening
      white space.
    </dl>

    <dl>
    <dt><tt>-f</tt><dd>
      If this flag is given, the output files will be flat.  All
      geometry will be contained in the top-level cell of each file. 
      Be aware that this can consume a lot of disk space.

      <p>
      If not given, the output files will maintain the hierarchy of
      the original file.  In this mode, only the geometry needed to
      fully render the area of the top-level cell corresponding to the
      (possibly bloated) grid cell area is retained.  Subcells may
      therefor contain only part of the original geometry, or may not
      appear at all if not instantiated within the area.  Subcells may
      also become empty, these are not automatically stripped.
    </dl>

    <dl>
    <dt><tt>-cl</tt><dd>
      This flag will cause geometry to be clipped at the (possibly
      bloated) grid cell boundaries.  This applies whether flattening
      or not.  Note that when not flattening, clipping does not
      guarantee that geometry is confined to the clip area.
    </dl>

    <dl>
    <dt><tt>-e</tt><dd>
      This flag will turn on empty cell filtering.  When not
      flattening, due to the nature of the algorithm, it is possible
      that empty cells will be produced in output.  These generally do
      no harm, but they consume space.
    </dl>

    The command will create a temporary CHD, if necessary.  Each grid
    region is written out sequentially, in the manner of
!!IFDEF Xic
     <a href="xic:convt#region">windowing</a>
!!ELSE
     windowing
!!ENDIF
     from the <b>Conversion</b> panel from the <b>Convert Menu</b> in
     <i>Xic</i>.

!!SEEALSO
filetool

!!KEYWORD
ft:assem
!!TITLE
FileTool:  Layout File Merging and Translation
!!HTML
    The <i>FileTool</i> can take a list of arguments which correspond
    logically to the keywords of an assembly specification script. 
    The argument list begins after any <tt>-set</tt> variables
    present.

    <p>
    This automates reading of cells from archives, subsequent
    processing, and writing to a new archive file.  It provides the
    capabilities of the <b>Conversion</b> panel in the <b>Convert
    Menu</b> in <i>Xic</i>, such as format translation, windowing, and
    flattening.  Additionally, multiple input files and cells can be
    processed and merged into a larger archive, on-the-fly or by using
    a
!!IFDEF Xic
    <a href="xic:hier">Cell Hierarchy Digest</a>
!!ELSE
    Cell Hierarchy Digest
!!ENDIF
    (CHD) so as to avoid memory limitations.  Cell definitions for the
    read and possibly modified cells are streamed into the output
    file, and the output file can contain a new top-level cell in
    which the cells read are instantiated.  The input and output can
    be any of the supported archive formats (CGX, CIF, GDSII, OASIS),
    in any combination.

    <p>
    The same operations can be controlled by a specification script
    file, the path to which is given as the argument following
    "<tt>-eval</tt>".  The script uses a language which will be
    described.  This supplies the output file name and the description
    of the top-level cell (if any), the files to be used as input, the
    cells to extract from these files, and the operations to perform. 
    It is a simple text file, prepared by the user, containing a
    number of keywords with values.  The specification script can also
    be obtained from the
!!IFDEF Xic
    <a href="xic:assem"><b>Assemble</b></a>
!!ELSE
    <b>Assemble</b>
!!ENDIF
    command in the <b>Convert Menu</b>, which is a graphical front-end
    to the
!!IFDEF Xic
    <a href="!assemble"><b>!assemble</b></a>
!!ELSE
    <b>!assemble</b>
!!ENDIF
    command in <i>Xic</i>.

    <p>
    Alternatively, the argument list can consist of a series of option
    tokens and values.  These are logically almost equivalent to the
    language of the specification file.  This gives the user the
    option to enter job descriptions entirely from the command line. 
    These command-line options start with a '-' character.

    <p>
    Only physical data are read, electrical data will be stripped in
    output.  A log file is produced when the command is run.  This is
    named "<tt>assemble.log</tt>" and is written in the current
    directory.  The log file contains warning and error messages
    emitted by the readers during file processing, and should be
    consulted if a problem occurs.

    <h2>Assemble File and Option Argument Format</h2>

    The command parses and executes a specification file or option
    list in the format described below.  The file text contains
    keyword directives and values which specify the operations to be
    performed.  Each active line begins with a keyword, and all
    keywords are case-insensitive.  Blank lines and lines that begin
    with non-alpha characters are taken as comments and are ignored. 
    Unrecognized tokens will generate an error and no processing will
    be done.  There is an almost one-to-one correspondence between
    file keywords and equivalent command-line options.  For options
    that require a string, the string can be double-quoted ("..."),
    and these must be quoted if they contain white-space.

    <p>
    The command input can either come from a file, or from the
    command-line arguments, but not both.

    <p>
    Overall, the input logically contains three levels of directives:
    <blockquote>
    Header Block<br>
    Source Block<br>
    &nbsp;&nbsp;[Placement Block]<br>
    &nbsp;&nbsp;[...]<br>
    [...]
    </blockquote>

    <p>
    The Header Block contains a mandatory output file specification
    line, and optional additional lines.  The Source Block contains a
    reference to a source file, and may contain zero or more Placement
    Blocks, which identify a particular cell from that file.  The
    specification must contain at least one Source Block.

    <p>
    Indentation can be used in the specification file to highlight the
    scoping.  The same logic applies in an argument list, but may be
    less visible since all options appear in one line.

    <h4>Header Block</h4>

    The Header Block contains global directives.  This must be
    followed by at least one Source Block, which specifies an input
    source.

    <dl>
    <dt><tt>OutFile</tt> <i>out_file_name</i><br>
    (option: <tt>-o</tt> <i>out_file_name</i>)<dd>
      This line or option is mandatory, and provides the name of the
      file to be used for output.  This must appear before any Source
      Blocks.  The output file name must have a recognized extension
      that corresponds to the format to be used.  These are:
      <table border=0>
      <tr><td>CGX</td> <td><tt>.cgx</tt></td></tr>
      <tr><td>CIF</td> <td><tt>.cif</tt></td></tr>
      <tr><td>GDSII</td> <td><tt>.gds, .str, .strm, .stream</tt></td></tr>
      <tr><td>OASIS</td> <td><tt>.oas</tt></td></tr>
      </table>

      <p>
      Only these extensions are recognized, however CGX and GDSII
      allow an additional "<tt>.gz</tt>" which will imply compression.

      <p>
      Basic defaults for the various output formats are as specified in
      variables that may be set in "<tt>-set</tt>" arguments.
    </dl>

    <dl>
    <dt><tt>TopCell</tt> <i>cellname</i><br>
    (option: <tt>-t</tt> <i>cellname</i>)<dd>
      This optional line or option specifies that a new top-level cell
      is to be created in output.  At most one <tt>TopCell</tt> can be
      given.  This must appear before any Source Block.

      <p>
      If a <tt>TopCell</tt> is given, a corresponding cell definition
      will be created in the output file, and all cells specified in
      Placement Blocks (the "placements") will be instantiated in the
      new cell.  Whether or not a <tt>TopCell</tt> is given, the
      placements will be streamed to the output file, meaning that the
      cell definitions needed to describe the cell and possibly its
      hierarchy will be added to the output file.  With a
      <tt>TopCell</tt> given, the placements will be instantiated in
      the new top cell in output.  Otherwise, there is no placement,
      and redundant Placement Blocks will be ignored.  The output file
      can end up with multiple top-level cells, which may be desirable
      when creating a library.
    </dl>

    <p>
    The Header can also contain any of the Source Block or Placement
    Block directives below.  These will be used as defaults in all
    blocks that follow, but can be overridden from within the blocks,
    or set, modified, or reset between Source Blocks.

    <h4>Source Blocks</h4>

    The Source Blocks specify an input file, and provide directives
    that are active when the source is read.  The Source Block may
    contain Placement Blocks, which identify individual cells or cell
    hierarchies to be read.

    <p>
    The same file might be used in more than one Source Block, if the
    directives, such as cell name modification, are different in the
    two blocks.

    <p>
    The Source Blocks start with the following keyword:

    <dl>
    <dt><tt>Source</tt> <i>filename</i><br>
    (option: <tt>-i</tt> <i>filename</i>)<dd>
      This line or option represents the start of a Source Block for
      the given input file.  The file must be in one of the supported
      archive formats, and the format is recognized automatically, so
      there is no name suffix requirement as with the output file
      name.

      <p>
      The absence of any Placement Blocks defined in the Source Block
      implies that all cells found in the file will be read.
    </dl>

    <p>
    The Source Blocks can be terminated with:

    <dl>
    <dt><tt>EndSource</tt><br>
    (option: <tt>-i-</tt>)<dd>
      This optional keyword or option terminates the present Source
      Block.  Lines or text tokens that follow, up to another
      <tt>Source</tt> keyword or <tt>-i</tt> option, are taken in the
      context of the Header Block.  Thus, directives can be set,
      modified, or reset between Source Blocks, and will remain in
      force (in the Header Block context) until reset or modified
      between subsequent Source Blocks.  This keyword is optional, as
      it is implicit if another <tt>Source</tt> line or <tt>-i</tt>
      option is given.  It is required only if one wishes to change
      the directives in the Header context for subsequent Source
      Blocks.
    </dl>

    <p>
    Within the Source Block, one may find Placement Blocks, Source
    Block directives, and Placement Block directives.

    <h4>Source Block Directives</h4>

    The Source Block directives can be given in the context of the
    Header Block, in which case they serve as defaults for the Source
    Blocks that follow.  They can also be given in a Source Block, in
    which case they apply in that Source Block only, and override a
    similar directive active from a definition in the Header Block
    context.  The term "Header Block context" means that the
    definition appears before any Source Block, or after an
    <tt>EndSource</tt> line (<tt>-i-</tt> option) but before the next
    <tt>Source</tt> line (<tt>-i</tt> option).

    <p>
    The Source Block directives can not appear inside of Placement
    Blocks, where they would have no meaning.  Thus, in a Source
    Block, Source Block directives can appear before the Placement
    Blocks, or between <tt>EndPlace</tt> lines (<tt>-c-</tt> option)
    and the next <tt>Place</tt> (<tt>-c</tt> option) or
    <tt>PlaceTop</tt> line (<tt>-ctop</tt> option).  The directives
    that apply are those logically in force at the end of the Source
    Block.  The Source Block directives apply to the Source Block, and
    will have the same effect for all contained Placement Blocks,
    regardless of ordering.

    <p>
    The following lines define Source Block directives:

    <dl>
    <dt><tt>LayerList</tt> <i>list_of_layer_names</i><br>
    (option: <tt>-l</tt> <i>list_of_layer_names</i>)<dd>
      This saves a list of space-separated layer names or hex-encoded
      pseudo-names to be used with the layer filtering directives
      <tt>OnlyLayers</tt> (<tt>-n</tt> option) and <tt>SkipLayers</tt>
      (<tt>-k</tt> option).  This directive in itself does not alter
      output.  This list is implied when a <i>list_of_layer_names</i>
      is provided with these keywords.  In the command line, the list
      of layer names must be quoted if it contains more than one
      entry, but this is not required in a file.
    </dl>

    <dl>
    <dt><tt>OnlyLayers</tt> [<i>list_of_layer_names</i>]<br>
    (option: <tt>-n</tt>)<dd>
      When active, only the listed layers will be used in output,
      geometry on other layers will be skipped.  Arguments following
      this keyword will be used to set or reset the
      <tt>LayerList</tt>, and have the same interpretation as for that
      keyword.  If no arguments follow, the <tt>LayerList</tt>
      currently in scope will be used.  The <tt>-n</tt> command line
      token does not accept a list of layer names, unlike the
      corresponding keyword.  This must be separately specified with a
      <tt>-l</tt> option.
    </dl>

    <dl>
    <dt><tt>NoOnlyLayers</tt><br>
    (option: <tt>-n-</tt>)<dd>
      Turn off restriction to layers in the <tt>LayerList</tt>, if the
      <tt>OnlyLayers</tt> directive (<tt>-n</tt> option) is in force. 
      The corresponding <tt>LayerList</tt> remains defined.
    </dl>

    <dl>
    <dt><tt>SkipLayers</tt> [<i>list_of_layer_names</i>]<br>
    (option: <tt>-k</tt>)<dd>
      When active, listed layers will not appear in output, geometry
      on layers not listed will appear in output.  Arguments following
      this keyword will be used to set or reset the
      <tt>LayerList</tt>, and have the same interpretation as for that
      keyword.  If no arguments follow, the <tt>LayerList</tt>
      currently in scope will be used.  The <tt>-k</tt> command line
      token does not accept a list of layer names, unlike the
      corresponding keyword.  This must be separately specified with a
      <tt>-l</tt> option.
    </dl>

    <dl>
    <dt><tt>NoSkipLayers</tt><br>
    (option: <tt>-k-</tt>)<dd>
      Turn off layer skipping, if the <tt>SkipLayers</tt> directive
      (<tt>-k</tt> option) is currently in force.  The associated
      <tt>LayerList</tt> remains defined.
    </dl>

    <dl>
    <dt><tt>LayerAliases</tt> <i>name1</i>=<i>alias1</i>
       <i>name2</i>=<i>alias2</i> ...<br>
    (option: <tt>-a</tt> <i>name1</i>=<i>alias1</i>
       <i>name2</i>=<i>alias2</i> ...)<dd>
      This keyword provides a list a layer aliasing definitions to
      apply in output.  The layer names can be hex-encoded
      pseudo-names when applicable.  This is similar to the layer
      aliasing found in the <b>Conversion</b> panel and elsewhere in
      <i>Xic</i>.  In the command line, the list must be quoted if it
      contains more than one entry, but this is not required in a
      file.
    </dl>

    <dl>
    <dt><tt>ConvertScale</tt> <i>scale_factor</i><br>
    (option: <tt>-cs</tt> <i>scale_factor</i>)<dd>
      This directive has effect only in the case where there are no
      Placement Blocks, and is ignored otherwise.  This will scale all
      coordinates read from the source by the given factor, which can
      be in the range 0.001 through 1000.0.  Thus, in output, the
      corresponding cell definitions will be scaled by this factor. 
      This is similar to the <tt>Scale</tt> Placement Block directive
      (<tt>-s</tt> option), but applies when there are no Placement
      Blocks and Placement Block directives are ignored.
    </dl>

    <dl>
    <dt><tt>ToLower</tt><br>
    (option: <tt>-tlo</tt>)<dd>
      This sets a flag to indicate conversion of upper case cell names
      to lower case in output.  Mixed-case cell names are unaffected.
    </dl>

    <dl>
    <dt><tt>NoToLower</tt><br>
    (option: <tt>-tlo-</tt>)<dd>
      Turn off lower-casing, if the <tt>ToLower</tt> directive
      (<tt>-tlo</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>ToUpper</tt><br>
    (option: <tt>-tup</tt>)<dd>
      This sets a flag to indicate conversion of lower case cell names
      to upper case.  Mixed-case cell names are unaffected.
    </dl>

    <dl>
    <dt><tt>NoToUpper</tt><br>
    (option: <tt>-tup-</tt>)<dd>
      Turn off upper-casing, if the <tt>ToUpper</tt> directive
      (<tt>-tup</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>CellNamePrefix</tt> <i>prefix_string</i><br>
    (option: <tt>-p</tt> <i>prefix_string</i>)<dd>
      Cell name change prefix.  This operation occurs after case
      conversion.  The prefix_string is interpreted in the manner of
      the <a href="InCellNamePrefix"><b>InCellNamePrefix</b></a>
      variable.
    </dl>

    <dl>
    <dt><tt>CellNameSuffix</tt> <i>suffix_string</i><br>
    (option: <tt>-u</tt> <i>suffix_string</i>)<dd>
      Cell name change suffix.  This operation occurs after case
      conversion.  The <i>suffix_string</i> is interpreted in the
      manner of the <a
      href="InCellNameSuffix"><b>InCellNameSuffix</b></a> variable.
    </dl>

    <h4>Placement Blocks</h4>

    Placement Blocks can appear only within Source Blocks.  Each
    Source Block can have zero or more Placement Blocks.  If no
    Placement Blocks are given, all cells in the source file are
    written to output, and Placement Block directives that may be in
    force are ignored.

    <p>
    A Placement Block is used to indicate a specific cell within the
    source file, which will be written to output.  The Placement Block
    directives specify actions to take, for example whether to process
    just this cell or its hierarchy, whether to use flattening and/or
    windowing, and the placement transform if the cell is to be
    instantiated in a given <tt>TopCell</tt>.

    <p>
    As cells are written to output, a table is maintained to prevent
    writing duplicate cell definitions.  Each cell needed to represent
    the cell hierarchies contained in the output file is written once
    only.  When different versions of the same cell are needed, such
    as with different scaling, the names of the cells are altered to
    avoid a name clash.  This is accomplished by appending
    "<tt>$</tt><i>N</i>", where <i>N</i> is an integer which makes the
    new name unique, to the cell names.

    <p>
    A new Placement Block, which can appear only within a Source
    Block, will begin with either of the following keywords or
    options:

    <dl>
    <dt><tt>Place</tt> <i>cellname</i> [<i>placement_name</i>]<br>
    (option: <tt>-c</tt> <i>cellname</i>)<dd>
      The <i>cellname</i>, which must name a cell in the source file,
      will be included in the output file.  If a <tt>TopCell</tt> was
      given, the cell will also be instantiated in the given top cell. 
      The <i>placement_name</i>, if given, will replace
      <i>cellname</i> in output.  In either case, any cell name
      alteration presently in force will be applied.  If a Placement
      Block matches a previous block except for the transformation
      parameters (<tt>Translate</tt>, <tt>Rotate</tt>,
      <tt>Magnify</tt>, <tt>Reflect</tt>), then if a <tt>TopCell</tt>
      was given, an instance will be added with the new transform, but
      the cell definitions are already in the output and will not be
      streamed.  Thus, in this case with no <tt>TopCell</tt>, there
      would be no addition to output.

      <p>
      In a command line, the <i>placement_name</i> can not follow the
      <i>cellname</i> as in a file.  Rather, there is a special option
      token
      <blockquote>
        <tt>-ca</tt> <i>placement_name</i>
      </blockquote>
      that can appear within the Placement Block which specifies the
      name change.
    </dl>

    <dl>
    <dt><tt>PlaceTop</tt> [<i>placement_name</i>]<br>
    (option: <tt>-ctop</tt>)<dd>
      The <tt>PlaceTop</tt> line (<tt>-ctop</tt> option) is equivalent
      to a <tt>Place</tt> line (<tt>-c</tt> option), except that it
      will automatically select the first top-level cell found in the
      source.  It is equivalent to the <tt>Place</tt> line
      (<tt>-c</tt> option) with the name of this cell as the first
      (only) argument.  This is convenient when the top-level cell
      name is unknown.  Unlike the keyword, the <tt>-ctop</tt> option
      does not take a following <i>placement_name</i>, which must be
      given by a <tt>-ca</tt> option within the Placement Block.
    </dl>

    <p>
    A Placement Block can be terminated with:

    <dl>
    <dt><tt>PlaceEnd</tt><br>
    (option: <tt>-c-</tt>)<dd>
      This optional keyword will end the current Placement Block. 
      Subsequent lines will be accepted in the scope of the containing
      Source Block.  This keyword is optional, as it is implicit if a
      <tt>Place</tt> or <tt>PlaceTop</tt> keyword (<tt>-c</tt> or
      <tt>-ctop</tt> option) is given.  It is useful if one needs to
      add, modify, or reset Placement Block directives in the Source
      Block scope, which will apply to subsequent Placement Blocks.

      <p>
      A Placement Block may contain any of the Placement Block
      directives, which control how the cell is treated in output. 
      The transformations apply only when a <tt>TopCell</tt> was given
      in the Header Block, and control the location and orientation of
      the instantiation.
    </dl>

    <h4>Placement Block Directives</h4>

    The Placement Block directives can appear in the Header Block
    context, the Source Block context, or within a Placement Block. 
    Thus, they can appear virtually anywhere in the specification file
    or command line, though the location alters the scope.

    <p>
    If given in the Header Block context, meaning that the directive
    appears before the first Source Block, or after an
    <tt>EndSource</tt> line (<tt>-i-</tt> option) but ahead of the
    next <tt>Source</tt> line (<tt>-i</tt> option), then the directive
    will be active as a default in all Source Blocks that follow,
    until the directive is changed or reset in the Header Block
    context.

    <p>
    Similarly, if a Placement Block directive is given in a Source
    Block, it will override a similar directive set in the Header
    Block scope, and will apply to all Placement Blocks that follow
    within the Source Block, until changed or reset in the context of
    the same Source Block.  Being given in a Source Block, or in the
    context of a Source Block, means that the directive appears before
    the first <tt>Place</tt> or <tt>PlaceTop</tt> line (<tt>-c</tt> or
    <tt>-ctop</tt> option), or after an <tt>EndPlace</tt> line
    (<tt>-c-</tt> option) but before the next <tt>Place</tt> or
    <tt>PlaceTop</tt> line or equivalent options.

    <p>
    If the Placement Block directive appears within a Placement Block,
    it will override a similar directive set in the Source Block or
    Header Block, and will apply to the current Placement Block only.

    <p>
    Placement Block directives are ignored when reading a source that
    has no Placement Blocks.

    <p>
    The following directives define the transformation applied to an
    instantiation of the cell in the <tt>TopCell</tt>.  These will be
    ignored unless a <tt>TopCell</tt> was given.

    <dl>
    <dt><tt>Translate</tt> <i>x y</i><br>
    (options: <tt>-x</tt> <i>x</i> <tt>-y</tt> <i>y</i>)<dd>
      Specify the translation coordinates.  If not given, the default
      is 0, 0.  Note that the keyword corresponds to two command-line
      options.
    </dl>

    <dl>
    <dt><tt>Rotate</tt> <i>angle</i><br>
    (option: <tt>-ang</tt> <i>angle</i>)<dd>
      Specify a rotation angle, which must be a multiple of 45
      degrees.  If not given, the default is no rotation.
    </dl>

    <dl>
    <dt><tt>Magnify</tt> <i>magn</i><br>
    (option: <tt>-m</tt> <i>magn</i>)<dd>
      Specify an instance magnification.  If not given, the default is
      1.0.  Values from .001 to 1000.0 are accepted.
    </dl>

    <dl>
    <dt><tt>Reflect</tt><br>
    (option: <tt>-my</tt>)<dd>
      Apply a mirror-Y transformation (before rotation, if any).
    </dl>

    <dl>
    <dt><tt>NoReflect</tt><br>
    (option: <tt>-my-</tt>)<dd>
      Turn off the mirror-Y transformation, if the <tt>Reflect</tt>
      directive (<tt>-my</tt> option) is currently in force.
    </dl>

    <p>
    The following directives initiate operations on the cell
    definition, as it is written to output.  These are performed
    whether or not a <tt>TopCell</tt> was defined.

    <dl>
    <dt><tt>Scale</tt> <i>scale_factor</i><br>
    (option: <tt>-s</tt> <i>scale_factor</i>)<dd>
      The cells read from the source will have all coordinates
      multiplied by the scale factor, which can be in the range .001 -
      1000.0.  This is distinct from the <tt>Magnify</tt> factor,
      which applies only to the instance created in the
      <tt>TopCell</tt>, and will in effect multiply the scale factor. 
      When there are no Placement Blocks, and so Placement Block
      directives are ignored, the <tt>ConvertScale</tt> Source Block
      directive (<tt>-cs</tt> option) can be used to obtain the same
      effect.
    </dl>

    <dl>
    <dt><tt>NoHier</tt><br>
    (option: <tt>-h</tt>)<dd>
      If given, only the specified cell is written to output, and not
      its complete hierarchy as is the normal case.  This can produce
      output files with unresolved subcell references, which must be
      satisfied by some means.
    </dl>

    <dl>
    <dt><tt>NoNoHier</tt><br>
    (option: <tt>-h-</tt>)<dd>
      Turn off the no-hierarchy mode, if the <tt>NoHier</tt> directive
      (<tt>-h</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>NoEmpties</tt><br>
    (option: <tt>-e</tt>)<dd>
      If given, empty subcells under the cell being read will not be
      written to output.  Layer filtering will often produce empty
      cells.
    </dl>

    <dl>
    <dt><tt>NoNoEmpties</tt><br>
    (option: <tt>-e-</tt>)<dd>
      Turn off empty cell filtering, if the <tt>NoEmpties</tt>
      directive (<tt>-e</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>Flatten</tt><dd>
    (option: <tt>-f</tt>)<dd>
      If given, all geometry under the cell being read will be written
      as part of the cell being read, i.e., the cell hierarchy will be
      flattened.  The <tt>NoHier</tt> directive (<tt>-h</tt> option)
      is ignored if this is active.
    </dl>

    <dl>
    <dt><tt>NoFlatten</tt><br>
    (option: <tt>-f-</tt>)<dd>
      Turn off flattening, if the <tt>Flatten</tt> directive
      (<tt>-f</tt> option) is currently in force.
    </dl>

    <dl>
    <dt><tt>Window</tt> <i>left bottom right top</i><br>
    (option: <tt>-w</tt> <i>left</i>,<i>bottom</i>,<i>right</i>,<i>top</i>)<dd>
      If given, only the subcells (if <tt>NoHier</tt> is not active)
      and objects needed to describe the given area in the cell being
      placed will be written.  The coordinates apply to
      <i>cellname</i> after any scaling is applied, and are given in
      microns.  The four numbers can be separated by commas and/or
      white space.  In the command line, if white space is present
      between numbers, the four numbers must be quoted.  but this is
      not required in a file.
    </dl>

    <dl>
    <dt><tt>Clip</tt><br>
    (option: <tt>-cl</tt>)<dd>
      If <tt>Window</tt> was given, this will cause geometry to be
      clipped to the window.
    </dl>

    <dl>
    <dt><tt>NoClip</tt><br>
    (option: <tt>-cl-</tt>)<br>
      Turn off clipping, if the <tt>Clip</tt> directive (<tt>-cl</tt>
      option) is currently in force.
    </dl>

!!SEEALSO
filetool

